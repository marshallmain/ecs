
[[ecs-base]]
=== Base Fields

The `base` field set contains all fields which are on the top level. These fields are common across all types of events.

==== Base Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| @timestamp
| Date/time when the event originated.

This is the date/time extracted from the event, typically representing when the event was generated by the source.

If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.

Required field for all events.

type: date

example: `2016-05-23T08:05:34.853Z`

| core

// ===============================================================

|=====

[[ecs-agent]]
=== Agent Fields

The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.

Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.

==== Agent Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| agent.ephemeral_id
| Ephemeral identifier of this agent (if one exists).

This id normally changes across restarts, but `agent.id` does not.

type: keyword

example: `8a4f500f`

| extended

// ===============================================================

| agent.id
| Unique identifier of this agent (if one exists).

Example: For Beats this would be beat.id.

type: keyword

example: `8a4f500d`

| core

// ===============================================================

| agent.name
| Custom name of the agent.

This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.

If no name is given, the name is often left empty.

type: keyword

example: `foo`

| core

// ===============================================================

| agent.type
| Type of the agent.

The agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.

type: keyword

example: `filebeat`

| core

// ===============================================================

| agent.version
| Version of the agent.

type: keyword

example: `6.0.0-rc2`

| core

// ===============================================================

|=====

[[ecs-event]]
=== Event Fields

The event fields are used for context information about the log or metric event itself.

A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical or categorical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host, or vulnerabilities measured on a scanned host.

==== Event Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| event.action
| The action captured by the event.

This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.

type: keyword

example: `user-password-change`

| core

// ===============================================================

| event.category
| This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

`event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

This field is an array. This will allow proper categorization of some events that fall in multiple categories.

type: keyword


*Important*: The field value must be one of the following:

authentication, database, driver, file, host, intrusion_detection, malware, package, process, web

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-category,allowed values for event.category>>


| core

// ===============================================================

| event.created
| event.created contains the date/time when the event was first read by an agent, or by your pipeline.

This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.

In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.

In case the two timestamps are identical, @timestamp should be used.

type: date

example: `2016-05-23T08:05:34.857Z`

| core

// ===============================================================

| event.dataset
| Name of the dataset.

If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.

It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.

type: keyword

example: `apache.access`

| core

// ===============================================================

| event.hash
| Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.

type: keyword

example: `123456789012345678901234567890ABCD`

| extended

// ===============================================================

| event.id
| Unique ID to describe the event.

type: keyword

example: `8a4f500d`

| core

// ===============================================================

| event.ingested
| Timestamp when an event arrived in the central data store.

This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.

In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.

type: date

example: `2016-05-23T08:05:35.101Z`

| core

// ===============================================================

| event.kind
| This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.

`event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.

The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.

type: keyword


*Important*: The field value must be one of the following:

alert, event, metric, state, pipeline_error, signal

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-kind,allowed values for event.kind>>


| core

// ===============================================================

| event.module
| Name of the module this data is coming from.

If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.

type: keyword

example: `apache`

| core

// ===============================================================

| event.outcome
| This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

`event.outcome` simply denotes whether the event represent a success or a failure. Note that not all events will have an associated outcome. For example, this field is generally not populated for metric events or events with `event.type:info`.

type: keyword


*Important*: The field value must be one of the following:

failure, success, unknown

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-outcome,allowed values for event.outcome>>


| core

// ===============================================================

| event.sequence
| Sequence number of the event.

The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.

type: long



| extended

// ===============================================================

| event.type
| This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

`event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

This field is an array. This will allow proper categorization of some events that fall in multiple event types.

type: keyword


*Important*: The field value must be one of the following:

access, change, creation, deletion, end, error, info, installation, start

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-type,allowed values for event.type>>


| core

// ===============================================================

|=====

[[ecs-file]]
=== File Fields

A file is defined as a set of information that has been created on, or has existed on a filesystem.

File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.

==== File Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| file.accessed
| Last time the file was accessed.

Note that not all filesystems keep track of access time.

type: date



| extended

// ===============================================================

| file.attributes
| Array of file attributes.

Attributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.

type: keyword

example: `["readonly", "system"]`

| extended

// ===============================================================

| file.created
| File creation time.

Note that not all filesystems store the creation time.

type: date



| extended

// ===============================================================

| file.ctime
| Last time the file attributes or metadata changed.

Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.

type: date



| extended

// ===============================================================

| file.device
| Device that is the source of the file.

type: keyword

example: `sda`

| extended

// ===============================================================

| file.directory
| Directory where the file is located. It should include the drive letter, when appropriate.

type: keyword

example: `/home/alice`

| extended

// ===============================================================

| file.drive_letter
| Drive letter where the file is located. This field is only relevant on Windows.

The value should be uppercase, and not include the colon.

type: keyword

example: `C`

| extended

// ===============================================================

| file.extension
| File extension.

type: keyword

example: `png`

| extended

// ===============================================================

| file.gid
| Primary group ID (GID) of the file.

type: keyword

example: `1001`

| extended

// ===============================================================

| file.group
| Primary group name of the file.

type: keyword

example: `alice`

| extended

// ===============================================================

| file.inode
| Inode representing the file in the filesystem.

type: keyword

example: `256383`

| extended

// ===============================================================

| file.mode
| Mode of the file in octal representation.

type: keyword

example: `0640`

| extended

// ===============================================================

| file.mtime
| Last time the file content was modified.

type: date



| extended

// ===============================================================

| file.name
| Name of the file including the extension, without the directory.

type: keyword

example: `example.png`

| extended

// ===============================================================

| file.owner
| File owner's username.

type: keyword

example: `alice`

| extended

// ===============================================================

| file.path
| Full path to the file, including the file name. It should include the drive letter, when appropriate.

type: keyword

Multi-fields:

* file.path.text (type: text)



example: `/home/alice/example.png`

| extended

// ===============================================================

| file.size
| File size in bytes.

Only relevant when `file.type` is "file".

type: long

example: `16384`

| extended

// ===============================================================

| file.target_path
| Target path for symlinks.

type: keyword

Multi-fields:

* file.target_path.text (type: text)





| extended

// ===============================================================

| file.type
| File type (file, dir, or symlink).

type: keyword

example: `file`

| extended

// ===============================================================

| file.uid
| The user ID (UID) or security identifier (SID) of the file owner.

type: keyword

example: `1001`

| extended

// ===============================================================

|=====

[[ecs-file_classification]]
=== File Classification Fields

TODO

==== File Classification Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| file_classification.captured_file
| TODO

type: boolean



| custom

// ===============================================================

| file_classification.entry_modified
| TODO

type: double



| custom

// ===============================================================

| file_classification.is_signature_trusted
| TODO

type: boolean



| custom

// ===============================================================

| file_classification.macro_details.code_page
| TODO

type: long



| custom

// ===============================================================

| file_classification.macro_details.errors
| TODO

type: nested



| custom

// ===============================================================

| file_classification.macro_details.errors.count
| TODO

type: long



| custom

// ===============================================================

| file_classification.macro_details.errors.error_type
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.file_extension
| TODO

type: long



| custom

// ===============================================================

| file_classification.macro_details.macro_collection_hashes.imphash
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.macro_collection_hashes.md5
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.macro_collection_hashes.sha1
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.macro_collection_hashes.sha256
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.project_file_hashes.imphash
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.project_file_hashes.md5
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.project_file_hashes.sha1
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.project_file_hashes.sha256
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data
| TODO

type: nested



| custom

// ===============================================================

| file_classification.macro_details.stream_data.imphash
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.md5
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.name
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.raw_code
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.raw_code_size
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.sha1
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.macro_details.stream_data.sha256
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.quarantine_result.alert_correlation_id
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.quarantine_result.quarantine_path
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.signature_signer
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.temp_file_path
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.user_blacklisted
| TODO

type: boolean



| custom

// ===============================================================

| file_classification.yara_hits
| TODO

type: nested



| custom

// ===============================================================

| file_classification.yara_hits.identifier
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.yara_hits.matched_data
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.yara_hits.rule_name
| TODO

type: keyword



| custom

// ===============================================================

| file_classification.yara_hits.version
| TODO

type: keyword



| custom

// ===============================================================

|=====

[[ecs-host]]
=== Host Fields

A host is defined as a general computing instance.

ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.

==== Host Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| host.architecture
| Operating system architecture.

type: keyword

example: `x86_64`

| core

// ===============================================================

| host.domain
| Name of the domain of which the host is a member.

For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.

type: keyword

example: `CONTOSO`

| extended

// ===============================================================

| host.hostname
| Hostname of the host.

It normally contains what the `hostname` command returns on the host machine.

type: keyword



| core

// ===============================================================

| host.id
| Unique host id.

As hostname is not always unique, use values that are meaningful in your environment.

Example: The current usage of `beat.name`.

type: keyword



| core

// ===============================================================

| host.ip
| Host ip address.

type: ip



| core

// ===============================================================

| host.mac
| Host mac address.

type: keyword



| core

// ===============================================================

| host.name
| Name of the host.

It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.

type: keyword



| core

// ===============================================================

| host.type
| Type of host.

For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.

type: keyword



| core

// ===============================================================

| host.uptime
| Seconds the host has been up.

type: long

example: `1325`

| extended

// ===============================================================

|=====

[[ecs-process]]
=== Process Fields

These fields contain information about a process.

These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.

==== Process Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| process.args
| Array of process arguments, starting with the absolute path to the executable.

May be filtered to protect sensitive information.

type: keyword

example: `['/usr/bin/ssh', '-l', 'user', '10.0.0.16']`

| extended

// ===============================================================

| process.args_count
| Length of the process.args array.

This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

type: long

example: `4`

| extended

// ===============================================================

| process.argv_list
| TODO

type: keyword



| custom

// ===============================================================

| process.command_line
| Full command line that started the process, including the absolute path to the executable, and all arguments.

Some arguments may be filtered to protect sensitive information.

type: keyword

Multi-fields:

* process.command_line.text (type: text)



example: `/usr/bin/ssh -l user 10.0.0.16`

| extended

// ===============================================================

| process.cpu_percent
| TODO

type: double



| custom

// ===============================================================

| process.cwd
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions
| TODO

type: nested



| custom

// ===============================================================

| process.defense_evasions.delta_count
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.evasion_subtype
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.evasion_type
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.instruction_pointer
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.memory_sections
| TODO

type: nested



| custom

// ===============================================================

| process.defense_evasions.memory_sections.memory_address
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.memory_sections.memory_size
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.memory_sections.protection
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.module_path
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.thread.thread_id
| TODO

type: long



| custom

// ===============================================================

| process.defense_evasions.thread.thread_start_address
| TODO

type: keyword



| custom

// ===============================================================

| process.defense_evasions.total_memory_size
| TODO

type: keyword



| custom

// ===============================================================

| process.domain
| TODO

type: keyword



| custom

// ===============================================================

| process.env_variables
| TODO

type: keyword



| custom

// ===============================================================

| process.executable
| Absolute path to the process executable.

type: keyword

Multi-fields:

* process.executable.text (type: text)



example: `/usr/bin/ssh`

| extended

// ===============================================================

| process.exit_code
| The exit code of the process, if this is a termination event.

The field should be absent if there is no exit code for the event (e.g. process start).

type: long

example: `137`

| extended

// ===============================================================

| process.file_hash.imphash
| Imphash.

type: keyword



| custom

// ===============================================================

| process.file_hash.md5
| MD5 hash.

type: keyword



| custom

// ===============================================================

| process.file_hash.sha1
| SHA1 hash.

type: keyword



| custom

// ===============================================================

| process.file_hash.sha256
| SHA256 hash.

type: keyword



| custom

// ===============================================================

| process.file_hash.sha512
| SHA512 hash.

type: keyword



| custom

// ===============================================================

| process.gid
| TODO

type: long



| custom

// ===============================================================

| process.group
| TODO

type: keyword



| custom

// ===============================================================

| process.handle
| TODO

type: nested



| custom

// ===============================================================

| process.handle.handle_id
| TODO

type: long



| custom

// ===============================================================

| process.handle.handle_name
| TODO

type: keyword



| custom

// ===============================================================

| process.handle.handle_type
| TODO

type: keyword



| custom

// ===============================================================

| process.has_unbacked_execute_memory
| TODO

type: boolean



| custom

// ===============================================================

| process.hash_matched_module
| TODO

type: boolean



| custom

// ===============================================================

| process.is_endpoint
| Is this the Elastic Endpoint process or not.

type: boolean



| custom

// ===============================================================

| process.memory_percent
| TODO

type: double



| custom

// ===============================================================

| process.memory_region
| TODO

type: nested



| custom

// ===============================================================

| process.memory_region.allocation_base
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.allocation_protection
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.bytes
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.histogram
| TODO

type: nested



| custom

// ===============================================================

| process.memory_region.histogram.histogram_array
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.histogram.histogram_flavor
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.histogram.histogram_resolution
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.length
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.memory
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.memory_address
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.module_path
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.permission
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.protection
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.region_base
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.region_size
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.region_tag
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.type
| TODO

type: keyword



| custom

// ===============================================================

| process.memory_region.unbacked_on_disk
| TODO

type: boolean



| custom

// ===============================================================

| process.name
| Process name.

Sometimes called program name or similar.

type: keyword

Multi-fields:

* process.name.text (type: text)



example: `ssh`

| extended

// ===============================================================

| process.num_threads
| TODO

type: long



| custom

// ===============================================================

| process.parent.args
| Array of process arguments.

May be filtered to protect sensitive information.

type: keyword

example: `['ssh', '-l', 'user', '10.0.0.16']`

| extended

// ===============================================================

| process.parent.args_count
| Length of the process.args array.

This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

type: long

example: `4`

| extended

// ===============================================================

| process.parent.command_line
| Full command line that started the process, including the absolute path to the executable, and all arguments.

Some arguments may be filtered to protect sensitive information.

type: keyword

Multi-fields:

* process.parent.command_line.text (type: text)



example: `/usr/bin/ssh -l user 10.0.0.16`

| extended

// ===============================================================

| process.parent.executable
| Absolute path to the process executable.

type: keyword

Multi-fields:

* process.parent.executable.text (type: text)



example: `/usr/bin/ssh`

| extended

// ===============================================================

| process.parent.exit_code
| The exit code of the process, if this is a termination event.

The field should be absent if there is no exit code for the event (e.g. process start).

type: long

example: `137`

| extended

// ===============================================================

| process.parent.name
| Process name.

Sometimes called program name or similar.

type: keyword

Multi-fields:

* process.parent.name.text (type: text)



example: `ssh`

| extended

// ===============================================================

| process.parent.pgid
| Identifier of the group of processes the process belongs to.

type: long



| extended

// ===============================================================

| process.parent.pid
| Process id.

type: long

example: `4242`

| core

// ===============================================================

| process.parent.ppid
| Parent process' pid.

type: long

example: `4241`

| extended

// ===============================================================

| process.parent.start
| The time the process started.

type: date

example: `2016-05-23T08:05:34.853Z`

| extended

// ===============================================================

| process.parent.thread.id
| Thread ID.

type: long

example: `4242`

| extended

// ===============================================================

| process.parent.thread.name
| Thread name.

type: keyword

example: `thread-0`

| extended

// ===============================================================

| process.parent.title
| Process title.

The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

type: keyword

Multi-fields:

* process.parent.title.text (type: text)





| extended

// ===============================================================

| process.parent.uptime
| Seconds the process has been up.

type: long

example: `1325`

| extended

// ===============================================================

| process.parent.working_directory
| The working directory of the process.

type: keyword

Multi-fields:

* process.parent.working_directory.text (type: text)



example: `/home/alice`

| extended

// ===============================================================

| process.pe_info.architecture
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.compile_time
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.entry_point_address
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.is_dll
| TODO

type: boolean



| custom

// ===============================================================

| process.pe_info.pe_exports
| TODO

type: nested



| custom

// ===============================================================

| process.pe_info.pe_exports.name
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.pe_exports.ordinal
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.pe_imports
| TODO

type: nested



| custom

// ===============================================================

| process.pe_info.pe_imports.dll_name
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.pe_imports.import_names
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.resources
| TODO

type: nested



| custom

// ===============================================================

| process.pe_info.resources.resource_data.entropy
| TODO

type: double



| custom

// ===============================================================

| process.pe_info.resources.resource_data.size
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.resources.resource_id
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.resources.resource_name
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.resources.resource_type
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.sections
| TODO

type: nested



| custom

// ===============================================================

| process.pe_info.sections.entropy
| TODO

type: double



| custom

// ===============================================================

| process.pe_info.sections.name
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.sections.raw_offset
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.sections.raw_size
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.sections.virtual_address
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.sections.virtual_size
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.signature_signer
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.signature_status
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.version_info
| TODO

type: nested



| custom

// ===============================================================

| process.pe_info.version_info.code_page
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.version_info.key
| TODO

type: keyword



| custom

// ===============================================================

| process.pe_info.version_info.language
| TODO

type: long



| custom

// ===============================================================

| process.pe_info.version_info.value_string
| TODO

type: keyword



| custom

// ===============================================================

| process.pgid
| Identifier of the group of processes the process belongs to.

type: long



| extended

// ===============================================================

| process.phys_memory_bytes
| TODO

type: keyword



| custom

// ===============================================================

| process.pid
| Process id.

type: long

example: `4242`

| core

// ===============================================================

| process.ppid
| Parent process' pid.

type: long

example: `4241`

| extended

// ===============================================================

| process.services
| TODO

type: keyword



| custom

// ===============================================================

| process.session_id
| TODO

type: long



| custom

// ===============================================================

| process.short_name
| TODO

type: keyword



| custom

// ===============================================================

| process.sid
| TODO

type: keyword



| custom

// ===============================================================

| process.signature_signer
| TODO

type: keyword



| custom

// ===============================================================

| process.signature_status
| TODO

type: keyword



| custom

// ===============================================================

| process.start
| The time the process started.

type: date

example: `2016-05-23T08:05:34.853Z`

| extended

// ===============================================================

| process.thread.id
| Thread ID.

type: long

example: `4242`

| extended

// ===============================================================

| process.thread.name
| Thread name.

type: keyword

example: `thread-0`

| extended

// ===============================================================

| process.threads
| TODO

type: nested



| custom

// ===============================================================

| process.threads.entrypoint
| TODO

type: keyword



| custom

// ===============================================================

| process.threads.id
| TODO

type: long



| custom

// ===============================================================

| process.threads.start
| TODO

type: date



| custom

// ===============================================================

| process.threads.uptime
| TODO

type: long



| custom

// ===============================================================

| process.title
| Process title.

The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

type: keyword

Multi-fields:

* process.title.text (type: text)





| extended

// ===============================================================

| process.tty_device_major_number
| TODO

type: integer



| custom

// ===============================================================

| process.tty_device_minor_number
| TODO

type: integer



| custom

// ===============================================================

| process.tty_device_name
| TODO

type: keyword



| custom

// ===============================================================

| process.uid
| TODO

type: long



| custom

// ===============================================================

| process.unbacked_execute_byte_count
| TODO

type: keyword



| custom

// ===============================================================

| process.unbacked_execute_region_count
| TODO

type: keyword



| custom

// ===============================================================

| process.unique_pid
| Unique process id.

type: keyword



| custom

// ===============================================================

| process.unique_ppid
| Unique parent process id.

type: keyword



| custom

// ===============================================================

| process.uptime
| Seconds the process has been up.

type: long

example: `1325`

| extended

// ===============================================================

| process.user
| TODO

type: keyword



| custom

// ===============================================================

| process.virt_memory_bytes
| TODO

type: keyword



| custom

// ===============================================================

| process.working_directory
| The working directory of the process.

type: keyword

Multi-fields:

* process.working_directory.text (type: text)



example: `/home/alice`

| extended

// ===============================================================

|=====

==== Field Reuse

The `process` fields are expected to be nested at: `target.process`.

Note also that the `process` fields may be used directly at the top level.




[[ecs-rule]]
=== Rule Fields

Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events.

Examples of data sources that would populate the rule fields include: network admission control platforms, network or host IDS/IPS, network firewalls, web application firewalls, url filters, endpoint detection and response (EDR) systems, etc.

==== Rule Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| rule.category
| A categorization value keyword used by the entity using the rule for detection of this event.

type: keyword

example: `Attempted Information Leak`

| extended

// ===============================================================

| rule.description
| The description of the rule generating the event.

type: keyword

example: `Block requests to public DNS over HTTPS / TLS protocols`

| extended

// ===============================================================

| rule.id
| A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.

type: keyword

example: `101`

| extended

// ===============================================================

| rule.name
| The name of the rule or signature generating the event.

type: keyword

example: `BLOCK_DNS_over_TLS`

| extended

// ===============================================================

| rule.reference
| Reference URL to additional information about the rule used to generate this event.

The URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.

type: keyword

example: `https://en.wikipedia.org/wiki/DNS_over_TLS`

| extended

// ===============================================================

| rule.ruleset
| Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.

type: keyword

example: `Standard_Protocol_Filters`

| extended

// ===============================================================

| rule.uuid
| A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.

type: keyword

example: `1100110011`

| extended

// ===============================================================

| rule.version
| The version / revision of the rule being used for analysis.

type: keyword

example: `1.1`

| extended

// ===============================================================

|=====

[[ecs-target]]
=== Target Fields

These fields contain information about a target.

These fields provide more context about the target process and thread that are related to the data in the document. Useful in a security context where a target process or thread may be acted on by another process or thread.

==== Target Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|=====

==== Field Reuse




[[ecs-target-nestings]]
===== Field sets that can be nested under Target

[options="header"]
|=====
| Nested fields | Description

// ===============================================================


| <<ecs-process,target.process.*>>
| These fields contain information about a process.

// ===============================================================


| <<ecs-thread,target.thread.*>>
| These fields contain information about a thread.

// ===============================================================


|=====

[[ecs-thread]]
=== Thread Fields

These fields contain information about a thread.

These fields provide more context about the relevant thread related to the data in the document.

==== Thread Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| thread.call_stack
| TODO

type: nested



| custom

// ===============================================================

| thread.id
| Thread id.

type: long

example: `3147`

| core

// ===============================================================

| thread.name
| Thread name.

type: keyword

example: `thread-0`

| extended

// ===============================================================

| thread.service_name
| Service associated with the thread.

type: keyword

example: `VaultSvc`

| extended

// ===============================================================

| thread.start
| The time the thread started.

type: date

example: `2016-05-23T08:05:34.853Z`

| extended

// ===============================================================

| thread.start_address
| Memory address where the thread started.

type: keyword

example: `5442508`

| extended

// ===============================================================

| thread.start_address_module
| TODO

type: keyword

example: `C:\Program Files\VMware\VMware Tools\vmtoolsd.exe`

| extended

// ===============================================================

|=====

==== Field Reuse

The `thread` fields are expected to be nested at: `target.thread`.

Note also that the `thread` fields may be used directly at the top level.




[[ecs-threat]]
=== Threat Fields

Fields to classify events and alerts according to a threat taxonomy such as the Mitre ATT&CK framework.

These fields are for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture the high level category of the threat (e.g. "impact"). The threat.technique.* fields are meant to capture which kind of approach is used by this detected threat, to accomplish the goal (e.g. "endpoint denial of service").

==== Threat Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

| threat.framework
| Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.

type: keyword

example: `MITRE ATT&CK`

| extended

// ===============================================================

| threat.tactic.id
| The id of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: `TA0040`

| extended

// ===============================================================

| threat.tactic.name
| Name of the type of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: `impact`

| extended

// ===============================================================

| threat.tactic.reference
| The reference url of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: `https://attack.mitre.org/tactics/TA0040/`

| extended

// ===============================================================

| threat.technique.id
| The id of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

example: `T1499`

| extended

// ===============================================================

| threat.technique.name
| The name of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

Multi-fields:

* threat.technique.name.text (type: text)



example: `endpoint denial of service`

| extended

// ===============================================================

| threat.technique.reference
| The reference url of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

example: `https://attack.mitre.org/techniques/T1499/`

| extended

// ===============================================================

|=====
