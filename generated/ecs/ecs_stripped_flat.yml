'@timestamp':
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  type: date
agent.ephemeral_id:
  description: 'Ephemeral identifier of this agent (if one exists).

    This id normally changes across restarts, but `agent.id` does not.'
  example: 8a4f500f
  type: keyword
agent.id:
  description: 'Unique identifier of this agent (if one exists).

    Example: For Beats this would be beat.id.'
  example: 8a4f500d
  type: keyword
agent.name:
  description: 'Custom name of the agent.

    This is a name that can be given to an agent. This can be helpful if for example
    two Filebeat instances are running on the same host but a human readable separation
    is needed on which Filebeat instance data is coming from.

    If no name is given, the name is often left empty.'
  example: foo
  type: keyword
agent.type:
  description: 'Type of the agent.

    The agent type stays always the same and should be given by the agent used. In
    case of Filebeat the agent would always be Filebeat also if two Filebeat instances
    are run on the same machine.'
  example: filebeat
  type: keyword
agent.version:
  description: Version of the agent.
  example: 6.0.0-rc2
  type: keyword
as.number:
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  type: long
as.organization.name:
  description: Organization name.
  example: Google LLC
  type: keyword
authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
authenticode.more_info_link:
  description: TODO
  type: keyword
authenticode.program_name:
  description: TODO
  type: keyword
authenticode.publisher_link:
  description: TODO
  type: keyword
call_stack:
  description: TODO
  type: nested
call_stack.instruction_pointer:
  description: TODO
  type: keyword
call_stack.memory_section.memory_address:
  description: TODO
  type: keyword
call_stack.memory_section.memory_size:
  description: TODO
  type: keyword
call_stack.memory_section.protection:
  description: TODO
  type: keyword
call_stack.module_path:
  description: TODO
  type: keyword
call_stack.rva:
  description: TODO
  type: keyword
call_stack.symbol_info:
  description: TODO
  type: keyword
client.address:
  description: 'Some event client addresses are defined ambiguously. The event will
    sometimes list an IP, a domain or a unix socket.  You should always store the
    raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  type: keyword
client.as.number:
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  type: long
client.as.organization.name:
  description: Organization name.
  example: Google LLC
  type: keyword
client.bytes:
  description: Bytes sent from the client to the server.
  example: 184
  type: long
client.domain:
  description: Client domain.
  type: keyword
client.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
client.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
client.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
client.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
client.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
client.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
client.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
client.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
client.ip:
  description: 'IP address of the client.

    Can be one or multiple IPv4 or IPv6 addresses.'
  type: ip
client.mac:
  description: MAC address of the client.
  type: keyword
client.nat.ip:
  description: 'Translated IP of source based NAT sessions (e.g. internal client to
    internet).

    Typically connections traversing load balancers, firewalls, or routers.'
  type: ip
client.nat.port:
  description: 'Translated port of source based NAT sessions (e.g. internal client
    to internet).

    Typically connections traversing load balancers, firewalls, or routers.'
  type: long
client.packets:
  description: Packets sent from the client to the server.
  example: 12
  type: long
client.port:
  description: Port of the client.
  type: long
client.registered_domain:
  description: 'The highest registered client domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
client.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
client.user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
client.user.email:
  description: User email address.
  type: keyword
client.user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
client.user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
client.user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
client.user.group.name:
  description: Name of the group.
  type: keyword
client.user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
client.user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
client.user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
cloud.account.id:
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  type: keyword
cloud.availability_zone:
  description: Availability zone in which this host is running.
  example: us-east-1c
  type: keyword
cloud.instance.id:
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  type: keyword
cloud.instance.name:
  description: Instance name of the host machine.
  type: keyword
cloud.machine.type:
  description: Machine type of the host machine.
  example: t2.medium
  type: keyword
cloud.provider:
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  type: keyword
cloud.region:
  description: Region in which this host is running.
  example: us-east-1
  type: keyword
container.id:
  description: Unique container id.
  type: keyword
container.image.name:
  description: Name of the image the container was built on.
  type: keyword
container.image.tag:
  description: Container image tag.
  type: keyword
container.labels:
  description: Image labels.
  type: object
container.name:
  description: Container name.
  type: keyword
container.runtime:
  description: Runtime managing this container.
  example: docker
  type: keyword
destination.address:
  description: 'Some event destination addresses are defined ambiguously. The event
    will sometimes list an IP, a domain or a unix socket.  You should always store
    the raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  type: keyword
destination.as.number:
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  type: long
destination.as.organization.name:
  description: Organization name.
  example: Google LLC
  type: keyword
destination.bytes:
  description: Bytes sent from the destination to the source.
  example: 184
  type: long
destination.domain:
  description: Destination domain.
  type: keyword
destination.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
destination.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
destination.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
destination.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
destination.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
destination.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
destination.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
destination.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
destination.ip:
  description: 'IP address of the destination.

    Can be one or multiple IPv4 or IPv6 addresses.'
  type: ip
destination.mac:
  description: MAC address of the destination.
  type: keyword
destination.nat.ip:
  description: 'Translated ip of destination based NAT sessions (e.g. internet to
    private DMZ)

    Typically used with load balancers, firewalls, or routers.'
  type: ip
destination.nat.port:
  description: 'Port the source session is translated to by NAT Device.

    Typically used with load balancers, firewalls, or routers.'
  type: long
destination.packets:
  description: Packets sent from the destination to the source.
  example: 12
  type: long
destination.port:
  description: Port of the destination.
  type: long
destination.registered_domain:
  description: 'The highest registered destination domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
destination.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
destination.user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
destination.user.email:
  description: User email address.
  type: keyword
destination.user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
destination.user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
destination.user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
destination.user.group.name:
  description: Name of the group.
  type: keyword
destination.user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
destination.user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
destination.user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
dns.answers:
  description: 'An array containing an object for each answer section returned by
    the server.

    The main keys that should be present in these objects are defined by ECS. Records
    that have more information may contain more keys than what ECS defines.

    Not all DNS data sources give all details about DNS answers. At minimum, answer
    objects must contain the `data` key. If more information is available, map as
    much of it to ECS as possible, and add any additional fields to the answer objects
    as custom fields.'
  type: object
dns.answers.class:
  description: The class of DNS data contained in this resource record.
  example: IN
  type: keyword
dns.answers.data:
  description: 'The data describing the resource.

    The meaning of this data depends on the type and class of the resource record.'
  example: 10.10.10.10
  type: keyword
dns.answers.name:
  description: 'The domain name to which this resource record pertains.

    If a chain of CNAME is being resolved, each answer''s `name` should be the one
    that corresponds with the answer''s `data`. It should not simply be the original
    `question.name` repeated.'
  example: www.google.com
  type: keyword
dns.answers.ttl:
  description: The time interval in seconds that this resource record may be cached
    before it should be discarded. Zero values mean that the data should not be cached.
  example: 180
  type: long
dns.answers.type:
  description: The type of data contained in this resource record.
  example: CNAME
  type: keyword
dns.header_flags:
  description: 'Array of 2 letter DNS header flags.

    Expected values are: AA, TC, RD, RA, AD, CD, DO.'
  example:
  - RD
  - RA
  type: keyword
dns.id:
  description: The DNS packet identifier assigned by the program that generated the
    query. The identifier is copied to the response.
  example: 62111
  type: keyword
dns.op_code:
  description: The DNS operation code that specifies the kind of query in the message.
    This value is set by the originator of a query and copied into the response.
  example: QUERY
  type: keyword
dns.question.class:
  description: The class of records being queried.
  example: IN
  type: keyword
dns.question.name:
  description: 'The name being queried.

    If the name field contains non-printable characters (below 32 or above 126), those
    characters should be represented as escaped base 10 integers (\DDD). Back slashes
    and quotes should be escaped. Tabs, carriage returns, and line feeds should be
    converted to \t, \r, and \n respectively.'
  example: www.google.com
  type: keyword
dns.question.registered_domain:
  description: 'The highest registered domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
dns.question.subdomain:
  description: 'The subdomain is all of the labels under the registered_domain.

    If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
    the subdomain field should contain "sub2.sub1", with no trailing period.'
  example: www
  type: keyword
dns.question.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
dns.question.type:
  description: The type of record being queried.
  example: AAAA
  type: keyword
dns.resolved_ip:
  description: 'Array containing all IPs seen in `answers.data`.

    The `answers` array can be difficult to use, because of the variety of data formats
    it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
    makes it possible to index them as IP addresses, and makes them easier to visualize
    and query for.'
  example:
  - 10.10.10.10
  - 10.10.10.11
  type: ip
dns.response_code:
  description: The DNS response code.
  example: NOERROR
  type: keyword
dns.type:
  description: 'The type of DNS event captured, query or answer.

    If your source of DNS events only gives you DNS queries, you should only create
    dns events of type `dns.type:query`.

    If your source of DNS events gives you answers as well, you should create one
    event per query (optionally as soon as the query is seen). And a second event
    containing all query details as well as an array of answers.'
  example: answer
  type: keyword
ecs.version:
  description: 'ECS version this event conforms to. `ecs.version` is a required field
    and must exist in all events.

    When querying across multiple indices -- which may conform to slightly different
    ECS versions -- this field lets integrations adjust to the schema version of the
    events.'
  example: 1.0.0
  type: keyword
error.code:
  description: Error code describing the error.
  type: keyword
error.id:
  description: Unique identifier for the error.
  type: keyword
error.message:
  description: Error message.
  type: text
error.stack_trace:
  description: The stack trace of this error in plain text.
  type: keyword
error.type:
  description: The type of the error, for example the class name of the exception.
  example: java.lang.NullPointerException
  type: keyword
event.action:
  description: 'The action captured by the event.

    This describes the information in the event. It is more specific than `event.category`.
    Examples are `group-add`, `process-started`, `file-created`. The value is normally
    defined by the implementer.'
  example: user-password-change
  type: keyword
event.category:
  description: 'This is one of four ECS Categorization Fields, and indicates the second
    level in the ECS category hierarchy.

    `event.category` represents the "big buckets" of ECS categories. For example,
    filtering on `event.category:process` yields all events relating to process activity.
    This field is closely related to `event.type`, which is used as a subcategory.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple categories.'
  example: authentication
  type: keyword
event.code:
  description: 'Identification code for this event, if one exists.

    Some event sources use event codes to identify messages unambiguously, regardless
    of message language or wording adjustments over time. An example of this is the
    Windows Event ID.'
  example: 4648
  type: keyword
event.created:
  description: 'event.created contains the date/time when the event was first read
    by an agent, or by your pipeline.

    This field is distinct from @timestamp in that @timestamp typically contain the
    time extracted from the original event.

    In most situations, these two timestamps will be slightly different. The difference
    can be used to calculate the delay between your source generating an event, and
    the time when your agent first processed it. This can be used to monitor your
    agent''s or pipeline''s ability to keep up with your event source.

    In case the two timestamps are identical, @timestamp should be used.'
  example: '2016-05-23T08:05:34.857Z'
  type: date
event.dataset:
  description: 'Name of the dataset.

    If an event source publishes more than one type of log or events (e.g. access
    log, error log), the dataset is used to specify which one the event comes from.

    It''s recommended but not required to start the dataset name with the module name,
    followed by a dot, then the dataset name.'
  example: apache.access
  type: keyword
event.duration:
  description: 'Duration of the event in nanoseconds.

    If event.start and event.end are known this value should be the difference between
    the end and start time.'
  type: long
event.end:
  description: event.end contains the date when the event ended or when the activity
    was last observed.
  type: date
event.hash:
  description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
    log integrity.
  example: 123456789012345678901234567890ABCD
  type: keyword
event.id:
  description: Unique ID to describe the event.
  example: 8a4f500d
  type: keyword
event.ingested:
  description: 'Timestamp when an event arrived in the central data store.

    This is different from `@timestamp`, which is when the event originally occurred.  It''s
    also different from `event.created`, which is meant to capture the first time
    an agent saw the event.

    In normal conditions, assuming no tampering, the timestamps should chronologically
    look like this: `@timestamp` < `event.created` < `event.ingested`.'
  example: '2016-05-23T08:05:35.101Z'
  type: date
event.kind:
  description: 'This is one of four ECS Categorization Fields, and indicates the highest
    level in the ECS category hierarchy.

    `event.kind` gives high-level information about what type of information the event
    contains, without being specific to the contents of the event. For example, values
    of this field distinguish alert events from metric events.

    The value of this field can be used to inform how these kinds of events should
    be handled. They may warrant different retention, different access control, it
    may also help understand whether the data coming in at a regular interval or not.'
  example: alert
  type: keyword
event.module:
  description: 'Name of the module this data is coming from.

    If your monitoring agent supports the concept of modules or plugins to process
    events of a given source (e.g. Apache logs), `event.module` should contain the
    name of this module.'
  example: apache
  type: keyword
event.original:
  description: 'Raw text message of entire event. Used to demonstrate log integrity.

    This field is not indexed and doc_values are disabled. It cannot be searched,
    but it can be retrieved from `_source`.'
  example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;
    worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
  type: keyword
event.outcome:
  description: 'This is one of four ECS Categorization Fields, and indicates the lowest
    level in the ECS category hierarchy.

    `event.outcome` simply denotes whether the event represent a success or a failure.
    Note that not all events will have an associated outcome. For example, this field
    is generally not populated for metric events or events with `event.type:info`.'
  example: success
  type: keyword
event.provider:
  description: 'Source of the event.

    Event transports such as Syslog or the Windows Event Log typically mention the
    source of an event. It can be the name of the software that generated the event
    (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).'
  example: kernel
  type: keyword
event.risk_score:
  description: Risk score or priority of the event (e.g. security solutions). Use
    your system's original value here.
  type: float
event.risk_score_norm:
  description: 'Normalized risk score or priority of the event, on a scale of 0 to
    100.

    This is mainly useful if you use more than one system that assigns risk scores,
    and you want to see a normalized value across all systems.'
  type: float
event.sequence:
  description: 'Sequence number of the event.

    The sequence number is a value published by some event sources, to make the exact
    ordering of events unambiguous, regardless of the timestamp precision.'
  type: long
event.severity:
  description: 'The numeric severity of the event according to your event source.

    What the different severity values mean can be different between sources and use
    cases. It''s up to the implementer to make sure severities are consistent across
    events from the same source.

    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is
    meant to represent the severity according to the event source (e.g. firewall,
    IDS). If the event source does not publish its own severity, you may optionally
    copy the `log.syslog.severity.code` to `event.severity`.'
  example: 7
  type: long
event.start:
  description: event.start contains the date when the event started or when the activity
    was first observed.
  type: date
event.timezone:
  description: 'This field should be populated when the event''s timestamp does not
    include timezone information already (e.g. default Syslog timestamps). It''s optional
    otherwise.

    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated
    (e.g. "EST") or an HH:mm differential (e.g. "-05:00").'
  type: keyword
event.type:
  description: 'This is one of four ECS Categorization Fields, and indicates the third
    level in the ECS category hierarchy.

    `event.type` represents a categorization "sub-bucket" that, when used along with
    the `event.category` field values, enables filtering events down to a level appropriate
    for single visualization.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple event types.'
  type: keyword
file.accessed:
  description: 'Last time the file was accessed.

    Note that not all filesystems keep track of access time.'
  type: date
file.attributes:
  description: 'Array of file attributes.

    Attributes names will vary by platform. Here''s a non-exhaustive list of values
    that are expected in this field: archive, compressed, directory, encrypted, execute,
    hidden, read, readonly, system, write.'
  example: '["readonly", "system"]'
  type: keyword
file.created:
  description: 'File creation time.

    Note that not all filesystems store the creation time.'
  type: date
file.ctime:
  description: 'Last time the file attributes or metadata changed.

    Note that changes to the file content will update `mtime`. This implies `ctime`
    will be adjusted at the same time, since `mtime` is an attribute of the file.'
  type: date
file.device:
  description: Device that is the source of the file.
  example: sda
  type: keyword
file.directory:
  description: Directory where the file is located. It should include the drive letter,
    when appropriate.
  example: /home/alice
  type: keyword
file.drive_letter:
  description: 'Drive letter where the file is located. This field is only relevant
    on Windows.

    The value should be uppercase, and not include the colon.'
  example: C
  type: keyword
file.extension:
  description: File extension.
  example: png
  type: keyword
file.gid:
  description: Primary group ID (GID) of the file.
  example: '1001'
  type: keyword
file.group:
  description: Primary group name of the file.
  example: alice
  type: keyword
file.hash.imphash:
  description: Imphash.
  type: keyword
file.hash.md5:
  description: MD5 hash.
  type: keyword
file.hash.sha1:
  description: SHA1 hash.
  type: keyword
file.hash.sha256:
  description: SHA256 hash.
  type: keyword
file.hash.sha512:
  description: SHA512 hash.
  type: keyword
file.inode:
  description: Inode representing the file in the filesystem.
  example: '256383'
  type: keyword
file.mode:
  description: Mode of the file in octal representation.
  example: '0640'
  type: keyword
file.mtime:
  description: Last time the file content was modified.
  type: date
file.name:
  description: Name of the file including the extension, without the directory.
  example: example.png
  type: keyword
file.owner:
  description: File owner's username.
  example: alice
  type: keyword
file.path:
  description: Full path to the file, including the file name. It should include the
    drive letter, when appropriate.
  example: /home/alice/example.png
  type: keyword
file.size:
  description: 'File size in bytes.

    Only relevant when `file.type` is "file".'
  example: 16384
  type: long
file.target_path:
  description: Target path for symlinks.
  type: keyword
file.type:
  description: File type (file, dir, or symlink).
  example: file
  type: keyword
file.uid:
  description: The user ID (UID) or security identifier (SID) of the file owner.
  example: '1001'
  type: keyword
file_classification.captured_file:
  description: TODO
  type: boolean
file_classification.entry_modified:
  description: TODO
  type: double
file_classification.is_signature_trusted:
  description: TODO
  type: boolean
file_classification.macro_details.code_page:
  description: TODO
  type: long
file_classification.macro_details.errors:
  description: TODO
  type: nested
file_classification.macro_details.errors.count:
  description: TODO
  type: long
file_classification.macro_details.errors.error_type:
  description: TODO
  type: keyword
file_classification.macro_details.file_extension:
  description: TODO
  type: long
file_classification.macro_details.macro_collection_hashes.imphash:
  description: TODO
  type: keyword
file_classification.macro_details.macro_collection_hashes.md5:
  description: TODO
  type: keyword
file_classification.macro_details.macro_collection_hashes.sha1:
  description: TODO
  type: keyword
file_classification.macro_details.macro_collection_hashes.sha256:
  description: TODO
  type: keyword
file_classification.macro_details.project_file_hashes.imphash:
  description: TODO
  type: keyword
file_classification.macro_details.project_file_hashes.md5:
  description: TODO
  type: keyword
file_classification.macro_details.project_file_hashes.sha1:
  description: TODO
  type: keyword
file_classification.macro_details.project_file_hashes.sha256:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data:
  description: TODO
  type: nested
file_classification.macro_details.stream_data.imphash:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.md5:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.name:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.raw_code:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.raw_code_size:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.sha1:
  description: TODO
  type: keyword
file_classification.macro_details.stream_data.sha256:
  description: TODO
  type: keyword
file_classification.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
file_classification.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
file_classification.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
file_classification.malware_classification.identifier:
  description: TODO
  type: keyword
file_classification.malware_classification.prevention_threshold:
  description: TODO
  type: double
file_classification.malware_classification.score:
  description: TODO
  type: double
file_classification.malware_classification.threshold:
  description: TODO
  type: double
file_classification.malware_classification.upx_packed:
  description: TODO
  type: boolean
file_classification.malware_classification.version:
  description: TODO
  type: keyword
file_classification.quarantine_result.alert_correlation_id:
  description: TODO
  type: keyword
file_classification.quarantine_result.quarantine_path:
  description: TODO
  type: keyword
file_classification.signature_signer:
  description: TODO
  type: keyword
file_classification.temp_file_path:
  description: TODO
  type: keyword
file_classification.user_blacklisted:
  description: TODO
  type: boolean
file_classification.yara_hits:
  description: TODO
  type: nested
file_classification.yara_hits.identifier:
  description: TODO
  type: keyword
file_classification.yara_hits.matched_data:
  description: TODO
  type: keyword
file_classification.yara_hits.rule_name:
  description: TODO
  type: keyword
file_classification.yara_hits.version:
  description: TODO
  type: keyword
geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
group.name:
  description: Name of the group.
  type: keyword
hash.imphash:
  description: Imphash.
  type: keyword
hash.md5:
  description: MD5 hash.
  type: keyword
hash.sha1:
  description: SHA1 hash.
  type: keyword
hash.sha256:
  description: SHA256 hash.
  type: keyword
hash.sha512:
  description: SHA512 hash.
  type: keyword
host.architecture:
  description: Operating system architecture.
  example: x86_64
  type: keyword
host.domain:
  description: 'Name of the domain of which the host is a member.

    For example, on Windows this could be the host''s Active Directory domain or NetBIOS
    domain name. For Linux this could be the domain of the host''s LDAP provider.'
  example: CONTOSO
  type: keyword
host.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
host.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
host.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
host.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
host.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
host.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
host.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
host.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
host.hostname:
  description: 'Hostname of the host.

    It normally contains what the `hostname` command returns on the host machine.'
  type: keyword
host.id:
  description: 'Unique host id.

    As hostname is not always unique, use values that are meaningful in your environment.

    Example: The current usage of `beat.name`.'
  type: keyword
host.ip:
  description: Host ip address.
  type: ip
host.mac:
  description: Host mac address.
  type: keyword
host.name:
  description: 'Name of the host.

    It can contain what `hostname` returns on Unix systems, the fully qualified domain
    name, or a name specified by the user. The sender decides which value to use.'
  type: keyword
host.os.family:
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  type: keyword
host.os.full:
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  type: keyword
host.os.kernel:
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  type: keyword
host.os.name:
  description: Operating system name, without the version.
  example: Mac OS X
  type: keyword
host.os.platform:
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  type: keyword
host.os.version:
  description: Operating system version as a raw string.
  example: 10.14.1
  type: keyword
host.type:
  description: 'Type of host.

    For Cloud providers this can be the machine type like `t2.medium`. If vm, this
    could be the container, for example, or other information meaningful in your environment.'
  type: keyword
host.uptime:
  description: Seconds the host has been up.
  example: 1325
  type: long
host.user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
host.user.email:
  description: User email address.
  type: keyword
host.user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
host.user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
host.user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
host.user.group.name:
  description: Name of the group.
  type: keyword
host.user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
host.user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
host.user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
http.request.body.bytes:
  description: Size in bytes of the request body.
  example: 887
  type: long
http.request.body.content:
  description: The full HTTP request body.
  example: Hello world
  type: keyword
http.request.bytes:
  description: Total size in bytes of the request (body and headers).
  example: 1437
  type: long
http.request.method:
  description: 'HTTP request method.

    The field value must be normalized to lowercase for querying. See the documentation
    section "Implementing ECS".'
  example: get, post, put
  type: keyword
http.request.referrer:
  description: Referrer for this HTTP request.
  example: https://blog.example.com/
  type: keyword
http.response.body.bytes:
  description: Size in bytes of the response body.
  example: 887
  type: long
http.response.body.content:
  description: The full HTTP response body.
  example: Hello world
  type: keyword
http.response.bytes:
  description: Total size in bytes of the response (body and headers).
  example: 1437
  type: long
http.response.status_code:
  description: HTTP response status code.
  example: 404
  type: long
http.version:
  description: HTTP version.
  example: 1.1
  type: keyword
labels:
  description: 'Custom key/value pairs.

    Can be used to add meta information to events. Should not contain nested objects.
    All values are stored as keyword.

    Example: `docker` and `k8s` labels.'
  example:
    application: foo-bar
    env: production
  type: object
log.level:
  description: 'Original log level of the log event.

    If the source of the event provides a log level or textual severity, this is the
    one that goes in `log.level`. If your source doesn''t specify one, you may put
    your event transport''s severity here (e.g. Syslog severity).

    Some examples are `warn`, `err`, `i`, `informational`.'
  example: error
  type: keyword
log.logger:
  description: The name of the logger inside an application. This is usually the name
    of the class which initialized the logger, or can be a custom name.
  example: org.elasticsearch.bootstrap.Bootstrap
  type: keyword
log.origin.file.line:
  description: The line number of the file containing the source code which originated
    the log event.
  example: 42
  type: integer
log.origin.file.name:
  description: The name of the file containing the source code which originated the
    log event. Note that this is not the name of the log file.
  example: Bootstrap.java
  type: keyword
log.origin.function:
  description: The name of the function or method which originated the log event.
  example: init
  type: keyword
log.original:
  description: 'This is the original log message and contains the full log message
    before splitting it up in multiple parts.

    In contrast to the `message` field which can contain an extracted part of the
    log message, this field contains the original, full log message. It can have already
    some modifications applied like encoding or new lines removed to clean up the
    log message.

    This field is not indexed and doc_values are disabled so it can''t be queried
    but the value can be retrieved from `_source`.'
  example: Sep 19 08:26:10 localhost My log
  type: keyword
log.syslog:
  description: The Syslog metadata of the event, if the event was transmitted via
    Syslog. Please see RFCs 5424 or 3164.
  type: object
log.syslog.facility.code:
  description: 'The Syslog numeric facility of the log event, if available.

    According to RFCs 5424 and 3164, this value should be an integer between 0 and
    23.'
  example: 23
  type: long
log.syslog.facility.name:
  description: The Syslog text-based facility of the log event, if available.
  example: local7
  type: keyword
log.syslog.priority:
  description: 'Syslog numeric priority of the event, if available.

    According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This
    number is therefore expected to contain a value between 0 and 191.'
  example: 135
  type: long
log.syslog.severity.code:
  description: 'The Syslog numeric severity of the log event, if available.

    If the event source publishing via Syslog provides a different numeric severity
    value (e.g. firewall, IDS), your source''s numeric severity should go to `event.severity`.
    If the event source does not specify a distinct severity, you can optionally copy
    the Syslog severity to `event.severity`.'
  example: 3
  type: long
log.syslog.severity.name:
  description: 'The Syslog numeric severity of the log event, if available.

    If the event source publishing via Syslog provides a different severity value
    (e.g. firewall, IDS), your source''s text severity should go to `log.level`. If
    the event source does not specify a distinct severity, you can optionally copy
    the Syslog severity to `log.level`.'
  example: Error
  type: keyword
malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
malware_classification.identifier:
  description: TODO
  type: keyword
malware_classification.prevention_threshold:
  description: TODO
  type: double
malware_classification.score:
  description: TODO
  type: double
malware_classification.threshold:
  description: TODO
  type: double
malware_classification.upx_packed:
  description: TODO
  type: boolean
malware_classification.version:
  description: TODO
  type: keyword
message:
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
  type: text
modules:
  description: These fields contain information about a list of modules.
  type: nested
modules.architecture:
  description: TODO
  type: keyword
modules.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
modules.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
modules.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
modules.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
modules.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
modules.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
modules.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
modules.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
modules.authenticode.more_info_link:
  description: TODO
  type: keyword
modules.authenticode.program_name:
  description: TODO
  type: keyword
modules.authenticode.publisher_link:
  description: TODO
  type: keyword
modules.compile_time:
  description: TODO
  type: date
modules.hash.imphash:
  description: TODO
  type: keyword
modules.hash.md5:
  description: TODO
  type: keyword
modules.hash.sha1:
  description: TODO
  type: keyword
modules.hash.sha256:
  description: TODO
  type: keyword
modules.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
modules.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
modules.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
modules.malware_classification.identifier:
  description: TODO
  type: keyword
modules.malware_classification.prevention_threshold:
  description: TODO
  type: double
modules.malware_classification.score:
  description: TODO
  type: double
modules.malware_classification.threshold:
  description: TODO
  type: double
modules.malware_classification.upx_packed:
  description: TODO
  type: boolean
modules.malware_classification.version:
  description: TODO
  type: keyword
modules.mapped_address:
  description: TODO
  type: keyword
modules.mapped_size:
  description: TODO
  type: long
modules.path:
  description: TODO
  type: keyword
modules.pe_exports:
  description: TODO
  type: nested
modules.pe_exports.name:
  description: TODO
  type: keyword
modules.pe_exports.ordinal:
  description: TODO
  type: long
modules.pe_imports:
  description: TODO
  type: nested
modules.pe_imports.dll_name:
  description: TODO
  type: keyword
modules.pe_imports.import_names:
  description: TODO
  type: keyword
modules.signature_signer:
  description: TODO
  type: keyword
modules.signature_status:
  description: TODO
  type: keyword
network.application:
  description: 'A name given to an application level protocol. This can be arbitrarily
    assigned for things like microservices, but also apply to things like skype, icq,
    facebook, twitter. This would be used in situations where the vendor or service
    can be decoded such as from the source/dest IP owners, ports, or wire format.

    The field value must be normalized to lowercase for querying. See the documentation
    section "Implementing ECS".'
  example: aim
  type: keyword
network.bytes:
  description: 'Total bytes transferred in both directions.

    If `source.bytes` and `destination.bytes` are known, `network.bytes` is their
    sum.'
  example: 368
  type: long
network.community_id:
  description: 'A hash of source and destination IPs and ports, as well as the protocol
    used in a communication. This is a tool-agnostic standard to identify flows.

    Learn more at https://github.com/corelight/community-id-spec.'
  example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=
  type: keyword
network.direction:
  description: "Direction of the network traffic.\nRecommended values are:\n  * inbound\n\
    \  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping events\
    \ from a host-based monitoring context, populate this field from the host's point\
    \ of view.\nWhen mapping events from a network or perimeter-based monitoring context,\
    \ populate this field from the point of view of your network perimeter."
  example: inbound
  type: keyword
network.forwarded_ip:
  description: Host IP address when the source IP address is the proxy.
  example: 192.1.1.2
  type: ip
network.iana_number:
  description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
    Standardized list of protocols. This aligns well with NetFlow and sFlow related
    logs which use the IANA Protocol Number.
  example: 6
  type: keyword
network.name:
  description: Name given by operators to sections of their network.
  example: Guest Wifi
  type: keyword
network.packets:
  description: 'Total packets transferred in both directions.

    If `source.packets` and `destination.packets` are known, `network.packets` is
    their sum.'
  example: 24
  type: long
network.protocol:
  description: 'L7 Network protocol name. ex. http, lumberjack, transport protocol.

    The field value must be normalized to lowercase for querying. See the documentation
    section "Implementing ECS".'
  example: http
  type: keyword
network.transport:
  description: 'Same as network.iana_number, but instead using the Keyword name of
    the transport layer (udp, tcp, ipv6-icmp, etc.)

    The field value must be normalized to lowercase for querying. See the documentation
    section "Implementing ECS".'
  example: tcp
  type: keyword
network.type:
  description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,
    pim, etc

    The field value must be normalized to lowercase for querying. See the documentation
    section "Implementing ECS".'
  example: ipv4
  type: keyword
observer.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
observer.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
observer.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
observer.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
observer.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
observer.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
observer.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
observer.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
observer.hostname:
  description: Hostname of the observer.
  type: keyword
observer.ip:
  description: IP address of the observer.
  type: ip
observer.mac:
  description: MAC address of the observer
  type: keyword
observer.name:
  description: 'Custom name of the observer.

    This is a name that can be given to an observer. This can be helpful for example
    if multiple firewalls of the same model are used in an organization.

    If no custom name is needed, the field can be left empty.'
  example: 1_proxySG
  type: keyword
observer.os.family:
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  type: keyword
observer.os.full:
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  type: keyword
observer.os.kernel:
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  type: keyword
observer.os.name:
  description: Operating system name, without the version.
  example: Mac OS X
  type: keyword
observer.os.platform:
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  type: keyword
observer.os.version:
  description: Operating system version as a raw string.
  example: 10.14.1
  type: keyword
observer.product:
  description: The product name of the observer.
  example: s200
  type: keyword
observer.serial_number:
  description: Observer serial number.
  type: keyword
observer.type:
  description: 'The type of the observer the data is coming from.

    There is no predefined list of observer types. Some examples are `forwarder`,
    `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.'
  example: firewall
  type: keyword
observer.vendor:
  description: Vendor name of the observer.
  example: Symantec
  type: keyword
observer.version:
  description: Observer version.
  type: keyword
organization.id:
  description: Unique identifier for the organization.
  type: keyword
organization.name:
  description: Organization name.
  type: keyword
os.family:
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  type: keyword
os.full:
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  type: keyword
os.kernel:
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  type: keyword
os.name:
  description: Operating system name, without the version.
  example: Mac OS X
  type: keyword
os.platform:
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  type: keyword
os.version:
  description: Operating system version as a raw string.
  example: 10.14.1
  type: keyword
package.architecture:
  description: Package architecture.
  example: x86_64
  type: keyword
package.build_version:
  description: 'Additional information about the build version of the installed package.

    For example use the commit SHA of a non-released package.'
  example: 36f4f7e89dd61b0988b12ee000b98966867710cd
  type: keyword
package.checksum:
  description: Checksum of the installed package for verification.
  example: 68b329da9893e34099c7d8ad5cb9c940
  type: keyword
package.description:
  description: Description of the package.
  example: Open source programming language to build simple/reliable/efficient software.
  type: keyword
package.install_scope:
  description: Indicating how the package was installed, e.g. user-local, global.
  example: global
  type: keyword
package.installed:
  description: Time when package was installed.
  type: date
package.license:
  description: 'License under which the package was released.

    Use a short name, e.g. the license identifier from SPDX License List where possible
    (https://spdx.org/licenses/).'
  example: Apache License 2.0
  type: keyword
package.name:
  description: Package name
  example: go
  type: keyword
package.path:
  description: Path where the package is installed.
  example: /usr/local/Cellar/go/1.12.9/
  type: keyword
package.reference:
  description: Home page or reference URL of the software in this package, if available.
  example: https://golang.org
  type: keyword
package.size:
  description: Package size in bytes.
  example: 62231
  type: long
package.type:
  description: 'Type of package.

    This should contain the package file type, rather than the package manager name.
    Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.'
  example: rpm
  type: keyword
package.version:
  description: Package version
  example: 1.12.9
  type: keyword
process.args:
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example:
  - /usr/bin/ssh
  - -l
  - user
  - 10.0.0.16
  type: keyword
process.args_count:
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  type: long
process.argv_list:
  description: TODO
  type: keyword
process.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
process.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
process.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
process.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
process.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
process.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
process.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
process.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
process.authenticode.more_info_link:
  description: TODO
  type: keyword
process.authenticode.program_name:
  description: TODO
  type: keyword
process.authenticode.publisher_link:
  description: TODO
  type: keyword
process.command_line:
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  type: keyword
process.cpu_percent:
  description: TODO
  type: double
process.cwd:
  description: TODO
  type: keyword
process.defense_evasions:
  description: TODO
  type: nested
process.defense_evasions.call_stack:
  description: TODO
  type: nested
process.defense_evasions.call_stack.instruction_pointer:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.memory_section.memory_address:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.memory_section.memory_size:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.memory_section.protection:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.module_path:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.rva:
  description: TODO
  type: keyword
process.defense_evasions.call_stack.symbol_info:
  description: TODO
  type: keyword
process.defense_evasions.delta_count:
  description: TODO
  type: keyword
process.defense_evasions.evasion_subtype:
  description: TODO
  type: keyword
process.defense_evasions.evasion_type:
  description: TODO
  type: keyword
process.defense_evasions.instruction_pointer:
  description: TODO
  type: keyword
process.defense_evasions.memory_sections:
  description: TODO
  type: nested
process.defense_evasions.memory_sections.memory_address:
  description: TODO
  type: keyword
process.defense_evasions.memory_sections.memory_size:
  description: TODO
  type: keyword
process.defense_evasions.memory_sections.protection:
  description: TODO
  type: keyword
process.defense_evasions.module_path:
  description: TODO
  type: keyword
process.defense_evasions.thread.thread_id:
  description: TODO
  type: long
process.defense_evasions.thread.thread_start_address:
  description: TODO
  type: keyword
process.defense_evasions.total_memory_size:
  description: TODO
  type: keyword
process.domain:
  description: TODO
  type: keyword
process.env_variables:
  description: TODO
  type: keyword
process.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  type: keyword
process.exit_code:
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  type: long
process.file_hash.imphash:
  description: Imphash.
  type: keyword
process.file_hash.md5:
  description: MD5 hash.
  type: keyword
process.file_hash.sha1:
  description: SHA1 hash.
  type: keyword
process.file_hash.sha256:
  description: SHA256 hash.
  type: keyword
process.file_hash.sha512:
  description: SHA512 hash.
  type: keyword
process.gid:
  description: TODO
  type: long
process.group:
  description: TODO
  type: keyword
process.handle:
  description: TODO
  type: nested
process.handle.handle_id:
  description: TODO
  type: long
process.handle.handle_name:
  description: TODO
  type: keyword
process.handle.handle_type:
  description: TODO
  type: keyword
process.has_unbacked_execute_memory:
  description: TODO
  type: boolean
process.hash.imphash:
  description: Imphash.
  type: keyword
process.hash.md5:
  description: MD5 hash.
  type: keyword
process.hash.sha1:
  description: SHA1 hash.
  type: keyword
process.hash.sha256:
  description: SHA256 hash.
  type: keyword
process.hash.sha512:
  description: SHA512 hash.
  type: keyword
process.hash_matched_module:
  description: TODO
  type: boolean
process.is_endpoint:
  description: Is this the Elastic Endpoint process or not.
  type: boolean
process.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
process.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
process.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
process.malware_classification.identifier:
  description: TODO
  type: keyword
process.malware_classification.prevention_threshold:
  description: TODO
  type: double
process.malware_classification.score:
  description: TODO
  type: double
process.malware_classification.threshold:
  description: TODO
  type: double
process.malware_classification.upx_packed:
  description: TODO
  type: boolean
process.malware_classification.version:
  description: TODO
  type: keyword
process.memory_percent:
  description: TODO
  type: double
process.memory_region:
  description: TODO
  type: nested
process.memory_region.allocation_base:
  description: TODO
  type: keyword
process.memory_region.allocation_protection:
  description: TODO
  type: keyword
process.memory_region.bytes:
  description: TODO
  type: keyword
process.memory_region.histogram:
  description: TODO
  type: nested
process.memory_region.histogram.histogram_array:
  description: TODO
  type: keyword
process.memory_region.histogram.histogram_flavor:
  description: TODO
  type: keyword
process.memory_region.histogram.histogram_resolution:
  description: TODO
  type: keyword
process.memory_region.length:
  description: TODO
  type: keyword
process.memory_region.memory:
  description: TODO
  type: keyword
process.memory_region.memory_address:
  description: TODO
  type: keyword
process.memory_region.module_path:
  description: TODO
  type: keyword
process.memory_region.permission:
  description: TODO
  type: keyword
process.memory_region.protection:
  description: TODO
  type: keyword
process.memory_region.region_base:
  description: TODO
  type: keyword
process.memory_region.region_size:
  description: TODO
  type: keyword
process.memory_region.region_tag:
  description: TODO
  type: keyword
process.memory_region.type:
  description: TODO
  type: keyword
process.memory_region.unbacked_on_disk:
  description: TODO
  type: boolean
process.modules:
  description: These fields contain information about a list of modules.
  type: nested
process.modules.architecture:
  description: TODO
  type: keyword
process.modules.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
process.modules.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
process.modules.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
process.modules.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
process.modules.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
process.modules.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
process.modules.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
process.modules.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
process.modules.authenticode.more_info_link:
  description: TODO
  type: keyword
process.modules.authenticode.program_name:
  description: TODO
  type: keyword
process.modules.authenticode.publisher_link:
  description: TODO
  type: keyword
process.modules.compile_time:
  description: TODO
  type: date
process.modules.hash.imphash:
  description: TODO
  type: keyword
process.modules.hash.md5:
  description: TODO
  type: keyword
process.modules.hash.sha1:
  description: TODO
  type: keyword
process.modules.hash.sha256:
  description: TODO
  type: keyword
process.modules.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
process.modules.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
process.modules.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
process.modules.malware_classification.identifier:
  description: TODO
  type: keyword
process.modules.malware_classification.prevention_threshold:
  description: TODO
  type: double
process.modules.malware_classification.score:
  description: TODO
  type: double
process.modules.malware_classification.threshold:
  description: TODO
  type: double
process.modules.malware_classification.upx_packed:
  description: TODO
  type: boolean
process.modules.malware_classification.version:
  description: TODO
  type: keyword
process.modules.mapped_address:
  description: TODO
  type: keyword
process.modules.mapped_size:
  description: TODO
  type: long
process.modules.path:
  description: TODO
  type: keyword
process.modules.pe_exports:
  description: TODO
  type: nested
process.modules.pe_exports.name:
  description: TODO
  type: keyword
process.modules.pe_exports.ordinal:
  description: TODO
  type: long
process.modules.pe_imports:
  description: TODO
  type: nested
process.modules.pe_imports.dll_name:
  description: TODO
  type: keyword
process.modules.pe_imports.import_names:
  description: TODO
  type: keyword
process.modules.signature_signer:
  description: TODO
  type: keyword
process.modules.signature_status:
  description: TODO
  type: keyword
process.name:
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  type: keyword
process.num_threads:
  description: TODO
  type: long
process.parent.args:
  description: 'Array of process arguments.

    May be filtered to protect sensitive information.'
  example:
  - ssh
  - -l
  - user
  - 10.0.0.16
  type: keyword
process.parent.args_count:
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  type: long
process.parent.command_line:
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  type: keyword
process.parent.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  type: keyword
process.parent.exit_code:
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  type: long
process.parent.name:
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  type: keyword
process.parent.pgid:
  description: Identifier of the group of processes the process belongs to.
  type: long
process.parent.pid:
  description: Process id.
  example: 4242
  type: long
process.parent.ppid:
  description: Parent process' pid.
  example: 4241
  type: long
process.parent.start:
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
process.parent.thread.id:
  description: Thread ID.
  example: 4242
  type: long
process.parent.thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
process.parent.title:
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  type: keyword
process.parent.uptime:
  description: Seconds the process has been up.
  example: 1325
  type: long
process.parent.working_directory:
  description: The working directory of the process.
  example: /home/alice
  type: keyword
process.pe_info.architecture:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
process.pe_info.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
process.pe_info.authenticode.more_info_link:
  description: TODO
  type: keyword
process.pe_info.authenticode.program_name:
  description: TODO
  type: keyword
process.pe_info.authenticode.publisher_link:
  description: TODO
  type: keyword
process.pe_info.compile_time:
  description: TODO
  type: long
process.pe_info.entry_point_address:
  description: TODO
  type: long
process.pe_info.is_dll:
  description: TODO
  type: boolean
process.pe_info.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
process.pe_info.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
process.pe_info.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
process.pe_info.malware_classification.identifier:
  description: TODO
  type: keyword
process.pe_info.malware_classification.prevention_threshold:
  description: TODO
  type: double
process.pe_info.malware_classification.score:
  description: TODO
  type: double
process.pe_info.malware_classification.threshold:
  description: TODO
  type: double
process.pe_info.malware_classification.upx_packed:
  description: TODO
  type: boolean
process.pe_info.malware_classification.version:
  description: TODO
  type: keyword
process.pe_info.pe_exports:
  description: TODO
  type: nested
process.pe_info.pe_exports.name:
  description: TODO
  type: keyword
process.pe_info.pe_exports.ordinal:
  description: TODO
  type: long
process.pe_info.pe_imports:
  description: TODO
  type: nested
process.pe_info.pe_imports.dll_name:
  description: TODO
  type: keyword
process.pe_info.pe_imports.import_names:
  description: TODO
  type: keyword
process.pe_info.resources:
  description: TODO
  type: nested
process.pe_info.resources.resource_data.entropy:
  description: TODO
  type: double
process.pe_info.resources.resource_data.size:
  description: TODO
  type: long
process.pe_info.resources.resource_id:
  description: TODO
  type: long
process.pe_info.resources.resource_name:
  description: TODO
  type: keyword
process.pe_info.resources.resource_type:
  description: TODO
  type: keyword
process.pe_info.sections:
  description: TODO
  type: nested
process.pe_info.sections.entropy:
  description: TODO
  type: double
process.pe_info.sections.name:
  description: TODO
  type: keyword
process.pe_info.sections.raw_offset:
  description: TODO
  type: keyword
process.pe_info.sections.raw_size:
  description: TODO
  type: keyword
process.pe_info.sections.virtual_address:
  description: TODO
  type: keyword
process.pe_info.sections.virtual_size:
  description: TODO
  type: keyword
process.pe_info.signature_signer:
  description: TODO
  type: keyword
process.pe_info.signature_status:
  description: TODO
  type: keyword
process.pe_info.version_info:
  description: TODO
  type: nested
process.pe_info.version_info.code_page:
  description: TODO
  type: long
process.pe_info.version_info.key:
  description: TODO
  type: keyword
process.pe_info.version_info.language:
  description: TODO
  type: long
process.pe_info.version_info.value_string:
  description: TODO
  type: keyword
process.pgid:
  description: Identifier of the group of processes the process belongs to.
  type: long
process.phys_memory_bytes:
  description: TODO
  type: keyword
process.pid:
  description: Process id.
  example: 4242
  type: long
process.ppid:
  description: Parent process' pid.
  example: 4241
  type: long
process.services:
  description: TODO
  type: keyword
process.session_id:
  description: TODO
  type: long
process.short_name:
  description: TODO
  type: keyword
process.sid:
  description: TODO
  type: keyword
process.signature_signer:
  description: TODO
  type: keyword
process.signature_status:
  description: TODO
  type: keyword
process.start:
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
process.thread.id:
  description: Thread ID.
  example: 4242
  type: long
process.thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
process.threads:
  description: TODO
  type: nested
process.threads.entrypoint:
  description: TODO
  type: keyword
process.threads.id:
  description: TODO
  type: long
process.threads.start:
  description: TODO
  type: date
process.threads.uptime:
  description: TODO
  type: long
process.title:
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  type: keyword
process.token.domain:
  description: TODO
  type: keyword
process.token.impersonation_level:
  description: Impersonation level. Only valid for impersonation tokens.
  type: keyword
process.token.integrity_level:
  description: Numeric integrity level.
  type: long
process.token.integrity_level_name:
  description: Human readable integrity level.
  type: keyword
process.token.is_appcontainer:
  description: Whether or not this is an appcontainer token.
  type: boolean
process.token.privileges:
  description: Array describing the privileges associated with the token.
  type: nested
process.token.privileges.description:
  description: Description of the privilege.
  type: keyword
process.token.privileges.enabled:
  description: Whether or not the privilege is enabled.
  type: boolean
process.token.privileges.name:
  description: Name of the privilege.
  type: keyword
process.token.sid:
  description: TODO
  type: keyword
process.token.type:
  description: Type of the token, either primary or impersonation.
  type: keyword
process.token.user:
  description: Username of token owner.
  type: keyword
process.tty_device_major_number:
  description: TODO
  type: integer
process.tty_device_minor_number:
  description: TODO
  type: integer
process.tty_device_name:
  description: TODO
  type: keyword
process.uid:
  description: TODO
  type: long
process.unbacked_execute_byte_count:
  description: TODO
  type: keyword
process.unbacked_execute_region_count:
  description: TODO
  type: keyword
process.unique_pid:
  description: Unique process id.
  type: keyword
process.unique_ppid:
  description: Unique parent process id.
  type: keyword
process.uptime:
  description: Seconds the process has been up.
  example: 1325
  type: long
process.user:
  description: TODO
  type: keyword
process.virt_memory_bytes:
  description: TODO
  type: keyword
process.working_directory:
  description: The working directory of the process.
  example: /home/alice
  type: keyword
registry.data.bytes:
  description: 'Original bytes written with base64 encoding.

    For Windows registry operations, such as SetValueEx and RegQueryValueEx, this
    corresponds to the data pointed by `lp_data`. This is optional but provides better
    recoverability and should be populated for REG_BINARY encoded values.'
  example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
  type: keyword
registry.data.strings:
  description: 'Content when writing string types.

    Populated as an array when writing string data to the registry. For single string
    registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string.
    For sequences of string with REG_MULTI_SZ, this array will be variable length.
    For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with
    the decimal representation (e.g `"1"`).'
  example: '["C:\rta\red_ttp\bin\myapp.exe"]'
  type: keyword
registry.data.type:
  description: Standard registry type for encoding contents
  example: REG_SZ
  type: keyword
registry.hive:
  description: Abbreviated name for the hive.
  example: HKLM
  type: keyword
registry.key:
  description: Hive-relative path of keys.
  example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe
  type: keyword
registry.path:
  description: Full path, including hive, key and value
  example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution
    Options\winword.exe\Debugger
  type: keyword
registry.value:
  description: Name of the value written.
  example: Debugger
  type: keyword
related.hash:
  description: All the hashes seen on your event. Populating this field, then using
    it to search for hashes can help in situations where you're unsure what the hash
    algorithm is (and therefore which key name to search).
  type: keyword
related.ip:
  description: All of the IPs seen on your event.
  type: ip
related.user:
  description: All the user names seen on your event.
  type: keyword
rule.category:
  description: A categorization value keyword used by the entity using the rule for
    detection of this event.
  example: Attempted Information Leak
  type: keyword
rule.description:
  description: The description of the rule generating the event.
  example: Block requests to public DNS over HTTPS / TLS protocols
  type: keyword
rule.id:
  description: A rule ID that is unique within the scope of an agent, observer, or
    other entity using the rule for detection of this event.
  example: 101
  type: keyword
rule.name:
  description: The name of the rule or signature generating the event.
  example: BLOCK_DNS_over_TLS
  type: keyword
rule.reference:
  description: 'Reference URL to additional information about the rule used to generate
    this event.

    The URL can point to the vendor''s documentation about the rule. If that''s not
    available, it can also be a link to a more general page describing this type of
    alert.'
  example: https://en.wikipedia.org/wiki/DNS_over_TLS
  type: keyword
rule.ruleset:
  description: Name of the ruleset, policy, group, or parent category in which the
    rule used to generate this event is a member.
  example: Standard_Protocol_Filters
  type: keyword
rule.uuid:
  description: A rule ID that is unique within the scope of a set or group of agents,
    observers, or other entities using the rule for detection of this event.
  example: 1100110011
  type: keyword
rule.version:
  description: The version / revision of the rule being used for analysis.
  example: 1.1
  type: keyword
server.address:
  description: 'Some event server addresses are defined ambiguously. The event will
    sometimes list an IP, a domain or a unix socket.  You should always store the
    raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  type: keyword
server.as.number:
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  type: long
server.as.organization.name:
  description: Organization name.
  example: Google LLC
  type: keyword
server.bytes:
  description: Bytes sent from the server to the client.
  example: 184
  type: long
server.domain:
  description: Server domain.
  type: keyword
server.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
server.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
server.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
server.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
server.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
server.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
server.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
server.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
server.ip:
  description: 'IP address of the server.

    Can be one or multiple IPv4 or IPv6 addresses.'
  type: ip
server.mac:
  description: MAC address of the server.
  type: keyword
server.nat.ip:
  description: 'Translated ip of destination based NAT sessions (e.g. internet to
    private DMZ)

    Typically used with load balancers, firewalls, or routers.'
  type: ip
server.nat.port:
  description: 'Translated port of destination based NAT sessions (e.g. internet to
    private DMZ)

    Typically used with load balancers, firewalls, or routers.'
  type: long
server.packets:
  description: Packets sent from the server to the client.
  example: 12
  type: long
server.port:
  description: Port of the server.
  type: long
server.registered_domain:
  description: 'The highest registered server domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
server.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
server.user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
server.user.email:
  description: User email address.
  type: keyword
server.user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
server.user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
server.user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
server.user.group.name:
  description: Name of the group.
  type: keyword
server.user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
server.user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
server.user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
service.ephemeral_id:
  description: 'Ephemeral identifier of this service (if one exists).

    This id normally changes across restarts, but `service.id` does not.'
  example: 8a4f500f
  type: keyword
service.id:
  description: 'Unique identifier of the running service. If the service is comprised
    of many nodes, the `service.id` should be the same for all nodes.

    This id should uniquely identify the service. This makes it possible to correlate
    logs and metrics for one specific service, no matter which particular node emitted
    the event.

    Note that if you need to see the events from one specific host of the service,
    you should filter on that `host.name` or `host.id` instead.'
  example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
  type: keyword
service.name:
  description: 'Name of the service data is collected from.

    The name of the service is normally user given. This allows for distributed services
    that run on multiple hosts to correlate the related instances based on the name.

    In the case of Elasticsearch the `service.name` could contain the cluster name.
    For Beats the `service.name` is by default a copy of the `service.type` field
    if no name is specified.'
  example: elasticsearch-metrics
  type: keyword
service.node.name:
  description: 'Name of a service node.

    This allows for two nodes of the same service running on the same host to be differentiated.
    Therefore, `service.node.name` should typically be unique across nodes of a given
    service.

    In the case of Elasticsearch, the `service.node.name` could contain the unique
    node name within the Elasticsearch cluster. In cases where the service doesn''t
    have the concept of a node name, the host name or container name can be used to
    distinguish running instances that make up this service. If those do not provide
    uniqueness (e.g. multiple instances of the service running on the same host) -
    the node name can be manually set.'
  example: instance-0000000016
  type: keyword
service.state:
  description: Current state of the service.
  type: keyword
service.type:
  description: 'The type of the service data is collected from.

    The type can be used to group and correlate logs and metrics from one service
    type.

    Example: If logs or metrics are collected from Elasticsearch, `service.type` would
    be `elasticsearch`.'
  example: elasticsearch
  type: keyword
service.version:
  description: 'Version of the service the data was collected from.

    This allows to look at a data set only for a specific version of a service.'
  example: 3.2.4
  type: keyword
source.address:
  description: 'Some event source addresses are defined ambiguously. The event will
    sometimes list an IP, a domain or a unix socket.  You should always store the
    raw address in the `.address` field.

    Then it should be duplicated to `.ip` or `.domain`, depending on which one it
    is.'
  type: keyword
source.as.number:
  description: Unique number allocated to the autonomous system. The autonomous system
    number (ASN) uniquely identifies each network on the Internet.
  example: 15169
  type: long
source.as.organization.name:
  description: Organization name.
  example: Google LLC
  type: keyword
source.bytes:
  description: Bytes sent from the source to the destination.
  example: 184
  type: long
source.domain:
  description: Source domain.
  type: keyword
source.geo.city_name:
  description: City name.
  example: Montreal
  type: keyword
source.geo.continent_name:
  description: Name of the continent.
  example: North America
  type: keyword
source.geo.country_iso_code:
  description: Country ISO code.
  example: CA
  type: keyword
source.geo.country_name:
  description: Country name.
  example: Canada
  type: keyword
source.geo.location:
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  type: geo_point
source.geo.name:
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  type: keyword
source.geo.region_iso_code:
  description: Region ISO code.
  example: CA-QC
  type: keyword
source.geo.region_name:
  description: Region name.
  example: Quebec
  type: keyword
source.ip:
  description: 'IP address of the source.

    Can be one or multiple IPv4 or IPv6 addresses.'
  type: ip
source.mac:
  description: MAC address of the source.
  type: keyword
source.nat.ip:
  description: 'Translated ip of source based NAT sessions (e.g. internal client to
    internet)

    Typically connections traversing load balancers, firewalls, or routers.'
  type: ip
source.nat.port:
  description: 'Translated port of source based NAT sessions. (e.g. internal client
    to internet)

    Typically used with load balancers, firewalls, or routers.'
  type: long
source.packets:
  description: Packets sent from the source to the destination.
  example: 12
  type: long
source.port:
  description: Port of the source.
  type: long
source.registered_domain:
  description: 'The highest registered source domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
source.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
source.user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
source.user.email:
  description: User email address.
  type: keyword
source.user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
source.user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
source.user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
source.user.group.name:
  description: Name of the group.
  type: keyword
source.user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
source.user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
source.user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
tags:
  description: List of keywords used to tag each event.
  example: '["production", "env2"]'
  type: keyword
target.process.args:
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example:
  - /usr/bin/ssh
  - -l
  - user
  - 10.0.0.16
  type: keyword
target.process.args_count:
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  type: long
target.process.argv_list:
  description: TODO
  type: keyword
target.process.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
target.process.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
target.process.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
target.process.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
target.process.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
target.process.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
target.process.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
target.process.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
target.process.authenticode.more_info_link:
  description: TODO
  type: keyword
target.process.authenticode.program_name:
  description: TODO
  type: keyword
target.process.authenticode.publisher_link:
  description: TODO
  type: keyword
target.process.command_line:
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  type: keyword
target.process.cpu_percent:
  description: TODO
  type: double
target.process.cwd:
  description: TODO
  type: keyword
target.process.defense_evasions:
  description: TODO
  type: nested
target.process.defense_evasions.call_stack:
  description: TODO
  type: nested
target.process.defense_evasions.call_stack.instruction_pointer:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.memory_section.memory_address:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.memory_section.memory_size:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.memory_section.protection:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.module_path:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.rva:
  description: TODO
  type: keyword
target.process.defense_evasions.call_stack.symbol_info:
  description: TODO
  type: keyword
target.process.defense_evasions.delta_count:
  description: TODO
  type: keyword
target.process.defense_evasions.evasion_subtype:
  description: TODO
  type: keyword
target.process.defense_evasions.evasion_type:
  description: TODO
  type: keyword
target.process.defense_evasions.instruction_pointer:
  description: TODO
  type: keyword
target.process.defense_evasions.memory_sections:
  description: TODO
  type: nested
target.process.defense_evasions.memory_sections.memory_address:
  description: TODO
  type: keyword
target.process.defense_evasions.memory_sections.memory_size:
  description: TODO
  type: keyword
target.process.defense_evasions.memory_sections.protection:
  description: TODO
  type: keyword
target.process.defense_evasions.module_path:
  description: TODO
  type: keyword
target.process.defense_evasions.thread.thread_id:
  description: TODO
  type: long
target.process.defense_evasions.thread.thread_start_address:
  description: TODO
  type: keyword
target.process.defense_evasions.total_memory_size:
  description: TODO
  type: keyword
target.process.domain:
  description: TODO
  type: keyword
target.process.env_variables:
  description: TODO
  type: keyword
target.process.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  type: keyword
target.process.exit_code:
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  type: long
target.process.file_hash.imphash:
  description: Imphash.
  type: keyword
target.process.file_hash.md5:
  description: MD5 hash.
  type: keyword
target.process.file_hash.sha1:
  description: SHA1 hash.
  type: keyword
target.process.file_hash.sha256:
  description: SHA256 hash.
  type: keyword
target.process.file_hash.sha512:
  description: SHA512 hash.
  type: keyword
target.process.gid:
  description: TODO
  type: long
target.process.group:
  description: TODO
  type: keyword
target.process.handle:
  description: TODO
  type: nested
target.process.handle.handle_id:
  description: TODO
  type: long
target.process.handle.handle_name:
  description: TODO
  type: keyword
target.process.handle.handle_type:
  description: TODO
  type: keyword
target.process.has_unbacked_execute_memory:
  description: TODO
  type: boolean
target.process.hash.imphash:
  description: Imphash.
  type: keyword
target.process.hash.md5:
  description: MD5 hash.
  type: keyword
target.process.hash.sha1:
  description: SHA1 hash.
  type: keyword
target.process.hash.sha256:
  description: SHA256 hash.
  type: keyword
target.process.hash.sha512:
  description: SHA512 hash.
  type: keyword
target.process.hash_matched_module:
  description: TODO
  type: boolean
target.process.is_endpoint:
  description: Is this the Elastic Endpoint process or not.
  type: boolean
target.process.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
target.process.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
target.process.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
target.process.malware_classification.identifier:
  description: TODO
  type: keyword
target.process.malware_classification.prevention_threshold:
  description: TODO
  type: double
target.process.malware_classification.score:
  description: TODO
  type: double
target.process.malware_classification.threshold:
  description: TODO
  type: double
target.process.malware_classification.upx_packed:
  description: TODO
  type: boolean
target.process.malware_classification.version:
  description: TODO
  type: keyword
target.process.memory_percent:
  description: TODO
  type: double
target.process.memory_region:
  description: TODO
  type: nested
target.process.memory_region.allocation_base:
  description: TODO
  type: keyword
target.process.memory_region.allocation_protection:
  description: TODO
  type: keyword
target.process.memory_region.bytes:
  description: TODO
  type: keyword
target.process.memory_region.histogram:
  description: TODO
  type: nested
target.process.memory_region.histogram.histogram_array:
  description: TODO
  type: keyword
target.process.memory_region.histogram.histogram_flavor:
  description: TODO
  type: keyword
target.process.memory_region.histogram.histogram_resolution:
  description: TODO
  type: keyword
target.process.memory_region.length:
  description: TODO
  type: keyword
target.process.memory_region.memory:
  description: TODO
  type: keyword
target.process.memory_region.memory_address:
  description: TODO
  type: keyword
target.process.memory_region.module_path:
  description: TODO
  type: keyword
target.process.memory_region.permission:
  description: TODO
  type: keyword
target.process.memory_region.protection:
  description: TODO
  type: keyword
target.process.memory_region.region_base:
  description: TODO
  type: keyword
target.process.memory_region.region_size:
  description: TODO
  type: keyword
target.process.memory_region.region_tag:
  description: TODO
  type: keyword
target.process.memory_region.type:
  description: TODO
  type: keyword
target.process.memory_region.unbacked_on_disk:
  description: TODO
  type: boolean
target.process.modules:
  description: These fields contain information about a list of modules.
  type: nested
target.process.modules.architecture:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
target.process.modules.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
target.process.modules.authenticode.more_info_link:
  description: TODO
  type: keyword
target.process.modules.authenticode.program_name:
  description: TODO
  type: keyword
target.process.modules.authenticode.publisher_link:
  description: TODO
  type: keyword
target.process.modules.compile_time:
  description: TODO
  type: date
target.process.modules.hash.imphash:
  description: TODO
  type: keyword
target.process.modules.hash.md5:
  description: TODO
  type: keyword
target.process.modules.hash.sha1:
  description: TODO
  type: keyword
target.process.modules.hash.sha256:
  description: TODO
  type: keyword
target.process.modules.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
target.process.modules.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
target.process.modules.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
target.process.modules.malware_classification.identifier:
  description: TODO
  type: keyword
target.process.modules.malware_classification.prevention_threshold:
  description: TODO
  type: double
target.process.modules.malware_classification.score:
  description: TODO
  type: double
target.process.modules.malware_classification.threshold:
  description: TODO
  type: double
target.process.modules.malware_classification.upx_packed:
  description: TODO
  type: boolean
target.process.modules.malware_classification.version:
  description: TODO
  type: keyword
target.process.modules.mapped_address:
  description: TODO
  type: keyword
target.process.modules.mapped_size:
  description: TODO
  type: long
target.process.modules.path:
  description: TODO
  type: keyword
target.process.modules.pe_exports:
  description: TODO
  type: nested
target.process.modules.pe_exports.name:
  description: TODO
  type: keyword
target.process.modules.pe_exports.ordinal:
  description: TODO
  type: long
target.process.modules.pe_imports:
  description: TODO
  type: nested
target.process.modules.pe_imports.dll_name:
  description: TODO
  type: keyword
target.process.modules.pe_imports.import_names:
  description: TODO
  type: keyword
target.process.modules.signature_signer:
  description: TODO
  type: keyword
target.process.modules.signature_status:
  description: TODO
  type: keyword
target.process.name:
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  type: keyword
target.process.num_threads:
  description: TODO
  type: long
target.process.parent.args:
  description: 'Array of process arguments.

    May be filtered to protect sensitive information.'
  example:
  - ssh
  - -l
  - user
  - 10.0.0.16
  type: keyword
target.process.parent.args_count:
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  type: long
target.process.parent.command_line:
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  type: keyword
target.process.parent.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  type: keyword
target.process.parent.exit_code:
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  type: long
target.process.parent.name:
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  type: keyword
target.process.parent.pgid:
  description: Identifier of the group of processes the process belongs to.
  type: long
target.process.parent.pid:
  description: Process id.
  example: 4242
  type: long
target.process.parent.ppid:
  description: Parent process' pid.
  example: 4241
  type: long
target.process.parent.start:
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
target.process.parent.thread.id:
  description: Thread ID.
  example: 4242
  type: long
target.process.parent.thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
target.process.parent.title:
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  type: keyword
target.process.parent.uptime:
  description: Seconds the process has been up.
  example: 1325
  type: long
target.process.parent.working_directory:
  description: The working directory of the process.
  example: /home/alice
  type: keyword
target.process.pe_info.architecture:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_signer.issuer_name:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_signer.serial_number:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_signer.subject_name:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_signer.timestamp_string:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_timestamp.issuer_name:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_timestamp.serial_number:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_timestamp.subject_name:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.cert_timestamp.timestamp_string:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.more_info_link:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.program_name:
  description: TODO
  type: keyword
target.process.pe_info.authenticode.publisher_link:
  description: TODO
  type: keyword
target.process.pe_info.compile_time:
  description: TODO
  type: long
target.process.pe_info.entry_point_address:
  description: TODO
  type: long
target.process.pe_info.is_dll:
  description: TODO
  type: boolean
target.process.pe_info.malware_classification.compressed_malware_features.data_buffer:
  description: TODO
  type: keyword
target.process.pe_info.malware_classification.compressed_malware_features.decompressed_size:
  description: TODO
  type: integer
target.process.pe_info.malware_classification.compressed_malware_features.encoding:
  description: TODO
  type: keyword
target.process.pe_info.malware_classification.identifier:
  description: TODO
  type: keyword
target.process.pe_info.malware_classification.prevention_threshold:
  description: TODO
  type: double
target.process.pe_info.malware_classification.score:
  description: TODO
  type: double
target.process.pe_info.malware_classification.threshold:
  description: TODO
  type: double
target.process.pe_info.malware_classification.upx_packed:
  description: TODO
  type: boolean
target.process.pe_info.malware_classification.version:
  description: TODO
  type: keyword
target.process.pe_info.pe_exports:
  description: TODO
  type: nested
target.process.pe_info.pe_exports.name:
  description: TODO
  type: keyword
target.process.pe_info.pe_exports.ordinal:
  description: TODO
  type: long
target.process.pe_info.pe_imports:
  description: TODO
  type: nested
target.process.pe_info.pe_imports.dll_name:
  description: TODO
  type: keyword
target.process.pe_info.pe_imports.import_names:
  description: TODO
  type: keyword
target.process.pe_info.resources:
  description: TODO
  type: nested
target.process.pe_info.resources.resource_data.entropy:
  description: TODO
  type: double
target.process.pe_info.resources.resource_data.size:
  description: TODO
  type: long
target.process.pe_info.resources.resource_id:
  description: TODO
  type: long
target.process.pe_info.resources.resource_name:
  description: TODO
  type: keyword
target.process.pe_info.resources.resource_type:
  description: TODO
  type: keyword
target.process.pe_info.sections:
  description: TODO
  type: nested
target.process.pe_info.sections.entropy:
  description: TODO
  type: double
target.process.pe_info.sections.name:
  description: TODO
  type: keyword
target.process.pe_info.sections.raw_offset:
  description: TODO
  type: keyword
target.process.pe_info.sections.raw_size:
  description: TODO
  type: keyword
target.process.pe_info.sections.virtual_address:
  description: TODO
  type: keyword
target.process.pe_info.sections.virtual_size:
  description: TODO
  type: keyword
target.process.pe_info.signature_signer:
  description: TODO
  type: keyword
target.process.pe_info.signature_status:
  description: TODO
  type: keyword
target.process.pe_info.version_info:
  description: TODO
  type: nested
target.process.pe_info.version_info.code_page:
  description: TODO
  type: long
target.process.pe_info.version_info.key:
  description: TODO
  type: keyword
target.process.pe_info.version_info.language:
  description: TODO
  type: long
target.process.pe_info.version_info.value_string:
  description: TODO
  type: keyword
target.process.pgid:
  description: Identifier of the group of processes the process belongs to.
  type: long
target.process.phys_memory_bytes:
  description: TODO
  type: keyword
target.process.pid:
  description: Process id.
  example: 4242
  type: long
target.process.ppid:
  description: Parent process' pid.
  example: 4241
  type: long
target.process.services:
  description: TODO
  type: keyword
target.process.session_id:
  description: TODO
  type: long
target.process.short_name:
  description: TODO
  type: keyword
target.process.sid:
  description: TODO
  type: keyword
target.process.signature_signer:
  description: TODO
  type: keyword
target.process.signature_status:
  description: TODO
  type: keyword
target.process.start:
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
target.process.thread.id:
  description: Thread ID.
  example: 4242
  type: long
target.process.thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
target.process.threads:
  description: TODO
  type: nested
target.process.threads.entrypoint:
  description: TODO
  type: keyword
target.process.threads.id:
  description: TODO
  type: long
target.process.threads.start:
  description: TODO
  type: date
target.process.threads.uptime:
  description: TODO
  type: long
target.process.title:
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  type: keyword
target.process.token.domain:
  description: TODO
  type: keyword
target.process.token.impersonation_level:
  description: Impersonation level. Only valid for impersonation tokens.
  type: keyword
target.process.token.integrity_level:
  description: Numeric integrity level.
  type: long
target.process.token.integrity_level_name:
  description: Human readable integrity level.
  type: keyword
target.process.token.is_appcontainer:
  description: Whether or not this is an appcontainer token.
  type: boolean
target.process.token.privileges:
  description: Array describing the privileges associated with the token.
  type: nested
target.process.token.privileges.description:
  description: Description of the privilege.
  type: keyword
target.process.token.privileges.enabled:
  description: Whether or not the privilege is enabled.
  type: boolean
target.process.token.privileges.name:
  description: Name of the privilege.
  type: keyword
target.process.token.sid:
  description: TODO
  type: keyword
target.process.token.type:
  description: Type of the token, either primary or impersonation.
  type: keyword
target.process.token.user:
  description: Username of token owner.
  type: keyword
target.process.tty_device_major_number:
  description: TODO
  type: integer
target.process.tty_device_minor_number:
  description: TODO
  type: integer
target.process.tty_device_name:
  description: TODO
  type: keyword
target.process.uid:
  description: TODO
  type: long
target.process.unbacked_execute_byte_count:
  description: TODO
  type: keyword
target.process.unbacked_execute_region_count:
  description: TODO
  type: keyword
target.process.unique_pid:
  description: Unique process id.
  type: keyword
target.process.unique_ppid:
  description: Unique parent process id.
  type: keyword
target.process.uptime:
  description: Seconds the process has been up.
  example: 1325
  type: long
target.process.user:
  description: TODO
  type: keyword
target.process.virt_memory_bytes:
  description: TODO
  type: keyword
target.process.working_directory:
  description: The working directory of the process.
  example: /home/alice
  type: keyword
target.thread.call_stack:
  description: TODO
  type: nested
target.thread.call_stack.instruction_pointer:
  description: TODO
  type: keyword
target.thread.call_stack.memory_section.memory_address:
  description: TODO
  type: keyword
target.thread.call_stack.memory_section.memory_size:
  description: TODO
  type: keyword
target.thread.call_stack.memory_section.protection:
  description: TODO
  type: keyword
target.thread.call_stack.module_path:
  description: TODO
  type: keyword
target.thread.call_stack.rva:
  description: TODO
  type: keyword
target.thread.call_stack.symbol_info:
  description: TODO
  type: keyword
target.thread.id:
  description: Thread id.
  example: 3147
  type: long
target.thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
target.thread.service_name:
  description: Service associated with the thread.
  example: VaultSvc
  type: keyword
target.thread.start:
  description: The time the thread started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
target.thread.start_address:
  description: Memory address where the thread started.
  example: 5442508
  type: keyword
target.thread.start_address_module:
  description: TODO
  example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
  type: keyword
target.thread.token.domain:
  description: TODO
  type: keyword
target.thread.token.impersonation_level:
  description: Impersonation level. Only valid for impersonation tokens.
  type: keyword
target.thread.token.integrity_level:
  description: Numeric integrity level.
  type: long
target.thread.token.integrity_level_name:
  description: Human readable integrity level.
  type: keyword
target.thread.token.is_appcontainer:
  description: Whether or not this is an appcontainer token.
  type: boolean
target.thread.token.privileges:
  description: Array describing the privileges associated with the token.
  type: nested
target.thread.token.privileges.description:
  description: Description of the privilege.
  type: keyword
target.thread.token.privileges.enabled:
  description: Whether or not the privilege is enabled.
  type: boolean
target.thread.token.privileges.name:
  description: Name of the privilege.
  type: keyword
target.thread.token.sid:
  description: TODO
  type: keyword
target.thread.token.type:
  description: Type of the token, either primary or impersonation.
  type: keyword
target.thread.token.user:
  description: Username of token owner.
  type: keyword
thread.call_stack:
  description: TODO
  type: nested
thread.call_stack.instruction_pointer:
  description: TODO
  type: keyword
thread.call_stack.memory_section.memory_address:
  description: TODO
  type: keyword
thread.call_stack.memory_section.memory_size:
  description: TODO
  type: keyword
thread.call_stack.memory_section.protection:
  description: TODO
  type: keyword
thread.call_stack.module_path:
  description: TODO
  type: keyword
thread.call_stack.rva:
  description: TODO
  type: keyword
thread.call_stack.symbol_info:
  description: TODO
  type: keyword
thread.id:
  description: Thread id.
  example: 3147
  type: long
thread.name:
  description: Thread name.
  example: thread-0
  type: keyword
thread.service_name:
  description: Service associated with the thread.
  example: VaultSvc
  type: keyword
thread.start:
  description: The time the thread started.
  example: '2016-05-23T08:05:34.853Z'
  type: date
thread.start_address:
  description: Memory address where the thread started.
  example: 5442508
  type: keyword
thread.start_address_module:
  description: TODO
  example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
  type: keyword
thread.token.domain:
  description: TODO
  type: keyword
thread.token.impersonation_level:
  description: Impersonation level. Only valid for impersonation tokens.
  type: keyword
thread.token.integrity_level:
  description: Numeric integrity level.
  type: long
thread.token.integrity_level_name:
  description: Human readable integrity level.
  type: keyword
thread.token.is_appcontainer:
  description: Whether or not this is an appcontainer token.
  type: boolean
thread.token.privileges:
  description: Array describing the privileges associated with the token.
  type: nested
thread.token.privileges.description:
  description: Description of the privilege.
  type: keyword
thread.token.privileges.enabled:
  description: Whether or not the privilege is enabled.
  type: boolean
thread.token.privileges.name:
  description: Name of the privilege.
  type: keyword
thread.token.sid:
  description: TODO
  type: keyword
thread.token.type:
  description: Type of the token, either primary or impersonation.
  type: keyword
thread.token.user:
  description: Username of token owner.
  type: keyword
threat.framework:
  description: Name of the threat framework used to further categorize and classify
    the tactic and technique of the reported threat. Framework classification can
    be provided by detecting systems, evaluated at ingest time, or retrospectively
    tagged to events.
  example: MITRE ATT&CK
  type: keyword
threat.tactic.id:
  description: The id of tactic used by this threat. You can use the Mitre ATT&CK
    Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
    )
  example: TA0040
  type: keyword
threat.tactic.name:
  description: Name of the type of tactic used by this threat. You can use the Mitre
    ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
    )
  example: impact
  type: keyword
threat.tactic.reference:
  description: The reference url of tactic used by this threat. You can use the Mitre
    ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
    )
  example: https://attack.mitre.org/tactics/TA0040/
  type: keyword
threat.technique.id:
  description: The id of technique used by this tactic. You can use the Mitre ATT&CK
    Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
    )
  example: T1499
  type: keyword
threat.technique.name:
  description: The name of technique used by this tactic. You can use the Mitre ATT&CK
    Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
    )
  example: endpoint denial of service
  type: keyword
threat.technique.reference:
  description: The reference url of technique used by this tactic. You can use the
    Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
    )
  example: https://attack.mitre.org/techniques/T1499/
  type: keyword
tls.cipher:
  description: String indicating the cipher used during the current connection.
  example: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
  type: keyword
tls.client.certificate:
  description: PEM-encoded stand-alone certificate offered by the client. This is
    usually mutually-exclusive of `client.certificate_chain` since this value also
    exists in that list.
  example: MII...
  type: keyword
tls.client.certificate_chain:
  description: Array of PEM-encoded certificates that make up the certificate chain
    offered by the client. This is usually mutually-exclusive of `client.certificate`
    since that value should be the first certificate in the chain.
  example:
  - MII...
  - MII...
  type: keyword
tls.client.hash.md5:
  description: Certificate fingerprint using the MD5 digest of DER-encoded version
    of certificate offered by the client. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
  type: keyword
tls.client.hash.sha1:
  description: Certificate fingerprint using the SHA1 digest of DER-encoded version
    of certificate offered by the client. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 9E393D93138888D288266C2D915214D1D1CCEB2A
  type: keyword
tls.client.hash.sha256:
  description: Certificate fingerprint using the SHA256 digest of DER-encoded version
    of certificate offered by the client. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
  type: keyword
tls.client.issuer:
  description: Distinguished name of subject of the issuer of the x.509 certificate
    presented by the client.
  example: CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
  type: keyword
tls.client.ja3:
  description: A hash that identifies clients based on how they perform an SSL/TLS
    handshake.
  example: d4e5b18d6b55c71272893221c96ba240
  type: keyword
tls.client.not_after:
  description: Date/Time indicating when client certificate is no longer considered
    valid.
  example: '2021-01-01T00:00:00.000Z'
  type: date
tls.client.not_before:
  description: Date/Time indicating when client certificate is first considered valid.
  example: '1970-01-01T00:00:00.000Z'
  type: date
tls.client.server_name:
  description: Also called an SNI, this tells the server which hostname to which the
    client is attempting to connect. When this value is available, it should get copied
    to `destination.domain`.
  example: www.elastic.co
  type: keyword
tls.client.subject:
  description: Distinguished name of subject of the x.509 certificate presented by
    the client.
  example: CN=myclient, OU=Documentation Team, DC=mydomain, DC=com
  type: keyword
tls.client.supported_ciphers:
  description: Array of ciphers offered by the client during the client hello.
  example:
  - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  - '...'
  type: keyword
tls.curve:
  description: String indicating the curve used for the given cipher, when applicable.
  example: secp256r1
  type: keyword
tls.established:
  description: Boolean flag indicating if the TLS negotiation was successful and transitioned
    to an encrypted tunnel.
  type: boolean
tls.next_protocol:
  description: String indicating the protocol being tunneled. Per the values in the
    IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),
    this string should be lower case.
  example: http/1.1
  type: keyword
tls.resumed:
  description: Boolean flag indicating if this TLS connection was resumed from an
    existing TLS negotiation.
  type: boolean
tls.server.certificate:
  description: PEM-encoded stand-alone certificate offered by the server. This is
    usually mutually-exclusive of `server.certificate_chain` since this value also
    exists in that list.
  example: MII...
  type: keyword
tls.server.certificate_chain:
  description: Array of PEM-encoded certificates that make up the certificate chain
    offered by the server. This is usually mutually-exclusive of `server.certificate`
    since that value should be the first certificate in the chain.
  example:
  - MII...
  - MII...
  type: keyword
tls.server.hash.md5:
  description: Certificate fingerprint using the MD5 digest of DER-encoded version
    of certificate offered by the server. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
  type: keyword
tls.server.hash.sha1:
  description: Certificate fingerprint using the SHA1 digest of DER-encoded version
    of certificate offered by the server. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 9E393D93138888D288266C2D915214D1D1CCEB2A
  type: keyword
tls.server.hash.sha256:
  description: Certificate fingerprint using the SHA256 digest of DER-encoded version
    of certificate offered by the server. For consistency with other hash values,
    this value should be formatted as an uppercase hash.
  example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
  type: keyword
tls.server.issuer:
  description: Subject of the issuer of the x.509 certificate presented by the server.
  example: CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
  type: keyword
tls.server.ja3s:
  description: A hash that identifies servers based on how they perform an SSL/TLS
    handshake.
  example: 394441ab65754e2207b1e1b457b3641d
  type: keyword
tls.server.not_after:
  description: Timestamp indicating when server certificate is no longer considered
    valid.
  example: '2021-01-01T00:00:00.000Z'
  type: date
tls.server.not_before:
  description: Timestamp indicating when server certificate is first considered valid.
  example: '1970-01-01T00:00:00.000Z'
  type: date
tls.server.subject:
  description: Subject of the x.509 certificate presented by the server.
  example: CN=www.mydomain.com, OU=Infrastructure Team, DC=mydomain, DC=com
  type: keyword
tls.version:
  description: Numeric part of the version parsed from the original string.
  example: '1.2'
  type: keyword
tls.version_protocol:
  description: Normalized lowercase protocol name parsed from original string.
  example: tls
  type: keyword
token.domain:
  description: TODO
  type: keyword
token.impersonation_level:
  description: Impersonation level. Only valid for impersonation tokens.
  type: keyword
token.integrity_level:
  description: Numeric integrity level.
  type: long
token.integrity_level_name:
  description: Human readable integrity level.
  type: keyword
token.is_appcontainer:
  description: Whether or not this is an appcontainer token.
  type: boolean
token.privileges:
  description: Array describing the privileges associated with the token.
  type: nested
token.privileges.description:
  description: Description of the privilege.
  type: keyword
token.privileges.enabled:
  description: Whether or not the privilege is enabled.
  type: boolean
token.privileges.name:
  description: Name of the privilege.
  type: keyword
token.sid:
  description: TODO
  type: keyword
token.type:
  description: Type of the token, either primary or impersonation.
  type: keyword
token.user:
  description: Username of token owner.
  type: keyword
trace.id:
  description: 'Unique identifier of the trace.

    A trace groups multiple events like transactions that belong together. For example,
    a user request handled by multiple inter-connected services.'
  example: 4bf92f3577b34da6a3ce929d0e0e4736
  type: keyword
transaction.id:
  description: 'Unique identifier of the transaction.

    A transaction is the highest level of work measured within a service, such as
    a request to a server.'
  example: 00f067aa0ba902b7
  type: keyword
url.domain:
  description: 'Domain of the url, such as "www.elastic.co".

    In some cases a URL may refer to an IP and/or port directly, without a domain
    name. In this case, the IP address would go to the `domain` field.'
  example: www.elastic.co
  type: keyword
url.extension:
  description: 'The field contains the file extension from the original request url.

    The file extension is only set if it exists, as not every url has a file extension.

    The leading period must not be included. For example, the value must be "png",
    not ".png".'
  example: png
  type: keyword
url.fragment:
  description: 'Portion of the url after the `#`, such as "top".

    The `#` is not part of the fragment.'
  type: keyword
url.full:
  description: If full URLs are important to your use case, they should be stored
    in `url.full`, whether this field is reconstructed or present in the event source.
  example: https://www.elastic.co:443/search?q=elasticsearch#top
  type: keyword
url.original:
  description: 'Unmodified original url as seen in the event source.

    Note that in network monitoring, the observed URL may be a full URL, whereas in
    access logs, the URL is often just represented as a path.

    This field is meant to represent the URL as it was observed, complete or not.'
  example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
  type: keyword
url.password:
  description: Password of the request.
  type: keyword
url.path:
  description: Path of the request, such as "/search".
  type: keyword
url.port:
  description: Port of the request, such as 443.
  example: 443
  type: long
url.query:
  description: 'The query field describes the query string of the request, such as
    "q=elasticsearch".

    The `?` is excluded from the query string. If a URL contains no `?`, there is
    no query field. If there is a `?` but no query, the query field exists with an
    empty string. The `exists` query can be used to differentiate between the two
    cases.'
  type: keyword
url.registered_domain:
  description: 'The highest registered url domain, stripped of the subdomain.

    For example, the registered domain for "foo.google.com" is "google.com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    two labels will not work well for TLDs such as "co.uk".'
  example: google.com
  type: keyword
url.scheme:
  description: 'Scheme of the request, such as "https".

    Note: The `:` is not part of the scheme.'
  example: https
  type: keyword
url.top_level_domain:
  description: 'The effective top level domain (eTLD), also known as the domain suffix,
    is the last part of the domain name. For example, the top level domain for google.com
    is "com".

    This value can be determined precisely with a list like the public suffix list
    (http://publicsuffix.org). Trying to approximate this by simply taking the last
    label will not work well for effective TLDs such as "co.uk".'
  example: co.uk
  type: keyword
url.username:
  description: Username of the request.
  type: keyword
user.domain:
  description: 'Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
user.email:
  description: User email address.
  type: keyword
user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  type: keyword
user.group.domain:
  description: 'Name of the directory the group is a member of.

    For example, an LDAP or Active Directory domain name.'
  type: keyword
user.group.id:
  description: Unique identifier for the group on the system/platform.
  type: keyword
user.group.name:
  description: Name of the group.
  type: keyword
user.hash:
  description: 'Unique user hash to correlate information for a user in anonymized
    form.

    Useful if `user.id` or `user.name` contain confidential information and cannot
    be used.'
  type: keyword
user.id:
  description: One or multiple unique identifiers of the user.
  type: keyword
user.name:
  description: Short name or login of the user.
  example: albert
  type: keyword
user_agent.device.name:
  description: Name of the device.
  example: iPhone
  type: keyword
user_agent.name:
  description: Name of the user agent.
  example: Safari
  type: keyword
user_agent.original:
  description: Unparsed user_agent string.
  example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15
    (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
  type: keyword
user_agent.os.family:
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  type: keyword
user_agent.os.full:
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  type: keyword
user_agent.os.kernel:
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  type: keyword
user_agent.os.name:
  description: Operating system name, without the version.
  example: Mac OS X
  type: keyword
user_agent.os.platform:
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  type: keyword
user_agent.os.version:
  description: Operating system version as a raw string.
  example: 10.14.1
  type: keyword
user_agent.version:
  description: Version of the user agent.
  example: 12.0
  type: keyword
vulnerability.category:
  description: 'The type of system or architecture that the vulnerability affects.
    These may be platform-specific (for example, Debian or SUSE) or general (for example,
    Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys
    vulnerability categories])

    This field must be an array.'
  example: '["Firewall"]'
  type: keyword
vulnerability.classification:
  description: The classification of the vulnerability scoring system. For example
    (https://www.first.org/cvss/)
  example: CVSS
  type: keyword
vulnerability.description:
  description: The description of the vulnerability that provides additional context
    of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common
    Vulnerabilities and Exposure CVE description])
  example: In macOS before 2.12.6, there is a vulnerability in the RPC...
  type: keyword
vulnerability.enumeration:
  description: The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)
  example: CVE
  type: keyword
vulnerability.id:
  description: The identification (ID) is the number portion of a vulnerability entry.
    It includes a unique identification number for the vulnerability. For example
    (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities
    and Exposure CVE ID]
  example: CVE-2019-00001
  type: keyword
vulnerability.reference:
  description: A resource that provides additional information, context, and mitigations
    for the identified vulnerability.
  example: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111
  type: keyword
vulnerability.report_id:
  description: The report or scan identification number.
  example: 20191018.0001
  type: keyword
vulnerability.scanner.vendor:
  description: The name of the vulnerability scanner vendor.
  example: Tenable
  type: keyword
vulnerability.score.base:
  description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

    Base scores cover an assessment for exploitability metrics (attack vector, complexity,
    privileges, and user interaction), impact metrics (confidentiality, integrity,
    and availability), and scope. For example (https://www.first.org/cvss/specification-document)'
  example: 5.5
  type: float
vulnerability.score.environmental:
  description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

    Environmental scores cover an assessment for any modified Base metrics, confidentiality,
    integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)'
  example: 5.5
  type: float
vulnerability.score.temporal:
  description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

    Temporal scores cover an assessment for code maturity, remediation level, and
    confidence. For example (https://www.first.org/cvss/specification-document)'
  type: float
vulnerability.score.version:
  description: 'The National Vulnerability Database (NVD) provides qualitative severity
    rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition
    to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.

    CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization,
    whose mission is to help computer security incident response teams across the
    world. For example (https://nvd.nist.gov/vuln-metrics/cvss)'
  example: 2.0
  type: keyword
vulnerability.severity:
  description: The severity of the vulnerability can help with metrics and internal
    prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  example: Critical
  type: keyword
