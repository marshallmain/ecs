agent:
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:
    ephemeral_id:
      description: 'Ephemeral identifier of this agent (if one exists).

        This id normally changes across restarts, but `agent.id` does not.'
      example: 8a4f500f
      flat_name: agent.ephemeral_id
      level: extended
      name: ephemeral_id
      short: Ephemeral identifier of this agent.
      type: keyword
    id:
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      example: 8a4f500d
      flat_name: agent.id
      level: core
      name: id
      short: Unique identifier of this agent.
      type: keyword
    name:
      description: 'Custom name of the agent.

        This is a name that can be given to an agent. This can be helpful if for example
        two Filebeat instances are running on the same host but a human readable separation
        is needed on which Filebeat instance data is coming from.

        If no name is given, the name is often left empty.'
      example: foo
      flat_name: agent.name
      level: core
      name: name
      short: Custom name of the agent.
      type: keyword
    type:
      description: 'Type of the agent.

        The agent type stays always the same and should be given by the agent used.
        In case of Filebeat the agent would always be Filebeat also if two Filebeat
        instances are run on the same machine.'
      example: filebeat
      flat_name: agent.type
      level: core
      name: type
      short: Type of the agent.
      type: keyword
    version:
      description: Version of the agent.
      example: 6.0.0-rc2
      flat_name: agent.version
      level: core
      name: version
      short: Version of the agent.
      type: keyword
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
    For APM, it is the agent running in the app/service. The agent information does
    not change if data is sent through queuing systems like Kafka, Redis, or processing
    systems such as Logstash or APM Server.'
  group: 2
  name: agent
  prefix: agent.
  short: Fields about the monitoring agent.
  title: Agent
  type: group
as:
  description: An autonomous system (AS) is a collection of connected Internet Protocol
    (IP) routing prefixes under the control of one or more network operators on behalf
    of a single administrative entity or domain that presents a common, clearly defined
    routing policy to the internet.
  fields:
    number:
      description: Unique number allocated to the autonomous system. The autonomous
        system number (ASN) uniquely identifies each network on the Internet.
      example: 15169
      flat_name: as.number
      level: extended
      name: number
      short: Unique number allocated to the autonomous system. The autonomous system
        number (ASN) uniquely identifies each network on the Internet.
      type: long
    organization.name:
      description: Organization name.
      example: Google LLC
      flat_name: as.organization.name
      level: extended
      multi_fields:
      - flat_name: as.organization.name.text
        name: text
        norms: false
        type: text
      name: organization.name
      short: Organization name.
      type: keyword
  group: 2
  name: as
  prefix: as.
  reusable:
    expected:
    - client
    - destination
    - server
    - source
    top_level: false
  short: Fields describing an Autonomous System (Internet routing prefix).
  title: Autonomous System
  type: group
authenticode:
  description: TODO
  fields:
    cert_signer.issuer_name:
      description: TODO
      flat_name: authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      short: TODO
      type: keyword
    cert_signer.serial_number:
      description: TODO
      flat_name: authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      short: TODO
      type: keyword
    cert_signer.subject_name:
      description: TODO
      flat_name: authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      short: TODO
      type: keyword
    cert_signer.timestamp_string:
      description: TODO
      flat_name: authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      short: TODO
      type: keyword
    cert_timestamp.issuer_name:
      description: TODO
      flat_name: authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      short: TODO
      type: keyword
    cert_timestamp.serial_number:
      description: TODO
      flat_name: authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      short: TODO
      type: keyword
    cert_timestamp.subject_name:
      description: TODO
      flat_name: authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      short: TODO
      type: keyword
    cert_timestamp.timestamp_string:
      description: TODO
      flat_name: authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      short: TODO
      type: keyword
    more_info_link:
      description: TODO
      flat_name: authenticode.more_info_link
      level: custom
      name: more_info_link
      short: TODO
      type: keyword
    program_name:
      description: TODO
      flat_name: authenticode.program_name
      level: custom
      name: program_name
      short: TODO
      type: keyword
    publisher_link:
      description: TODO
      flat_name: authenticode.publisher_link
      level: custom
      name: publisher_link
      short: TODO
      type: keyword
  group: 2
  name: authenticode
  prefix: authenticode.
  reusable:
    expected:
    - module_info
    - process.pe_info
    - process
    top_level: false
  short: TODO
  title: Authenticode
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      required: true
      short: Date/time when the event originated.
      type: date
    labels:
      description: 'Custom key/value pairs.

        Can be used to add meta information to events. Should not contain nested objects.
        All values are stored as keyword.

        Example: `docker` and `k8s` labels.'
      example:
        application: foo-bar
        env: production
      flat_name: labels
      level: core
      name: labels
      object_type: keyword
      short: Custom key/value pairs.
      type: object
    message:
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      norms: false
      short: Log message optimized for viewing in a log viewer.
      type: text
    tags:
      description: List of keywords used to tag each event.
      example: '["production", "env2"]'
      flat_name: tags
      level: core
      name: tags
      short: List of keywords used to tag each event.
      type: keyword
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
client:
  description: 'A client is defined as the initiator of a network connection for events
    regarding sessions, connections, or bidirectional flow records.

    For TCP events, the client is the initiator of the TCP connection that sends the
    SYN packet(s). For other protocols, the client is generally the initiator or requestor
    in the network transaction. Some systems use the term "originator" to refer the
    client in TCP connections. The client fields describe details about the system
    acting as the client in the network event. Client fields are usually populated
    in conjunction with server fields. Client fields are generally not populated for
    packet-level events.

    Client / server representations can add semantic context to an exchange, which
    is helpful to visualize the data in certain situations. If your context falls
    in that category, you should still ensure that source and destination are filled
    appropriately.'
  fields:
    address:
      description: 'Some event client addresses are defined ambiguously. The event
        will sometimes list an IP, a domain or a unix socket.  You should always store
        the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      flat_name: client.address
      level: extended
      name: address
      short: Client network address.
      type: keyword
    as.number:
      description: Unique number allocated to the autonomous system. The autonomous
        system number (ASN) uniquely identifies each network on the Internet.
      example: 15169
      flat_name: client.as.number
      level: extended
      name: number
      original_fieldset: as
      short: Unique number allocated to the autonomous system. The autonomous system
        number (ASN) uniquely identifies each network on the Internet.
      type: long
    as.organization.name:
      description: Organization name.
      example: Google LLC
      flat_name: client.as.organization.name
      level: extended
      multi_fields:
      - flat_name: client.as.organization.name.text
        name: text
        norms: false
        type: text
      name: organization.name
      original_fieldset: as
      short: Organization name.
      type: keyword
    bytes:
      description: Bytes sent from the client to the server.
      example: 184
      flat_name: client.bytes
      format: bytes
      level: core
      name: bytes
      short: Bytes sent from the client to the server.
      type: long
    domain:
      description: Client domain.
      flat_name: client.domain
      level: core
      name: domain
      short: Client domain.
      type: keyword
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: client.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: client.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: client.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: client.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: client.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: client.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: client.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: client.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    ip:
      description: 'IP address of the client.

        Can be one or multiple IPv4 or IPv6 addresses.'
      flat_name: client.ip
      level: core
      name: ip
      short: IP address of the client.
      type: ip
    mac:
      description: MAC address of the client.
      flat_name: client.mac
      level: core
      name: mac
      short: MAC address of the client.
      type: keyword
    nat.ip:
      description: 'Translated IP of source based NAT sessions (e.g. internal client
        to internet).

        Typically connections traversing load balancers, firewalls, or routers.'
      flat_name: client.nat.ip
      level: extended
      name: nat.ip
      short: Client NAT ip address
      type: ip
    nat.port:
      description: 'Translated port of source based NAT sessions (e.g. internal client
        to internet).

        Typically connections traversing load balancers, firewalls, or routers.'
      flat_name: client.nat.port
      format: string
      level: extended
      name: nat.port
      short: Client NAT port
      type: long
    packets:
      description: Packets sent from the client to the server.
      example: 12
      flat_name: client.packets
      level: core
      name: packets
      short: Packets sent from the client to the server.
      type: long
    port:
      description: Port of the client.
      flat_name: client.port
      format: string
      level: core
      name: port
      short: Port of the client.
      type: long
    registered_domain:
      description: 'The highest registered client domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: client.registered_domain
      level: extended
      name: registered_domain
      short: The highest registered client domain, stripped of the subdomain.
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: client.top_level_domain
      level: extended
      name: top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: client.user.domain
      level: extended
      name: domain
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      description: User email address.
      flat_name: client.user.email
      level: extended
      name: email
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: client.user.full_name
      level: extended
      multi_fields:
      - flat_name: client.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: client.user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: client.user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      flat_name: client.user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: client.user.hash
      level: extended
      name: hash
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      description: One or multiple unique identifiers of the user.
      flat_name: client.user.id
      level: core
      name: id
      original_fieldset: user
      short: One or multiple unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      example: albert
      flat_name: client.user.name
      level: core
      multi_fields:
      - flat_name: client.user.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: client
  nestings:
  - as
  - geo
  - user
  prefix: client.
  short: Fields about the client side of a network connection, used with server.
  title: Client
  type: group
cloud:
  description: Fields related to the cloud or infrastructure the events are coming
    from.
  fields:
    account.id:
      description: 'The cloud account or organization id used to identify different
        entities in a multi-tenant environment.

        Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
      example: 666777888999
      flat_name: cloud.account.id
      level: extended
      name: account.id
      short: The cloud account or organization id.
      type: keyword
    availability_zone:
      description: Availability zone in which this host is running.
      example: us-east-1c
      flat_name: cloud.availability_zone
      level: extended
      name: availability_zone
      short: Availability zone in which this host is running.
      type: keyword
    instance.id:
      description: Instance ID of the host machine.
      example: i-1234567890abcdef0
      flat_name: cloud.instance.id
      level: extended
      name: instance.id
      short: Instance ID of the host machine.
      type: keyword
    instance.name:
      description: Instance name of the host machine.
      flat_name: cloud.instance.name
      level: extended
      name: instance.name
      short: Instance name of the host machine.
      type: keyword
    machine.type:
      description: Machine type of the host machine.
      example: t2.medium
      flat_name: cloud.machine.type
      level: extended
      name: machine.type
      short: Machine type of the host machine.
      type: keyword
    provider:
      description: Name of the cloud provider. Example values are aws, azure, gcp,
        or digitalocean.
      example: aws
      flat_name: cloud.provider
      level: extended
      name: provider
      short: Name of the cloud provider.
      type: keyword
    region:
      description: Region in which this host is running.
      example: us-east-1
      flat_name: cloud.region
      level: extended
      name: region
      short: Region in which this host is running.
      type: keyword
  footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data from
    its host, the cloud info contains the data about this machine. If Metricbeat runs
    on a remote machine outside the cloud and fetches data from a service running
    in the cloud, the field contains cloud data from the machine the service is running
    on.'
  group: 2
  name: cloud
  prefix: cloud.
  short: Fields about the cloud resource.
  title: Cloud
  type: group
container:
  description: 'Container fields are used for meta information about the specific
    container that is the source of information.

    These fields help correlate data based containers from any runtime.'
  fields:
    id:
      description: Unique container id.
      flat_name: container.id
      level: core
      name: id
      short: Unique container id.
      type: keyword
    image.name:
      description: Name of the image the container was built on.
      flat_name: container.image.name
      level: extended
      name: image.name
      short: Name of the image the container was built on.
      type: keyword
    image.tag:
      description: Container image tag.
      flat_name: container.image.tag
      level: extended
      name: image.tag
      short: Container image tag.
      type: keyword
    labels:
      description: Image labels.
      flat_name: container.labels
      level: extended
      name: labels
      object_type: keyword
      short: Image labels.
      type: object
    name:
      description: Container name.
      flat_name: container.name
      level: extended
      name: name
      short: Container name.
      type: keyword
    runtime:
      description: Runtime managing this container.
      example: docker
      flat_name: container.runtime
      level: extended
      name: runtime
      short: Runtime managing this container.
      type: keyword
  group: 2
  name: container
  prefix: container.
  short: Fields describing the container that generated this event.
  title: Container
  type: group
destination:
  description: 'Destination fields describe details about the destination of a packet/event.

    Destination fields are usually populated in conjunction with source fields.'
  fields:
    address:
      description: 'Some event destination addresses are defined ambiguously. The
        event will sometimes list an IP, a domain or a unix socket.  You should always
        store the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      flat_name: destination.address
      level: extended
      name: address
      short: Destination network address.
      type: keyword
    as.number:
      description: Unique number allocated to the autonomous system. The autonomous
        system number (ASN) uniquely identifies each network on the Internet.
      example: 15169
      flat_name: destination.as.number
      level: extended
      name: number
      original_fieldset: as
      short: Unique number allocated to the autonomous system. The autonomous system
        number (ASN) uniquely identifies each network on the Internet.
      type: long
    as.organization.name:
      description: Organization name.
      example: Google LLC
      flat_name: destination.as.organization.name
      level: extended
      multi_fields:
      - flat_name: destination.as.organization.name.text
        name: text
        norms: false
        type: text
      name: organization.name
      original_fieldset: as
      short: Organization name.
      type: keyword
    bytes:
      description: Bytes sent from the destination to the source.
      example: 184
      flat_name: destination.bytes
      format: bytes
      level: core
      name: bytes
      short: Bytes sent from the destination to the source.
      type: long
    domain:
      description: Destination domain.
      flat_name: destination.domain
      level: core
      name: domain
      short: Destination domain.
      type: keyword
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: destination.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: destination.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: destination.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: destination.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: destination.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: destination.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: destination.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: destination.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    ip:
      description: 'IP address of the destination.

        Can be one or multiple IPv4 or IPv6 addresses.'
      flat_name: destination.ip
      level: core
      name: ip
      short: IP address of the destination.
      type: ip
    mac:
      description: MAC address of the destination.
      flat_name: destination.mac
      level: core
      name: mac
      short: MAC address of the destination.
      type: keyword
    nat.ip:
      description: 'Translated ip of destination based NAT sessions (e.g. internet
        to private DMZ)

        Typically used with load balancers, firewalls, or routers.'
      flat_name: destination.nat.ip
      level: extended
      name: nat.ip
      short: Destination NAT ip
      type: ip
    nat.port:
      description: 'Port the source session is translated to by NAT Device.

        Typically used with load balancers, firewalls, or routers.'
      flat_name: destination.nat.port
      format: string
      level: extended
      name: nat.port
      short: Destination NAT Port
      type: long
    packets:
      description: Packets sent from the destination to the source.
      example: 12
      flat_name: destination.packets
      level: core
      name: packets
      short: Packets sent from the destination to the source.
      type: long
    port:
      description: Port of the destination.
      flat_name: destination.port
      format: string
      level: core
      name: port
      short: Port of the destination.
      type: long
    registered_domain:
      description: 'The highest registered destination domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: destination.registered_domain
      level: extended
      name: registered_domain
      short: The highest registered destination domain, stripped of the subdomain.
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: destination.top_level_domain
      level: extended
      name: top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: destination.user.domain
      level: extended
      name: domain
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      description: User email address.
      flat_name: destination.user.email
      level: extended
      name: email
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: destination.user.full_name
      level: extended
      multi_fields:
      - flat_name: destination.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: destination.user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: destination.user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      flat_name: destination.user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: destination.user.hash
      level: extended
      name: hash
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      description: One or multiple unique identifiers of the user.
      flat_name: destination.user.id
      level: core
      name: id
      original_fieldset: user
      short: One or multiple unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      example: albert
      flat_name: destination.user.name
      level: core
      multi_fields:
      - flat_name: destination.user.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: destination
  nestings:
  - as
  - geo
  - user
  prefix: destination.
  short: Fields about the destination side of a network connection, used with source.
  title: Destination
  type: group
dns:
  description: 'Fields describing DNS queries and answers.

    DNS events should either represent a single DNS query prior to getting answers
    (`dns.type:query`) or they should represent a full exchange and contain the query
    details as well as all of the answers that were provided for this query (`dns.type:answer`).'
  fields:
    answers:
      description: 'An array containing an object for each answer section returned
        by the server.

        The main keys that should be present in these objects are defined by ECS.
        Records that have more information may contain more keys than what ECS defines.

        Not all DNS data sources give all details about DNS answers. At minimum, answer
        objects must contain the `data` key. If more information is available, map
        as much of it to ECS as possible, and add any additional fields to the answer
        objects as custom fields.'
      flat_name: dns.answers
      level: extended
      name: answers
      object_type: keyword
      short: Array of DNS answers.
      type: object
    answers.class:
      description: The class of DNS data contained in this resource record.
      example: IN
      flat_name: dns.answers.class
      level: extended
      name: answers.class
      short: The class of DNS data contained in this resource record.
      type: keyword
    answers.data:
      description: 'The data describing the resource.

        The meaning of this data depends on the type and class of the resource record.'
      example: 10.10.10.10
      flat_name: dns.answers.data
      level: extended
      name: answers.data
      short: The data describing the resource.
      type: keyword
    answers.name:
      description: 'The domain name to which this resource record pertains.

        If a chain of CNAME is being resolved, each answer''s `name` should be the
        one that corresponds with the answer''s `data`. It should not simply be the
        original `question.name` repeated.'
      example: www.google.com
      flat_name: dns.answers.name
      level: extended
      name: answers.name
      short: The domain name to which this resource record pertains.
      type: keyword
    answers.ttl:
      description: The time interval in seconds that this resource record may be cached
        before it should be discarded. Zero values mean that the data should not be
        cached.
      example: 180
      flat_name: dns.answers.ttl
      level: extended
      name: answers.ttl
      short: The time interval in seconds that this resource record may be cached
        before it should be discarded. Zero values mean that the data should not be
        cached.
      type: long
    answers.type:
      description: The type of data contained in this resource record.
      example: CNAME
      flat_name: dns.answers.type
      level: extended
      name: answers.type
      short: The type of data contained in this resource record.
      type: keyword
    header_flags:
      description: 'Array of 2 letter DNS header flags.

        Expected values are: AA, TC, RD, RA, AD, CD, DO.'
      example:
      - RD
      - RA
      flat_name: dns.header_flags
      level: extended
      name: header_flags
      short: Array of DNS header flags.
      type: keyword
    id:
      description: The DNS packet identifier assigned by the program that generated
        the query. The identifier is copied to the response.
      example: 62111
      flat_name: dns.id
      level: extended
      name: id
      short: The DNS packet identifier assigned by the program that generated the
        query. The identifier is copied to the response.
      type: keyword
    op_code:
      description: The DNS operation code that specifies the kind of query in the
        message. This value is set by the originator of a query and copied into the
        response.
      example: QUERY
      flat_name: dns.op_code
      level: extended
      name: op_code
      short: The DNS operation code that specifies the kind of query in the message.
        This value is set by the originator of a query and copied into the response.
      type: keyword
    question.class:
      description: The class of records being queried.
      example: IN
      flat_name: dns.question.class
      level: extended
      name: question.class
      short: The class of records being queried.
      type: keyword
    question.name:
      description: 'The name being queried.

        If the name field contains non-printable characters (below 32 or above 126),
        those characters should be represented as escaped base 10 integers (\DDD).
        Back slashes and quotes should be escaped. Tabs, carriage returns, and line
        feeds should be converted to \t, \r, and \n respectively.'
      example: www.google.com
      flat_name: dns.question.name
      level: extended
      name: question.name
      short: The name being queried.
      type: keyword
    question.registered_domain:
      description: 'The highest registered domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: dns.question.registered_domain
      level: extended
      name: question.registered_domain
      short: The highest registered domain, stripped of the subdomain.
      type: keyword
    question.subdomain:
      description: 'The subdomain is all of the labels under the registered_domain.

        If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
        the subdomain field should contain "sub2.sub1", with no trailing period.'
      example: www
      flat_name: dns.question.subdomain
      level: extended
      name: question.subdomain
      short: The subdomain of the domain.
      type: keyword
    question.top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: dns.question.top_level_domain
      level: extended
      name: question.top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    question.type:
      description: The type of record being queried.
      example: AAAA
      flat_name: dns.question.type
      level: extended
      name: question.type
      short: The type of record being queried.
      type: keyword
    resolved_ip:
      description: 'Array containing all IPs seen in `answers.data`.

        The `answers` array can be difficult to use, because of the variety of data
        formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
        makes it possible to index them as IP addresses, and makes them easier to
        visualize and query for.'
      example:
      - 10.10.10.10
      - 10.10.10.11
      flat_name: dns.resolved_ip
      level: extended
      name: resolved_ip
      short: Array containing all IPs seen in answers.data
      type: ip
    response_code:
      description: The DNS response code.
      example: NOERROR
      flat_name: dns.response_code
      level: extended
      name: response_code
      short: The DNS response code.
      type: keyword
    type:
      description: 'The type of DNS event captured, query or answer.

        If your source of DNS events only gives you DNS queries, you should only create
        dns events of type `dns.type:query`.

        If your source of DNS events gives you answers as well, you should create
        one event per query (optionally as soon as the query is seen). And a second
        event containing all query details as well as an array of answers.'
      example: answer
      flat_name: dns.type
      level: extended
      name: type
      short: The type of DNS event captured, query or answer.
      type: keyword
  group: 2
  name: dns
  prefix: dns.
  short: Fields describing DNS queries and answers.
  title: DNS
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      example: 1.0.0
      flat_name: ecs.version
      level: core
      name: version
      required: true
      short: ECS version this event conforms to.
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
error:
  description: 'These fields can represent errors of any kind.

    Use them for errors that happen while fetching events or in cases where the event
    itself contains an error.'
  fields:
    code:
      description: Error code describing the error.
      flat_name: error.code
      level: core
      name: code
      short: Error code describing the error.
      type: keyword
    id:
      description: Unique identifier for the error.
      flat_name: error.id
      level: core
      name: id
      short: Unique identifier for the error.
      type: keyword
    message:
      description: Error message.
      flat_name: error.message
      level: core
      name: message
      norms: false
      short: Error message.
      type: text
    stack_trace:
      description: The stack trace of this error in plain text.
      doc_values: false
      flat_name: error.stack_trace
      index: false
      level: extended
      multi_fields:
      - flat_name: error.stack_trace.text
        name: text
        norms: false
        type: text
      name: stack_trace
      short: The stack trace of this error in plain text.
      type: keyword
    type:
      description: The type of the error, for example the class name of the exception.
      example: java.lang.NullPointerException
      flat_name: error.type
      level: extended
      name: type
      short: The type of the error, for example the class name of the exception.
      type: keyword
  group: 2
  name: error
  prefix: error.
  short: Fields about errors of any kind.
  title: Error
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:
    action:
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      example: user-password-change
      flat_name: event.action
      level: core
      name: action
      short: The action captured by the event.
      type: keyword
    category:
      allowed_values:
      - description: 'Events in this category are related to the challenge and response
          process in which credentials are supplied and verified to allow the creation
          of a session. Common sources for these logs are Windows event logs and ssh
          logs. Visualize and analyze events in this category to look for failed logins,
          and other authentication-related activity.

          '
        expected_event_types:
        - start
        - end
        - info
        name: authentication
      - description: 'The database category denotes events and metrics relating to
          a data storage and retrieval system. Note that use of this category is not
          limited to relational database systems. Examples include event logs from
          MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize
          and analyze database activity such as accesses and changes.

          '
        expected_event_types:
        - access
        - change
        - info
        - error
        name: database
      - description: 'Events in the driver category have to do with operating system
          device drivers and similar software entities such as Windows drivers, kernel
          extensions, kernel modules, etc.

          Use events and metrics in this category to visualize and analyze driver-related
          activity and status on hosts.

          '
        expected_event_types:
        - change
        - end
        - info
        - start
        name: driver
      - description: 'Relating to a set of information that has been created on, or
          has existed on a filesystem. Use this category of events to visualize and
          analyze the creation, access, and deletions of files. Events in this category
          can come from both host-based and network-based sources. An example source
          of a network-based detection of a file transfer would be the Zeek file.log.

          '
        expected_event_types:
        - change
        - creation
        - deletion
        - info
        name: file
      - description: 'Use this category to visualize and analyze information such
          as host inventory or host lifecycle events.

          Most of the events in this category can usually be observed from the outside,
          such as from a hypervisor or a control plane''s point of view. Some can
          also be seen from within, such as "start" or "end".

          Note that this category is for information about hosts themselves; it is
          not meant to capture activity "happening on a host".

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: host
      - description: 'Relating to intrusion detections from IDS/IPS systems and functions,
          both network and host-based. Use this category to visualize and analyze
          intrusion detection alerts from systems such as Snort, Suricata, and Palo
          Alto threat detections.

          '
        expected_event_types:
        - info
        name: intrusion_detection
      - description: 'Malware detection events and alerts. Use this category to visualize
          and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
          Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS
          systems such as Suricata, or other sources of malware-related events such
          as Palo Alto Networks threat logs and Wildfire logs.

          '
        expected_event_types:
        - info
        name: malware
      - description: 'Relating to software packages installed on hosts. Use this category
          to visualize and analyze inventory of software installed on various hosts,
          or to determine host vulnerability in the absence of vulnerability scan
          data.

          '
        expected_event_types:
        - access
        - change
        - deletion
        - info
        - installation
        - start
        name: package
      - description: 'Use this category of events to visualize and analyze process-specific
          information such as lifecycle events or process ancestry.

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: process
      - description: 'Relating to web server access. Use this category to create a
          dashboard of web server/proxy activity from apache, IIS, nginx web servers,
          etc. Note: events from network observers such as Zeek http log may also
          be included in this category.

          '
        expected_event_types:
        - access
        - error
        - info
        name: web
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      example: authentication
      flat_name: event.category
      level: core
      name: category
      short: Event category. The second categorization field in the hierarchy.
      type: keyword
    code:
      description: 'Identification code for this event, if one exists.

        Some event sources use event codes to identify messages unambiguously, regardless
        of message language or wording adjustments over time. An example of this is
        the Windows Event ID.'
      example: 4648
      flat_name: event.code
      level: extended
      name: code
      short: Identification code for this event.
      type: keyword
    created:
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
      flat_name: event.created
      level: core
      name: created
      short: Time when the event was first read by an agent or by your pipeline.
      type: date
    dataset:
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access
        log, error log), the dataset is used to specify which one the event comes
        from.

        It''s recommended but not required to start the dataset name with the module
        name, followed by a dot, then the dataset name.'
      example: apache.access
      flat_name: event.dataset
      level: core
      name: dataset
      short: Name of the dataset.
      type: keyword
    duration:
      description: 'Duration of the event in nanoseconds.

        If event.start and event.end are known this value should be the difference
        between the end and start time.'
      flat_name: event.duration
      format: duration
      input_format: nanoseconds
      level: core
      name: duration
      output_format: asMilliseconds
      output_precision: 1
      short: Duration of the event in nanoseconds.
      type: long
    end:
      description: event.end contains the date when the event ended or when the activity
        was last observed.
      flat_name: event.end
      level: extended
      name: end
      short: event.end contains the date when the event ended or when the activity
        was last observed.
      type: date
    hash:
      description: Hash (perhaps logstash fingerprint) of raw field to be able to
        demonstrate log integrity.
      example: 123456789012345678901234567890ABCD
      flat_name: event.hash
      level: extended
      name: hash
      short: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
        log integrity.
      type: keyword
    id:
      description: Unique ID to describe the event.
      example: 8a4f500d
      flat_name: event.id
      level: core
      name: id
      short: Unique ID to describe the event.
      type: keyword
    ingested:
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s
        also different from `event.created`, which is meant to capture the first time
        an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically
        look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      flat_name: event.ingested
      level: core
      name: ingested
      short: Timestamp when an event arrived in the central data store.
      type: date
    kind:
      allowed_values:
      - description: 'This value indicates an event that describes an alert or notable
          event, triggered by a detection rule.

          `event.kind:alert` is often populated for events coming from firewalls,
          intrusion detection systems, endpoint detection and response systems, and
          so on.

          '
        name: alert
      - description: 'This value is the most general and most common value for this
          field. It is used to represent events that indicate that something happened.

          '
        name: event
      - description: 'This value is used to indicate that this event that a numeric
          measurement was taken at given point in time.

          Examples include CPU utilization, memory usage, or a vulnerability scan
          result.

          Metric events are often collected on a predictable frequency, such as once
          every few seconds, or once a minute.

          '
        name: metric
      - description: 'This value is similar to metric, except that the entity being
          measured does not provide a numeric metric value, but rather one of a fixed
          set of conditions or states. For example a periodic event reporting a "fin_wait"
          state of a TCP connection on a host might use `event.type:state`.

          '
        name: state
      - description: 'This value indicates that an error occurred during the ingestion
          of this event, and that event data may be missing, inconsistent, or incorrect.
          `event.kind:pipeline_error` is often associated with parsing errors.

          '
        name: pipeline_error
      - description: 'This value is used by the Elastic SIEM app to denote an Elasticsearch
          document that was created by a SIEM detection engine rule.

          A signal will typically trigger a notification that something meaningful
          happened and should be investigated.

          Usage of this value is reserved, and pipelines should not populate `event.kind`
          with the value "signal".

          '
        name: signal
      description: 'This is one of four ECS Categorization Fields, and indicates the
        highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the
        event contains, without being specific to the contents of the event. For example,
        values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should
        be handled. They may warrant different retention, different access control,
        it may also help understand whether the data coming in at a regular interval
        or not.'
      example: alert
      flat_name: event.kind
      level: core
      name: kind
      short: The kind of the event. The highest categorization field in the hierarchy.
      type: keyword
    module:
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      example: apache
      flat_name: event.module
      level: core
      name: module
      short: Name of the module this data is coming from.
      type: keyword
    original:
      description: 'Raw text message of entire event. Used to demonstrate log integrity.

        This field is not indexed and doc_values are disabled. It cannot be searched,
        but it can be retrieved from `_source`.'
      doc_values: false
      example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;
        worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
      flat_name: event.original
      index: false
      level: core
      name: original
      short: Raw text message of entire event.
      type: keyword
    outcome:
      allowed_values:
      - description: 'Indicates that this event describes a failed result. A common
          example is `event.category:file AND event.type:access AND event.outcome:failure`
          to indicate that a file access was attempted, but was not successful.

          '
        name: failure
      - description: 'Indicates that this event describes a successful result.  A
          common example is `event.category:file AND event.type:create AND event.outcome:success`
          to indicate that a file was successfully created.

          '
        name: success
      - description: 'Indicates that this event describes only an attempt for which
          the result is unknown. For example, if the event contains information only
          about a request in an entity transaction that usually results in a response,
          populating `event.outcome:unknown` is appropriate.

          '
        name: unknown
      description: 'This is one of four ECS Categorization Fields, and indicates the
        lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represent a success or a
        failure. Note that not all events will have an associated outcome. For example,
        this field is generally not populated for metric events or events with `event.type:info`.'
      example: success
      flat_name: event.outcome
      level: core
      name: outcome
      short: The outcome of the event. The lowest categorization field in the hierarchy.
      type: keyword
    provider:
      description: 'Source of the event.

        Event transports such as Syslog or the Windows Event Log typically mention
        the source of an event. It can be the name of the software that generated
        the event (e.g. Sysmon, httpd), or of a subsystem of the operating system
        (kernel, Microsoft-Windows-Security-Auditing).'
      example: kernel
      flat_name: event.provider
      level: extended
      name: provider
      short: Source of the event.
      type: keyword
    risk_score:
      description: Risk score or priority of the event (e.g. security solutions).
        Use your system's original value here.
      flat_name: event.risk_score
      level: core
      name: risk_score
      short: Risk score or priority of the event (e.g. security solutions). Use your
        system's original value here.
      type: float
    risk_score_norm:
      description: 'Normalized risk score or priority of the event, on a scale of
        0 to 100.

        This is mainly useful if you use more than one system that assigns risk scores,
        and you want to see a normalized value across all systems.'
      flat_name: event.risk_score_norm
      level: extended
      name: risk_score_norm
      short: Normalized risk score or priority of the event (0-100).
      type: float
    sequence:
      description: 'Sequence number of the event.

        The sequence number is a value published by some event sources, to make the
        exact ordering of events unambiguous, regardless of the timestamp precision.'
      flat_name: event.sequence
      format: string
      level: extended
      name: sequence
      short: Sequence number of the event.
      type: long
    severity:
      description: 'The numeric severity of the event according to your event source.

        What the different severity values mean can be different between sources and
        use cases. It''s up to the implementer to make sure severities are consistent
        across events from the same source.

        The Syslog severity belongs in `log.syslog.severity.code`. `event.severity`
        is meant to represent the severity according to the event source (e.g. firewall,
        IDS). If the event source does not publish its own severity, you may optionally
        copy the `log.syslog.severity.code` to `event.severity`.'
      example: 7
      flat_name: event.severity
      format: string
      level: core
      name: severity
      short: Numeric severity of the event.
      type: long
    start:
      description: event.start contains the date when the event started or when the
        activity was first observed.
      flat_name: event.start
      level: extended
      name: start
      short: event.start contains the date when the event started or when the activity
        was first observed.
      type: date
    timezone:
      description: 'This field should be populated when the event''s timestamp does
        not include timezone information already (e.g. default Syslog timestamps).
        It''s optional otherwise.

        Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),
        abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").'
      flat_name: event.timezone
      level: extended
      name: timezone
      short: Event time zone.
      type: keyword
    type:
      allowed_values:
      - description: 'The access event type is used for the subset of events within
          a category that indicate that something was accessed. Common examples include
          `event.category:database AND event.type:access`, or `event.category:file
          AND event.type:access`. Note for file access, both directory listings and
          file opens should be included in this subcategory. You can further distinguish
          access operations using the ECS `event.action` field.

          '
        name: access
      - description: 'The change event type is used for the subset of events within
          a category that indicate that something has changed. If semantics best describe
          an event as modified, then include them in this subcategory. Common examples
          include `event.category:process AND event.type:change`, and `event.category:file
          AND event.type:change`. You can further distinguish change operations using
          the ECS `event.action` field.

          '
        name: change
      - description: 'The "creation" event type is used for the subset of events within
          a category that indicate that something was created. A common example is
          `event.category:file AND event.type:creation`.

          '
        name: creation
      - description: 'The deletion event type is used for the subset of events within
          a category that indicate that something was deleted. A common example is
          `event.category:file AND event.type:deletion` to indicate that a file has
          been deleted.

          '
        name: deletion
      - description: 'The end event type is used for the subset of events within a
          category that indicate something has ended. A common example is `event.category:process
          AND event.type:end`.

          '
        name: end
      - description: 'The error event type is used for the subset of events within
          a category that indicate or describe an error. A common example is `event.category:database
          AND event.type:error`. Note that pipeline errors that occur during the event
          ingestion process should not use this `event.type` value. Instead, they
          should use `event.kind:pipeline_error`.

          '
        name: error
      - description: 'The info event type is used for the subset of events within
          a category that indicate that they are purely informational, and don''t
          report a state change, or any type of action. For example, an initial run
          of a file integrity monitoring system (FIM), where an agent reports all
          files under management, would fall into the "info" subcategory. Similarly,
          an event containing a dump of all currently running processes (as opposed
          to reporting that a process started/ended) would fall into the "info" subcategory.
          An additional common examples is `event.category:intrusion_detection AND
          event.type:info`.

          '
        name: info
      - description: 'The installation event type is used for the subset of events
          within a category that indicate that something was installed. A common example
          is `event.category:package` AND `event.type:installation`.

          '
        name: installation
      - description: 'The start event type is used for the subset of events within
          a category that indicate something has started. A common example is `event.category:process
          AND event.type:start`.

          '
        name: start
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      flat_name: event.type
      level: core
      name: type
      short: Event type. The third categorization field in the hierarchy.
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
file:
  description: 'A file is defined as a set of information that has been created on,
    or has existed on a filesystem.

    File objects can be associated with host events, network events, and/or file events
    (e.g., those produced by File Integrity Monitoring [FIM] products or services).
    File fields provide details about the affected file associated with the event
    or metric.'
  fields:
    accessed:
      description: 'Last time the file was accessed.

        Note that not all filesystems keep track of access time.'
      flat_name: file.accessed
      level: extended
      name: accessed
      short: Last time the file was accessed.
      type: date
    attributes:
      description: 'Array of file attributes.

        Attributes names will vary by platform. Here''s a non-exhaustive list of values
        that are expected in this field: archive, compressed, directory, encrypted,
        execute, hidden, read, readonly, system, write.'
      example: '["readonly", "system"]'
      flat_name: file.attributes
      level: extended
      name: attributes
      short: Array of file attributes.
      type: keyword
    created:
      description: 'File creation time.

        Note that not all filesystems store the creation time.'
      flat_name: file.created
      level: extended
      name: created
      short: File creation time.
      type: date
    ctime:
      description: 'Last time the file attributes or metadata changed.

        Note that changes to the file content will update `mtime`. This implies `ctime`
        will be adjusted at the same time, since `mtime` is an attribute of the file.'
      flat_name: file.ctime
      level: extended
      name: ctime
      short: Last time the file attributes or metadata changed.
      type: date
    device:
      description: Device that is the source of the file.
      example: sda
      flat_name: file.device
      level: extended
      name: device
      short: Device that is the source of the file.
      type: keyword
    directory:
      description: Directory where the file is located. It should include the drive
        letter, when appropriate.
      example: /home/alice
      flat_name: file.directory
      level: extended
      name: directory
      short: Directory where the file is located.
      type: keyword
    drive_letter:
      description: 'Drive letter where the file is located. This field is only relevant
        on Windows.

        The value should be uppercase, and not include the colon.'
      example: C
      flat_name: file.drive_letter
      ignore_above: 1
      level: extended
      name: drive_letter
      short: Drive letter where the file is located.
      type: keyword
    extension:
      description: File extension.
      example: png
      flat_name: file.extension
      level: extended
      name: extension
      short: File extension.
      type: keyword
    gid:
      description: Primary group ID (GID) of the file.
      example: '1001'
      flat_name: file.gid
      level: extended
      name: gid
      short: Primary group ID (GID) of the file.
      type: keyword
    group:
      description: Primary group name of the file.
      example: alice
      flat_name: file.group
      level: extended
      name: group
      short: Primary group name of the file.
      type: keyword
    hash.imphash:
      description: Imphash.
      flat_name: file.hash.imphash
      level: extended
      name: imphash
      original_fieldset: hash
      short: Imphash.
      type: keyword
    hash.md5:
      description: MD5 hash.
      flat_name: file.hash.md5
      level: extended
      name: md5
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    hash.sha1:
      description: SHA1 hash.
      flat_name: file.hash.sha1
      level: extended
      name: sha1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    hash.sha256:
      description: SHA256 hash.
      flat_name: file.hash.sha256
      level: extended
      name: sha256
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    hash.sha512:
      description: SHA512 hash.
      flat_name: file.hash.sha512
      level: extended
      name: sha512
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    inode:
      description: Inode representing the file in the filesystem.
      example: '256383'
      flat_name: file.inode
      level: extended
      name: inode
      short: Inode representing the file in the filesystem.
      type: keyword
    mode:
      description: Mode of the file in octal representation.
      example: '0640'
      flat_name: file.mode
      level: extended
      name: mode
      short: Mode of the file in octal representation.
      type: keyword
    mtime:
      description: Last time the file content was modified.
      flat_name: file.mtime
      level: extended
      name: mtime
      short: Last time the file content was modified.
      type: date
    name:
      description: Name of the file including the extension, without the directory.
      example: example.png
      flat_name: file.name
      level: extended
      name: name
      short: Name of the file including the extension, without the directory.
      type: keyword
    owner:
      description: File owner's username.
      example: alice
      flat_name: file.owner
      level: extended
      name: owner
      short: File owner's username.
      type: keyword
    path:
      description: Full path to the file, including the file name. It should include
        the drive letter, when appropriate.
      example: /home/alice/example.png
      flat_name: file.path
      level: extended
      multi_fields:
      - flat_name: file.path.text
        name: text
        norms: false
        type: text
      name: path
      short: Full path to the file, including the file name.
      type: keyword
    size:
      description: 'File size in bytes.

        Only relevant when `file.type` is "file".'
      example: 16384
      flat_name: file.size
      level: extended
      name: size
      short: File size in bytes.
      type: long
    target_path:
      description: Target path for symlinks.
      flat_name: file.target_path
      level: extended
      multi_fields:
      - flat_name: file.target_path.text
        name: text
        norms: false
        type: text
      name: target_path
      short: Target path for symlinks.
      type: keyword
    type:
      description: File type (file, dir, or symlink).
      example: file
      flat_name: file.type
      level: extended
      name: type
      short: File type (file, dir, or symlink).
      type: keyword
    uid:
      description: The user ID (UID) or security identifier (SID) of the file owner.
      example: '1001'
      flat_name: file.uid
      level: extended
      name: uid
      short: The user ID (UID) or security identifier (SID) of the file owner.
      type: keyword
  group: 2
  name: file
  nestings:
  - hash
  prefix: file.
  short: Fields describing files.
  title: File
  type: group
file_classification:
  description: TODO
  fields:
    captured_file:
      description: TODO
      flat_name: file_classification.captured_file
      level: custom
      name: captured_file
      short: TODO
      type: boolean
    entry_modified:
      description: TODO
      flat_name: file_classification.entry_modified
      level: custom
      name: entry_modified
      short: TODO
      type: double
    is_signature_trusted:
      description: TODO
      flat_name: file_classification.is_signature_trusted
      level: custom
      name: is_signature_trusted
      short: TODO
      type: boolean
    macro_details.code_page:
      description: TODO
      flat_name: file_classification.macro_details.code_page
      level: custom
      name: macro_details.code_page
      short: TODO
      type: long
    macro_details.errors:
      description: TODO
      flat_name: file_classification.macro_details.errors
      level: custom
      name: macro_details.errors
      short: TODO
      type: nested
    macro_details.errors.count:
      description: TODO
      flat_name: file_classification.macro_details.errors.count
      level: custom
      name: macro_details.errors.count
      short: TODO
      type: long
    macro_details.errors.error_type:
      description: TODO
      flat_name: file_classification.macro_details.errors.error_type
      level: custom
      name: macro_details.errors.error_type
      short: TODO
      type: keyword
    macro_details.file_extension:
      description: TODO
      flat_name: file_classification.macro_details.file_extension
      level: custom
      name: macro_details.file_extension
      short: TODO
      type: long
    macro_details.macro_collection_hashes.imphash:
      description: TODO
      flat_name: file_classification.macro_details.macro_collection_hashes.imphash
      level: custom
      name: macro_details.macro_collection_hashes.imphash
      short: TODO
      type: keyword
    macro_details.macro_collection_hashes.md5:
      description: TODO
      flat_name: file_classification.macro_details.macro_collection_hashes.md5
      level: custom
      name: macro_details.macro_collection_hashes.md5
      short: TODO
      type: keyword
    macro_details.macro_collection_hashes.sha1:
      description: TODO
      flat_name: file_classification.macro_details.macro_collection_hashes.sha1
      level: custom
      name: macro_details.macro_collection_hashes.sha1
      short: TODO
      type: keyword
    macro_details.macro_collection_hashes.sha256:
      description: TODO
      flat_name: file_classification.macro_details.macro_collection_hashes.sha256
      level: custom
      name: macro_details.macro_collection_hashes.sha256
      short: TODO
      type: keyword
    macro_details.project_file_hashes.imphash:
      description: TODO
      flat_name: file_classification.macro_details.project_file_hashes.imphash
      level: custom
      name: macro_details.project_file_hashes.imphash
      short: TODO
      type: keyword
    macro_details.project_file_hashes.md5:
      description: TODO
      flat_name: file_classification.macro_details.project_file_hashes.md5
      level: custom
      name: macro_details.project_file_hashes.md5
      short: TODO
      type: keyword
    macro_details.project_file_hashes.sha1:
      description: TODO
      flat_name: file_classification.macro_details.project_file_hashes.sha1
      level: custom
      name: macro_details.project_file_hashes.sha1
      short: TODO
      type: keyword
    macro_details.project_file_hashes.sha256:
      description: TODO
      flat_name: file_classification.macro_details.project_file_hashes.sha256
      level: custom
      name: macro_details.project_file_hashes.sha256
      short: TODO
      type: keyword
    macro_details.stream_data:
      description: TODO
      flat_name: file_classification.macro_details.stream_data
      level: custom
      name: macro_details.stream_data
      short: TODO
      type: nested
    macro_details.stream_data.imphash:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.imphash
      level: custom
      name: macro_details.stream_data.imphash
      short: TODO
      type: keyword
    macro_details.stream_data.md5:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.md5
      level: custom
      name: macro_details.stream_data.md5
      short: TODO
      type: keyword
    macro_details.stream_data.name:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.name
      level: custom
      name: macro_details.stream_data.name
      short: TODO
      type: keyword
    macro_details.stream_data.raw_code:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.raw_code
      level: custom
      name: macro_details.stream_data.raw_code
      short: TODO
      type: keyword
    macro_details.stream_data.raw_code_size:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.raw_code_size
      level: custom
      name: macro_details.stream_data.raw_code_size
      short: TODO
      type: keyword
    macro_details.stream_data.sha1:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.sha1
      level: custom
      name: macro_details.stream_data.sha1
      short: TODO
      type: keyword
    macro_details.stream_data.sha256:
      description: TODO
      flat_name: file_classification.macro_details.stream_data.sha256
      level: custom
      name: macro_details.stream_data.sha256
      short: TODO
      type: keyword
    quarantine_result.alert_correlation_id:
      description: TODO
      flat_name: file_classification.quarantine_result.alert_correlation_id
      level: custom
      name: quarantine_result.alert_correlation_id
      short: TODO
      type: keyword
    quarantine_result.quarantine_path:
      description: TODO
      flat_name: file_classification.quarantine_result.quarantine_path
      level: custom
      name: quarantine_result.quarantine_path
      short: TODO
      type: keyword
    signature_signer:
      description: TODO
      flat_name: file_classification.signature_signer
      level: custom
      name: signature_signer
      short: TODO
      type: keyword
    temp_file_path:
      description: TODO
      flat_name: file_classification.temp_file_path
      level: custom
      name: temp_file_path
      short: TODO
      type: keyword
    user_blacklisted:
      description: TODO
      flat_name: file_classification.user_blacklisted
      level: custom
      name: user_blacklisted
      short: TODO
      type: boolean
    yara_hits:
      description: TODO
      flat_name: file_classification.yara_hits
      level: custom
      name: yara_hits
      short: TODO
      type: nested
    yara_hits.identifier:
      description: TODO
      flat_name: file_classification.yara_hits.identifier
      level: custom
      name: yara_hits.identifier
      short: TODO
      type: keyword
    yara_hits.matched_data:
      description: TODO
      flat_name: file_classification.yara_hits.matched_data
      level: custom
      name: yara_hits.matched_data
      short: TODO
      type: keyword
    yara_hits.rule_name:
      description: TODO
      flat_name: file_classification.yara_hits.rule_name
      level: custom
      name: yara_hits.rule_name
      short: TODO
      type: keyword
    yara_hits.version:
      description: TODO
      flat_name: file_classification.yara_hits.version
      level: custom
      name: yara_hits.version
      short: TODO
      type: keyword
  group: 2
  name: file_classification
  prefix: file_classification.
  short: TODO
  title: File Classification
  type: group
geo:
  description: 'Geo fields can carry data about a specific location related to an
    event.

    This geolocation information can be derived from techniques such as Geo IP, or
    be user-supplied.'
  fields:
    city_name:
      description: City name.
      example: Montreal
      flat_name: geo.city_name
      level: core
      name: city_name
      short: City name.
      type: keyword
    continent_name:
      description: Name of the continent.
      example: North America
      flat_name: geo.continent_name
      level: core
      name: continent_name
      short: Name of the continent.
      type: keyword
    country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: geo.country_iso_code
      level: core
      name: country_iso_code
      short: Country ISO code.
      type: keyword
    country_name:
      description: Country name.
      example: Canada
      flat_name: geo.country_name
      level: core
      name: country_name
      short: Country name.
      type: keyword
    location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: geo.location
      level: core
      name: location
      short: Longitude and latitude.
      type: geo_point
    name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: geo.name
      level: extended
      name: name
      short: User-defined description of a location.
      type: keyword
    region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: geo.region_iso_code
      level: core
      name: region_iso_code
      short: Region ISO code.
      type: keyword
    region_name:
      description: Region name.
      example: Quebec
      flat_name: geo.region_name
      level: core
      name: region_name
      short: Region name.
      type: keyword
  group: 2
  name: geo
  prefix: geo.
  reusable:
    expected:
    - client
    - destination
    - observer
    - host
    - server
    - source
    top_level: false
  short: Fields describing a location.
  title: Geo
  type: group
group:
  description: The group fields are meant to represent groups that are relevant to
    the event.
  fields:
    domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: group.domain
      level: extended
      name: domain
      short: Name of the directory the group is a member of.
      type: keyword
    id:
      description: Unique identifier for the group on the system/platform.
      flat_name: group.id
      level: extended
      name: id
      short: Unique identifier for the group on the system/platform.
      type: keyword
    name:
      description: Name of the group.
      flat_name: group.name
      level: extended
      name: name
      short: Name of the group.
      type: keyword
  group: 2
  name: group
  prefix: group.
  reusable:
    expected:
    - user
    top_level: true
  short: User's group relevant to the event.
  title: Group
  type: group
hash:
  description: 'The hash fields represent different hash algorithms and their values.

    Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for
    other hashes by lowercasing the hash algorithm name and using underscore separators
    as appropriate (snake case, e.g. sha3_512).'
  fields:
    imphash:
      description: Imphash.
      flat_name: hash.imphash
      level: extended
      name: imphash
      short: Imphash.
      type: keyword
    md5:
      description: MD5 hash.
      flat_name: hash.md5
      level: extended
      name: md5
      short: MD5 hash.
      type: keyword
    sha1:
      description: SHA1 hash.
      flat_name: hash.sha1
      level: extended
      name: sha1
      short: SHA1 hash.
      type: keyword
    sha256:
      description: SHA256 hash.
      flat_name: hash.sha256
      level: extended
      name: sha256
      short: SHA256 hash.
      type: keyword
    sha512:
      description: SHA512 hash.
      flat_name: hash.sha512
      level: extended
      name: sha512
      short: SHA512 hash.
      type: keyword
  group: 2
  name: hash
  prefix: hash.
  reusable:
    expected:
    - file
    - process
    top_level: false
  short: Hashes, usually file hashes.
  title: Hash
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      description: Operating system architecture.
      example: x86_64
      flat_name: host.architecture
      level: core
      name: architecture
      short: Operating system architecture.
      type: keyword
    domain:
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain
        or NetBIOS domain name. For Linux this could be the domain of the host''s
        LDAP provider.'
      example: CONTOSO
      flat_name: host.domain
      level: extended
      name: domain
      short: Name of the directory the group is a member of.
      type: keyword
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: host.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: host.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: host.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: host.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: host.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: host.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: host.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: host.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    hostname:
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      flat_name: host.hostname
      level: core
      name: hostname
      short: Hostname of the host.
      type: keyword
    id:
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      flat_name: host.id
      level: core
      name: id
      short: Unique host id.
      type: keyword
    ip:
      description: Host ip address.
      flat_name: host.ip
      level: core
      name: ip
      short: Host ip address.
      type: ip
    mac:
      description: Host mac address.
      flat_name: host.mac
      level: core
      name: mac
      short: Host mac address.
      type: keyword
    name:
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      level: core
      name: name
      short: Name of the host.
      type: keyword
    os.family:
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: host.os.family
      level: extended
      name: family
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: host.os.full
      level: extended
      multi_fields:
      - flat_name: host.os.full.text
        name: text
        norms: false
        type: text
      name: full
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: host.os.kernel
      level: extended
      name: kernel
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: host.os.name
      level: extended
      multi_fields:
      - flat_name: host.os.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.platform:
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: host.os.platform
      level: extended
      name: platform
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: host.os.version
      level: extended
      name: version
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
    type:
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm,
        this could be the container, for example, or other information meaningful
        in your environment.'
      flat_name: host.type
      level: core
      name: type
      short: Type of host.
      type: keyword
    uptime:
      description: Seconds the host has been up.
      example: 1325
      flat_name: host.uptime
      level: extended
      name: uptime
      short: Seconds the host has been up.
      type: long
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: host.user.domain
      level: extended
      name: domain
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      description: User email address.
      flat_name: host.user.email
      level: extended
      name: email
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: host.user.full_name
      level: extended
      multi_fields:
      - flat_name: host.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: host.user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: host.user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      flat_name: host.user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: host.user.hash
      level: extended
      name: hash
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      description: One or multiple unique identifiers of the user.
      flat_name: host.user.id
      level: core
      name: id
      original_fieldset: user
      short: One or multiple unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      example: albert
      flat_name: host.user.name
      level: core
      multi_fields:
      - flat_name: host.user.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: host
  nestings:
  - geo
  - os
  - user
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
http:
  description: Fields related to HTTP activity. Use the `url` field set to store the
    url of the request.
  fields:
    request.body.bytes:
      description: Size in bytes of the request body.
      example: 887
      flat_name: http.request.body.bytes
      format: bytes
      level: extended
      name: request.body.bytes
      short: Size in bytes of the request body.
      type: long
    request.body.content:
      description: The full HTTP request body.
      example: Hello world
      flat_name: http.request.body.content
      level: extended
      multi_fields:
      - flat_name: http.request.body.content.text
        name: text
        norms: false
        type: text
      name: request.body.content
      short: The full HTTP request body.
      type: keyword
    request.bytes:
      description: Total size in bytes of the request (body and headers).
      example: 1437
      flat_name: http.request.bytes
      format: bytes
      level: extended
      name: request.bytes
      short: Total size in bytes of the request (body and headers).
      type: long
    request.method:
      description: 'HTTP request method.

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      example: get, post, put
      flat_name: http.request.method
      level: extended
      name: request.method
      short: HTTP request method.
      type: keyword
    request.referrer:
      description: Referrer for this HTTP request.
      example: https://blog.example.com/
      flat_name: http.request.referrer
      level: extended
      name: request.referrer
      short: Referrer for this HTTP request.
      type: keyword
    response.body.bytes:
      description: Size in bytes of the response body.
      example: 887
      flat_name: http.response.body.bytes
      format: bytes
      level: extended
      name: response.body.bytes
      short: Size in bytes of the response body.
      type: long
    response.body.content:
      description: The full HTTP response body.
      example: Hello world
      flat_name: http.response.body.content
      level: extended
      multi_fields:
      - flat_name: http.response.body.content.text
        name: text
        norms: false
        type: text
      name: response.body.content
      short: The full HTTP response body.
      type: keyword
    response.bytes:
      description: Total size in bytes of the response (body and headers).
      example: 1437
      flat_name: http.response.bytes
      format: bytes
      level: extended
      name: response.bytes
      short: Total size in bytes of the response (body and headers).
      type: long
    response.status_code:
      description: HTTP response status code.
      example: 404
      flat_name: http.response.status_code
      format: string
      level: extended
      name: response.status_code
      short: HTTP response status code.
      type: long
    version:
      description: HTTP version.
      example: 1.1
      flat_name: http.version
      level: extended
      name: version
      short: HTTP version.
      type: keyword
  group: 2
  name: http
  prefix: http.
  short: Fields describing an HTTP request.
  title: HTTP
  type: group
log:
  description: 'Details about the event''s logging mechanism or logging transport.

    The log.* fields are typically populated with details about the logging mechanism
    used to create and/or transport the event. For example, syslog details belong
    under `log.syslog.*`.

    The details specific to your event source are typically not logged under `log.*`,
    but rather in `event.*` or in other ECS fields.'
  fields:
    level:
      description: 'Original log level of the log event.

        If the source of the event provides a log level or textual severity, this
        is the one that goes in `log.level`. If your source doesn''t specify one,
        you may put your event transport''s severity here (e.g. Syslog severity).

        Some examples are `warn`, `err`, `i`, `informational`.'
      example: error
      flat_name: log.level
      level: core
      name: level
      short: Log level of the log event.
      type: keyword
    logger:
      description: The name of the logger inside an application. This is usually the
        name of the class which initialized the logger, or can be a custom name.
      example: org.elasticsearch.bootstrap.Bootstrap
      flat_name: log.logger
      level: core
      name: logger
      short: Name of the logger.
      type: keyword
    origin.file.line:
      description: The line number of the file containing the source code which originated
        the log event.
      example: 42
      flat_name: log.origin.file.line
      level: extended
      name: origin.file.line
      short: The line number of the file which originated the log event.
      type: integer
    origin.file.name:
      description: The name of the file containing the source code which originated
        the log event. Note that this is not the name of the log file.
      example: Bootstrap.java
      flat_name: log.origin.file.name
      level: extended
      name: origin.file.name
      short: The file which originated the log event.
      type: keyword
    origin.function:
      description: The name of the function or method which originated the log event.
      example: init
      flat_name: log.origin.function
      level: extended
      name: origin.function
      short: The function which originated the log event.
      type: keyword
    original:
      description: 'This is the original log message and contains the full log message
        before splitting it up in multiple parts.

        In contrast to the `message` field which can contain an extracted part of
        the log message, this field contains the original, full log message. It can
        have already some modifications applied like encoding or new lines removed
        to clean up the log message.

        This field is not indexed and doc_values are disabled so it can''t be queried
        but the value can be retrieved from `_source`.'
      doc_values: false
      example: Sep 19 08:26:10 localhost My log
      flat_name: log.original
      index: false
      level: core
      name: original
      short: Original log message with light interpretation only (encoding, newlines).
      type: keyword
    syslog:
      description: The Syslog metadata of the event, if the event was transmitted
        via Syslog. Please see RFCs 5424 or 3164.
      flat_name: log.syslog
      level: extended
      name: syslog
      object_type: keyword
      short: Syslog metadata
      type: object
    syslog.facility.code:
      description: 'The Syslog numeric facility of the log event, if available.

        According to RFCs 5424 and 3164, this value should be an integer between 0
        and 23.'
      example: 23
      flat_name: log.syslog.facility.code
      format: string
      level: extended
      name: syslog.facility.code
      short: Syslog numeric facility of the event.
      type: long
    syslog.facility.name:
      description: The Syslog text-based facility of the log event, if available.
      example: local7
      flat_name: log.syslog.facility.name
      level: extended
      name: syslog.facility.name
      short: Syslog text-based facility of the event.
      type: keyword
    syslog.priority:
      description: 'Syslog numeric priority of the event, if available.

        According to RFCs 5424 and 3164, the priority is 8 * facility + severity.
        This number is therefore expected to contain a value between 0 and 191.'
      example: 135
      flat_name: log.syslog.priority
      format: string
      level: extended
      name: syslog.priority
      short: Syslog priority of the event.
      type: long
    syslog.severity.code:
      description: 'The Syslog numeric severity of the log event, if available.

        If the event source publishing via Syslog provides a different numeric severity
        value (e.g. firewall, IDS), your source''s numeric severity should go to `event.severity`.
        If the event source does not specify a distinct severity, you can optionally
        copy the Syslog severity to `event.severity`.'
      example: 3
      flat_name: log.syslog.severity.code
      level: extended
      name: syslog.severity.code
      short: Syslog numeric severity of the event.
      type: long
    syslog.severity.name:
      description: 'The Syslog numeric severity of the log event, if available.

        If the event source publishing via Syslog provides a different severity value
        (e.g. firewall, IDS), your source''s text severity should go to `log.level`.
        If the event source does not specify a distinct severity, you can optionally
        copy the Syslog severity to `log.level`.'
      example: Error
      flat_name: log.syslog.severity.name
      level: extended
      name: syslog.severity.name
      short: Syslog text-based severity of the event.
      type: keyword
  group: 2
  name: log
  prefix: log.
  short: Details about the event's logging mechanism.
  title: Log
  type: group
malware_score:
  description: These fields contain the malware score.
  fields:
    compressed_malware_features.data_buffer:
      description: TODO
      flat_name: malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      short: TODO
      type: keyword
    compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      short: TODO
      type: integer
    compressed_malware_features.encoding:
      description: TODO
      flat_name: malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      short: TODO
      type: keyword
    identifier:
      description: TODO
      flat_name: malware_score.identifier
      level: custom
      name: identifier
      short: TODO
      type: keyword
    prevention_threshold:
      description: TODO
      flat_name: malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      short: TODO
      type: double
    score:
      description: TODO
      flat_name: malware_score.score
      level: custom
      name: score
      short: TODO
      type: double
    threshold:
      description: TODO
      flat_name: malware_score.threshold
      level: custom
      name: threshold
      short: TODO
      type: double
    upx_packed:
      description: TODO
      flat_name: malware_score.upx_packed
      level: custom
      name: upx_packed
      short: TODO
      type: boolean
    version:
      description: TODO
      flat_name: malware_score.version
      level: custom
      name: version
      short: TODO
      type: keyword
  group: 2
  name: malware_score
  prefix: malware_score.
  reusable:
    expected:
    - module_info
    - process
    - process.pe_info
    top_level: false
  short: These fields contain the malware score.
  title: Malware Score
  type: group
module_info:
  description: These fields contain information about a module.
  fields:
    architecture:
      description: TODO
      flat_name: module_info.architecture
      level: custom
      name: architecture
      short: TODO
      type: keyword
    authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: module_info.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: module_info.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: module_info.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: module_info.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: module_info.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: module_info.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: module_info.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: module_info.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.more_info_link:
      description: TODO
      flat_name: module_info.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.program_name:
      description: TODO
      flat_name: module_info.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.publisher_link:
      description: TODO
      flat_name: module_info.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    compile_time:
      description: TODO
      flat_name: module_info.compile_time
      level: custom
      name: compile_time
      short: TODO
      type: date
    hash.imphash:
      description: TODO
      flat_name: module_info.hash.imphash
      level: custom
      name: hash.imphash
      short: TODO
      type: keyword
    hash.md5:
      description: TODO
      flat_name: module_info.hash.md5
      level: custom
      name: hash.md5
      short: TODO
      type: keyword
    hash.sha1:
      description: TODO
      flat_name: module_info.hash.sha1
      level: custom
      name: hash.sha1
      short: TODO
      type: keyword
    hash.sha256:
      description: TODO
      flat_name: module_info.hash.sha256
      level: custom
      name: hash.sha256
      short: TODO
      type: keyword
    malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: module_info.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: module_info.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: module_info.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.identifier:
      description: TODO
      flat_name: module_info.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.prevention_threshold:
      description: TODO
      flat_name: module_info.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.score:
      description: TODO
      flat_name: module_info.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.threshold:
      description: TODO
      flat_name: module_info.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.upx_packed:
      description: TODO
      flat_name: module_info.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    malware_score.version:
      description: TODO
      flat_name: module_info.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    mapped_address:
      description: TODO
      flat_name: module_info.mapped_address
      level: custom
      name: mapped_address
      short: TODO
      type: keyword
    mapped_size:
      description: TODO
      flat_name: module_info.mapped_size
      level: custom
      name: mapped_size
      short: TODO
      type: long
    path:
      description: TODO
      flat_name: module_info.path
      level: custom
      name: path
      short: TODO
      type: keyword
    pe_exports:
      description: TODO
      flat_name: module_info.pe_exports
      level: custom
      name: pe_exports
      short: TODO
      type: nested
    pe_exports.name:
      description: TODO
      flat_name: module_info.pe_exports.name
      level: custom
      name: pe_exports.name
      short: TODO
      type: keyword
    pe_exports.ordinal:
      description: TODO
      flat_name: module_info.pe_exports.ordinal
      level: custom
      name: pe_exports.ordinal
      short: TODO
      type: long
    pe_imports:
      description: TODO
      flat_name: module_info.pe_imports
      level: custom
      name: pe_imports
      short: TODO
      type: nested
    pe_imports.dll_name:
      description: TODO
      flat_name: module_info.pe_imports.dll_name
      level: custom
      name: pe_imports.dll_name
      short: TODO
      type: keyword
    pe_imports.import_names:
      description: TODO
      flat_name: module_info.pe_imports.import_names
      level: custom
      name: pe_imports.import_names
      short: TODO
      type: keyword
    signature_signer:
      description: TODO
      flat_name: module_info.signature_signer
      level: custom
      name: signature_signer
      short: TODO
      type: keyword
    signature_status:
      description: TODO
      flat_name: module_info.signature_status
      level: custom
      name: signature_status
      short: TODO
      type: keyword
  group: 2
  name: module_info
  nestings:
  - authenticode
  - malware_score
  prefix: module_info.
  reusable:
    expected:
    - process
    top_level: false
  short: These fields contain information about a module.
  title: Module Info
  type: group
network:
  description: 'The network is defined as the communication path over which a host
    or network event happens.

    The network.* fields should be populated with details about the network activity
    associated with an event.'
  fields:
    application:
      description: 'A name given to an application level protocol. This can be arbitrarily
        assigned for things like microservices, but also apply to things like skype,
        icq, facebook, twitter. This would be used in situations where the vendor
        or service can be decoded such as from the source/dest IP owners, ports, or
        wire format.

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      example: aim
      flat_name: network.application
      level: extended
      name: application
      short: Application level protocol name.
      type: keyword
    bytes:
      description: 'Total bytes transferred in both directions.

        If `source.bytes` and `destination.bytes` are known, `network.bytes` is their
        sum.'
      example: 368
      flat_name: network.bytes
      format: bytes
      level: core
      name: bytes
      short: Total bytes transferred in both directions.
      type: long
    community_id:
      description: 'A hash of source and destination IPs and ports, as well as the
        protocol used in a communication. This is a tool-agnostic standard to identify
        flows.

        Learn more at https://github.com/corelight/community-id-spec.'
      example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=
      flat_name: network.community_id
      level: extended
      name: community_id
      short: A hash of source and destination IPs and ports.
      type: keyword
    direction:
      description: "Direction of the network traffic.\nRecommended values are:\n \
        \ * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen\
        \ mapping events from a host-based monitoring context, populate this field\
        \ from the host's point of view.\nWhen mapping events from a network or perimeter-based\
        \ monitoring context, populate this field from the point of view of your network\
        \ perimeter."
      example: inbound
      flat_name: network.direction
      level: core
      name: direction
      short: Direction of the network traffic.
      type: keyword
    forwarded_ip:
      description: Host IP address when the source IP address is the proxy.
      example: 192.1.1.2
      flat_name: network.forwarded_ip
      level: core
      name: forwarded_ip
      short: Host IP address when the source IP address is the proxy.
      type: ip
    iana_number:
      description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        Standardized list of protocols. This aligns well with NetFlow and sFlow related
        logs which use the IANA Protocol Number.
      example: 6
      flat_name: network.iana_number
      level: extended
      name: iana_number
      short: IANA Protocol Number.
      type: keyword
    name:
      description: Name given by operators to sections of their network.
      example: Guest Wifi
      flat_name: network.name
      level: extended
      name: name
      short: Name given by operators to sections of their network.
      type: keyword
    packets:
      description: 'Total packets transferred in both directions.

        If `source.packets` and `destination.packets` are known, `network.packets`
        is their sum.'
      example: 24
      flat_name: network.packets
      level: core
      name: packets
      short: Total packets transferred in both directions.
      type: long
    protocol:
      description: 'L7 Network protocol name. ex. http, lumberjack, transport protocol.

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      example: http
      flat_name: network.protocol
      level: core
      name: protocol
      short: L7 Network protocol name.
      type: keyword
    transport:
      description: 'Same as network.iana_number, but instead using the Keyword name
        of the transport layer (udp, tcp, ipv6-icmp, etc.)

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      example: tcp
      flat_name: network.transport
      level: core
      name: transport
      short: Protocol Name corresponding to the field `iana_number`.
      type: keyword
    type:
      description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6,
        ipsec, pim, etc

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      example: ipv4
      flat_name: network.type
      level: core
      name: type
      short: In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,
        pim, etc
      type: keyword
  group: 2
  name: network
  prefix: network.
  short: Fields describing the communication path over which the event happened.
  title: Network
  type: group
observer:
  description: 'An observer is defined as a special network, security, or application
    device used to detect, observe, or create network, security, or application-related
    events and metrics.

    This could be a custom hardware appliance or a server that has been configured
    to run special network, security, or application software. Examples include firewalls,
    web proxies, intrusion detection/prevention systems, network monitoring sensors,
    web application firewalls, data loss prevention systems, and APM servers. The
    observer.* fields shall be populated with details of the system, if any, that
    detects, observes and/or creates a network, security, or application event or
    metric. Message queues and ETL components used in processing events or metrics
    are not considered observers in ECS.'
  fields:
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: observer.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: observer.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: observer.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: observer.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: observer.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: observer.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: observer.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: observer.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    hostname:
      description: Hostname of the observer.
      flat_name: observer.hostname
      level: core
      name: hostname
      short: Hostname of the observer.
      type: keyword
    ip:
      description: IP address of the observer.
      flat_name: observer.ip
      level: core
      name: ip
      short: IP address of the observer.
      type: ip
    mac:
      description: MAC address of the observer
      flat_name: observer.mac
      level: core
      name: mac
      short: MAC address of the observer
      type: keyword
    name:
      description: 'Custom name of the observer.

        This is a name that can be given to an observer. This can be helpful for example
        if multiple firewalls of the same model are used in an organization.

        If no custom name is needed, the field can be left empty.'
      example: 1_proxySG
      flat_name: observer.name
      level: extended
      name: name
      short: Custom name of the observer.
      type: keyword
    os.family:
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: observer.os.family
      level: extended
      name: family
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: observer.os.full
      level: extended
      multi_fields:
      - flat_name: observer.os.full.text
        name: text
        norms: false
        type: text
      name: full
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: observer.os.kernel
      level: extended
      name: kernel
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: observer.os.name
      level: extended
      multi_fields:
      - flat_name: observer.os.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.platform:
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: observer.os.platform
      level: extended
      name: platform
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: observer.os.version
      level: extended
      name: version
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
    product:
      description: The product name of the observer.
      example: s200
      flat_name: observer.product
      level: extended
      name: product
      short: The product name of the observer.
      type: keyword
    serial_number:
      description: Observer serial number.
      flat_name: observer.serial_number
      level: extended
      name: serial_number
      short: Observer serial number.
      type: keyword
    type:
      description: 'The type of the observer the data is coming from.

        There is no predefined list of observer types. Some examples are `forwarder`,
        `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.'
      example: firewall
      flat_name: observer.type
      level: core
      name: type
      short: The type of the observer the data is coming from.
      type: keyword
    vendor:
      description: Vendor name of the observer.
      example: Symantec
      flat_name: observer.vendor
      level: core
      name: vendor
      short: Vendor name of the observer.
      type: keyword
    version:
      description: Observer version.
      flat_name: observer.version
      level: core
      name: version
      short: Observer version.
      type: keyword
  group: 2
  name: observer
  nestings:
  - geo
  - os
  prefix: observer.
  short: Fields describing an entity observing the event from outside the host.
  title: Observer
  type: group
organization:
  description: 'The organization fields enrich data with information about the company
    or entity the data is associated with.

    These fields help you arrange or filter data stored in an index by one or multiple
    organizations.'
  fields:
    id:
      description: Unique identifier for the organization.
      flat_name: organization.id
      level: extended
      name: id
      short: Unique identifier for the organization.
      type: keyword
    name:
      description: Organization name.
      flat_name: organization.name
      level: extended
      multi_fields:
      - flat_name: organization.name.text
        name: text
        norms: false
        type: text
      name: name
      short: Organization name.
      type: keyword
  group: 2
  name: organization
  prefix: organization.
  short: Fields describing the organization or company the event is associated with.
  title: Organization
  type: group
os:
  description: The OS fields contain information about the operating system.
  fields:
    family:
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: os.family
      level: extended
      name: family
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    full:
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: os.full
      level: extended
      multi_fields:
      - flat_name: os.full.text
        name: text
        norms: false
        type: text
      name: full
      short: Operating system name, including the version or code name.
      type: keyword
    kernel:
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: os.kernel
      level: extended
      name: kernel
      short: Operating system kernel version as a raw string.
      type: keyword
    name:
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: os.name
      level: extended
      multi_fields:
      - flat_name: os.name.text
        name: text
        norms: false
        type: text
      name: name
      short: Operating system name, without the version.
      type: keyword
    platform:
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: os.platform
      level: extended
      name: platform
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    version:
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: os.version
      level: extended
      name: version
      short: Operating system version as a raw string.
      type: keyword
  group: 2
  name: os
  prefix: os.
  reusable:
    expected:
    - observer
    - host
    - user_agent
    top_level: false
  short: OS fields contain information about the operating system.
  title: Operating System
  type: group
package:
  description: These fields contain information about an installed software package.
    It contains general information about a package, such as name, version or size.
    It also contains installation details, such as time or location.
  fields:
    architecture:
      description: Package architecture.
      example: x86_64
      flat_name: package.architecture
      level: extended
      name: architecture
      short: Package architecture.
      type: keyword
    build_version:
      description: 'Additional information about the build version of the installed
        package.

        For example use the commit SHA of a non-released package.'
      example: 36f4f7e89dd61b0988b12ee000b98966867710cd
      flat_name: package.build_version
      level: extended
      name: build_version
      short: Build version information
      type: keyword
    checksum:
      description: Checksum of the installed package for verification.
      example: 68b329da9893e34099c7d8ad5cb9c940
      flat_name: package.checksum
      level: extended
      name: checksum
      short: Checksum of the installed package for verification.
      type: keyword
    description:
      description: Description of the package.
      example: Open source programming language to build simple/reliable/efficient
        software.
      flat_name: package.description
      level: extended
      name: description
      short: Description of the package.
      type: keyword
    install_scope:
      description: Indicating how the package was installed, e.g. user-local, global.
      example: global
      flat_name: package.install_scope
      level: extended
      name: install_scope
      short: Indicating how the package was installed, e.g. user-local, global.
      type: keyword
    installed:
      description: Time when package was installed.
      flat_name: package.installed
      level: extended
      name: installed
      short: Time when package was installed.
      type: date
    license:
      description: 'License under which the package was released.

        Use a short name, e.g. the license identifier from SPDX License List where
        possible (https://spdx.org/licenses/).'
      example: Apache License 2.0
      flat_name: package.license
      level: extended
      name: license
      short: Package license
      type: keyword
    name:
      description: Package name
      example: go
      flat_name: package.name
      level: extended
      name: name
      short: Package name
      type: keyword
    path:
      description: Path where the package is installed.
      example: /usr/local/Cellar/go/1.12.9/
      flat_name: package.path
      level: extended
      name: path
      short: Path where the package is installed.
      type: keyword
    reference:
      description: Home page or reference URL of the software in this package, if
        available.
      example: https://golang.org
      flat_name: package.reference
      level: extended
      name: reference
      short: Package home page or reference URL
      type: keyword
    size:
      description: Package size in bytes.
      example: 62231
      flat_name: package.size
      format: string
      level: extended
      name: size
      short: Package size in bytes.
      type: long
    type:
      description: 'Type of package.

        This should contain the package file type, rather than the package manager
        name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.'
      example: rpm
      flat_name: package.type
      level: extended
      name: type
      short: Package type
      type: keyword
    version:
      description: Package version
      example: 1.12.9
      flat_name: package.version
      level: extended
      name: version
      short: Package version
      type: keyword
  group: 2
  name: package
  prefix: package.
  short: These fields contain information about an installed software package.
  title: Package
  type: group
process:
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:
    args:
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example:
      - /usr/bin/ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: process.args
      level: extended
      name: args
      short: Array of process arguments.
      type: keyword
    args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: process.args_count
      level: extended
      name: args_count
      short: Length of the process.args array.
      type: long
    argv_list:
      description: TODO
      flat_name: process.argv_list
      level: custom
      name: argv_list
      short: TODO
      type: keyword
    authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: process.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: process.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: process.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: process.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: process.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: process.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: process.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: process.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.more_info_link:
      description: TODO
      flat_name: process.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.program_name:
      description: TODO
      flat_name: process.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    authenticode.publisher_link:
      description: TODO
      flat_name: process.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: process.command_line
      level: extended
      multi_fields:
      - flat_name: process.command_line.text
        name: text
        norms: false
        type: text
      name: command_line
      short: Full command line that started the process.
      type: keyword
    cpu_percent:
      description: TODO
      flat_name: process.cpu_percent
      level: custom
      name: cpu_percent
      short: TODO
      type: double
    cwd:
      description: TODO
      flat_name: process.cwd
      level: custom
      name: cwd
      short: TODO
      type: keyword
    defense_evasions:
      description: TODO
      flat_name: process.defense_evasions
      level: custom
      name: defense_evasions
      short: TODO
      type: nested
    defense_evasions.call_stack:
      description: TODO
      flat_name: process.defense_evasions.call_stack
      level: custom
      name: defense_evasions.call_stack
      short: TODO
      type: nested
    defense_evasions.call_stack.stack_frame.instruction_pointer:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.instruction_pointer
      level: custom
      name: instruction_pointer
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.memory_section.memory_address:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.memory_section.memory_address
      level: custom
      name: memory_section.memory_address
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.memory_section.memory_size:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.memory_section.memory_size
      level: custom
      name: memory_section.memory_size
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.memory_section.protection:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.memory_section.protection
      level: custom
      name: memory_section.protection
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.module_path:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.module_path
      level: custom
      name: module_path
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.rva:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.rva
      level: custom
      name: rva
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.call_stack.stack_frame.symbol_info:
      description: TODO
      flat_name: process.defense_evasions.call_stack.stack_frame.symbol_info
      level: custom
      name: symbol_info
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    defense_evasions.delta_count:
      description: TODO
      flat_name: process.defense_evasions.delta_count
      level: custom
      name: defense_evasions.delta_count
      short: TODO
      type: keyword
    defense_evasions.evasion_subtype:
      description: TODO
      flat_name: process.defense_evasions.evasion_subtype
      level: custom
      name: defense_evasions.evasion_subtype
      short: TODO
      type: keyword
    defense_evasions.evasion_type:
      description: TODO
      flat_name: process.defense_evasions.evasion_type
      level: custom
      name: defense_evasions.evasion_type
      short: TODO
      type: keyword
    defense_evasions.instruction_pointer:
      description: TODO
      flat_name: process.defense_evasions.instruction_pointer
      level: custom
      name: defense_evasions.instruction_pointer
      short: TODO
      type: keyword
    defense_evasions.memory_sections:
      description: TODO
      flat_name: process.defense_evasions.memory_sections
      level: custom
      name: defense_evasions.memory_sections
      short: TODO
      type: nested
    defense_evasions.memory_sections.memory_address:
      description: TODO
      flat_name: process.defense_evasions.memory_sections.memory_address
      level: custom
      name: defense_evasions.memory_sections.memory_address
      short: TODO
      type: keyword
    defense_evasions.memory_sections.memory_size:
      description: TODO
      flat_name: process.defense_evasions.memory_sections.memory_size
      level: custom
      name: defense_evasions.memory_sections.memory_size
      short: TODO
      type: keyword
    defense_evasions.memory_sections.protection:
      description: TODO
      flat_name: process.defense_evasions.memory_sections.protection
      level: custom
      name: defense_evasions.memory_sections.protection
      short: TODO
      type: keyword
    defense_evasions.module_path:
      description: TODO
      flat_name: process.defense_evasions.module_path
      level: custom
      name: defense_evasions.module_path
      short: TODO
      type: keyword
    defense_evasions.thread.thread_id:
      description: TODO
      flat_name: process.defense_evasions.thread.thread_id
      level: custom
      name: defense_evasions.thread.thread_id
      short: TODO
      type: long
    defense_evasions.thread.thread_start_address:
      description: TODO
      flat_name: process.defense_evasions.thread.thread_start_address
      level: custom
      name: defense_evasions.thread.thread_start_address
      short: TODO
      type: keyword
    defense_evasions.total_memory_size:
      description: TODO
      flat_name: process.defense_evasions.total_memory_size
      level: custom
      name: defense_evasions.total_memory_size
      short: TODO
      type: keyword
    domain:
      description: TODO
      flat_name: process.domain
      level: custom
      name: domain
      short: TODO
      type: keyword
    env_variables:
      description: TODO
      flat_name: process.env_variables
      level: custom
      name: env_variables
      short: TODO
      type: keyword
    executable:
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: process.executable
      level: extended
      multi_fields:
      - flat_name: process.executable.text
        name: text
        norms: false
        type: text
      name: executable
      short: Absolute path to the process executable.
      type: keyword
    exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: process.exit_code
      level: extended
      name: exit_code
      short: The exit code of the process.
      type: long
    gid:
      description: TODO
      flat_name: process.gid
      level: custom
      name: gid
      short: TODO
      type: long
    group:
      description: TODO
      flat_name: process.group
      level: custom
      name: group
      short: TODO
      type: keyword
    handle:
      description: TODO
      flat_name: process.handle
      level: custom
      name: handle
      short: TODO
      type: nested
    handle.handle_id:
      description: TODO
      flat_name: process.handle.handle_id
      level: custom
      name: handle.handle_id
      short: TODO
      type: long
    handle.handle_name:
      description: TODO
      flat_name: process.handle.handle_name
      level: custom
      name: handle.handle_name
      short: TODO
      type: keyword
    handle.handle_type:
      description: TODO
      flat_name: process.handle.handle_type
      level: custom
      name: handle.handle_type
      short: TODO
      type: keyword
    has_unbacked_execute_memory:
      description: TODO
      flat_name: process.has_unbacked_execute_memory
      level: custom
      name: has_unbacked_execute_memory
      short: TODO
      type: boolean
    hash.imphash:
      description: Imphash.
      flat_name: process.hash.imphash
      level: extended
      name: imphash
      original_fieldset: hash
      short: Imphash.
      type: keyword
    hash.md5:
      description: MD5 hash.
      flat_name: process.hash.md5
      level: extended
      name: md5
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    hash.sha1:
      description: SHA1 hash.
      flat_name: process.hash.sha1
      level: extended
      name: sha1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    hash.sha256:
      description: SHA256 hash.
      flat_name: process.hash.sha256
      level: extended
      name: sha256
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    hash.sha512:
      description: SHA512 hash.
      flat_name: process.hash.sha512
      level: extended
      name: sha512
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    hash_matched_module:
      description: TODO
      flat_name: process.hash_matched_module
      level: custom
      name: hash_matched_module
      short: TODO
      type: boolean
    imphash:
      description: TODO
      flat_name: process.imphash
      level: custom
      name: imphash
      short: TODO
      type: keyword
    is_sensor:
      description: Is this the Elastic Endpoint process or not.
      flat_name: process.is_sensor
      level: custom
      name: is_sensor
      short: Is this the Elastic Endpoint process or not.
      type: boolean
    malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: process.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: process.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: process.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.identifier:
      description: TODO
      flat_name: process.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    malware_score.prevention_threshold:
      description: TODO
      flat_name: process.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.score:
      description: TODO
      flat_name: process.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.threshold:
      description: TODO
      flat_name: process.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    malware_score.upx_packed:
      description: TODO
      flat_name: process.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    malware_score.version:
      description: TODO
      flat_name: process.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    memory_percent:
      description: TODO
      flat_name: process.memory_percent
      level: custom
      name: memory_percent
      short: TODO
      type: double
    memory_region:
      description: TODO
      flat_name: process.memory_region
      level: custom
      name: memory_region
      short: TODO
      type: nested
    memory_region.allocation_base:
      description: TODO
      flat_name: process.memory_region.allocation_base
      level: custom
      name: memory_region.allocation_base
      short: TODO
      type: keyword
    memory_region.allocation_protection:
      description: TODO
      flat_name: process.memory_region.allocation_protection
      level: custom
      name: memory_region.allocation_protection
      short: TODO
      type: keyword
    memory_region.bytes:
      description: TODO
      flat_name: process.memory_region.bytes
      level: custom
      name: memory_region.bytes
      short: TODO
      type: keyword
    memory_region.histogram:
      description: TODO
      flat_name: process.memory_region.histogram
      level: custom
      name: memory_region.histogram
      short: TODO
      type: nested
    memory_region.histogram.histogram_array:
      description: TODO
      flat_name: process.memory_region.histogram.histogram_array
      level: custom
      name: memory_region.histogram.histogram_array
      short: TODO
      type: keyword
    memory_region.histogram.histogram_flavor:
      description: TODO
      flat_name: process.memory_region.histogram.histogram_flavor
      level: custom
      name: memory_region.histogram.histogram_flavor
      short: TODO
      type: keyword
    memory_region.histogram.histogram_resolution:
      description: TODO
      flat_name: process.memory_region.histogram.histogram_resolution
      level: custom
      name: memory_region.histogram.histogram_resolution
      short: TODO
      type: keyword
    memory_region.length:
      description: TODO
      flat_name: process.memory_region.length
      level: custom
      name: memory_region.length
      short: TODO
      type: keyword
    memory_region.memory:
      description: TODO
      flat_name: process.memory_region.memory
      level: custom
      name: memory_region.memory
      short: TODO
      type: keyword
    memory_region.memory_address:
      description: TODO
      flat_name: process.memory_region.memory_address
      level: custom
      name: memory_region.memory_address
      short: TODO
      type: keyword
    memory_region.module_path:
      description: TODO
      flat_name: process.memory_region.module_path
      level: custom
      name: memory_region.module_path
      short: TODO
      type: keyword
    memory_region.permission:
      description: TODO
      flat_name: process.memory_region.permission
      level: custom
      name: memory_region.permission
      short: TODO
      type: keyword
    memory_region.protection:
      description: TODO
      flat_name: process.memory_region.protection
      level: custom
      name: memory_region.protection
      short: TODO
      type: keyword
    memory_region.region_base:
      description: TODO
      flat_name: process.memory_region.region_base
      level: custom
      name: memory_region.region_base
      short: TODO
      type: keyword
    memory_region.region_size:
      description: TODO
      flat_name: process.memory_region.region_size
      level: custom
      name: memory_region.region_size
      short: TODO
      type: keyword
    memory_region.region_tag:
      description: TODO
      flat_name: process.memory_region.region_tag
      level: custom
      name: memory_region.region_tag
      short: TODO
      type: keyword
    memory_region.type:
      description: TODO
      flat_name: process.memory_region.type
      level: custom
      name: memory_region.type
      short: TODO
      type: keyword
    memory_region.unbacked_on_disk:
      description: TODO
      flat_name: process.memory_region.unbacked_on_disk
      level: custom
      name: memory_region.unbacked_on_disk
      short: TODO
      type: boolean
    module_info.architecture:
      description: TODO
      flat_name: process.module_info.architecture
      level: custom
      name: architecture
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: process.module_info.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: process.module_info.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: process.module_info.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: process.module_info.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: process.module_info.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: process.module_info.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: process.module_info.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: process.module_info.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.more_info_link:
      description: TODO
      flat_name: process.module_info.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.program_name:
      description: TODO
      flat_name: process.module_info.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.authenticode.publisher_link:
      description: TODO
      flat_name: process.module_info.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    module_info.compile_time:
      description: TODO
      flat_name: process.module_info.compile_time
      level: custom
      name: compile_time
      original_fieldset: module_info
      short: TODO
      type: date
    module_info.hash.imphash:
      description: TODO
      flat_name: process.module_info.hash.imphash
      level: custom
      name: hash.imphash
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.hash.md5:
      description: TODO
      flat_name: process.module_info.hash.md5
      level: custom
      name: hash.md5
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.hash.sha1:
      description: TODO
      flat_name: process.module_info.hash.sha1
      level: custom
      name: hash.sha1
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.hash.sha256:
      description: TODO
      flat_name: process.module_info.hash.sha256
      level: custom
      name: hash.sha256
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: process.module_info.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    module_info.malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: process.module_info.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    module_info.malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: process.module_info.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    module_info.malware_score.identifier:
      description: TODO
      flat_name: process.module_info.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    module_info.malware_score.prevention_threshold:
      description: TODO
      flat_name: process.module_info.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    module_info.malware_score.score:
      description: TODO
      flat_name: process.module_info.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    module_info.malware_score.threshold:
      description: TODO
      flat_name: process.module_info.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    module_info.malware_score.upx_packed:
      description: TODO
      flat_name: process.module_info.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    module_info.malware_score.version:
      description: TODO
      flat_name: process.module_info.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    module_info.mapped_address:
      description: TODO
      flat_name: process.module_info.mapped_address
      level: custom
      name: mapped_address
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.mapped_size:
      description: TODO
      flat_name: process.module_info.mapped_size
      level: custom
      name: mapped_size
      original_fieldset: module_info
      short: TODO
      type: long
    module_info.path:
      description: TODO
      flat_name: process.module_info.path
      level: custom
      name: path
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.pe_exports:
      description: TODO
      flat_name: process.module_info.pe_exports
      level: custom
      name: pe_exports
      original_fieldset: module_info
      short: TODO
      type: nested
    module_info.pe_exports.name:
      description: TODO
      flat_name: process.module_info.pe_exports.name
      level: custom
      name: pe_exports.name
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.pe_exports.ordinal:
      description: TODO
      flat_name: process.module_info.pe_exports.ordinal
      level: custom
      name: pe_exports.ordinal
      original_fieldset: module_info
      short: TODO
      type: long
    module_info.pe_imports:
      description: TODO
      flat_name: process.module_info.pe_imports
      level: custom
      name: pe_imports
      original_fieldset: module_info
      short: TODO
      type: nested
    module_info.pe_imports.dll_name:
      description: TODO
      flat_name: process.module_info.pe_imports.dll_name
      level: custom
      name: pe_imports.dll_name
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.pe_imports.import_names:
      description: TODO
      flat_name: process.module_info.pe_imports.import_names
      level: custom
      name: pe_imports.import_names
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.signature_signer:
      description: TODO
      flat_name: process.module_info.signature_signer
      level: custom
      name: signature_signer
      original_fieldset: module_info
      short: TODO
      type: keyword
    module_info.signature_status:
      description: TODO
      flat_name: process.module_info.signature_status
      level: custom
      name: signature_status
      original_fieldset: module_info
      short: TODO
      type: keyword
    name:
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: process.name
      level: extended
      multi_fields:
      - flat_name: process.name.text
        name: text
        norms: false
        type: text
      name: name
      short: Process name.
      type: keyword
    num_threads:
      description: TODO
      flat_name: process.num_threads
      level: custom
      name: num_threads
      short: TODO
      type: long
    parent.args:
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      example:
      - ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: process.parent.args
      level: extended
      name: parent.args
      short: Array of process arguments.
      type: keyword
    parent.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: process.parent.args_count
      level: extended
      name: parent.args_count
      short: Length of the process.args array.
      type: long
    parent.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: process.parent.command_line
      level: extended
      multi_fields:
      - flat_name: process.parent.command_line.text
        name: text
        norms: false
        type: text
      name: parent.command_line
      short: Full command line that started the process.
      type: keyword
    parent.executable:
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: process.parent.executable
      level: extended
      multi_fields:
      - flat_name: process.parent.executable.text
        name: text
        norms: false
        type: text
      name: parent.executable
      short: Absolute path to the process executable.
      type: keyword
    parent.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: process.parent.exit_code
      level: extended
      name: parent.exit_code
      short: The exit code of the process.
      type: long
    parent.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: process.parent.name
      level: extended
      multi_fields:
      - flat_name: process.parent.name.text
        name: text
        norms: false
        type: text
      name: parent.name
      short: Process name.
      type: keyword
    parent.pgid:
      description: Identifier of the group of processes the process belongs to.
      flat_name: process.parent.pgid
      format: string
      level: extended
      name: parent.pgid
      short: Identifier of the group of processes the process belongs to.
      type: long
    parent.pid:
      description: Process id.
      example: 4242
      flat_name: process.parent.pid
      format: string
      level: core
      name: parent.pid
      short: Process id.
      type: long
    parent.ppid:
      description: Parent process' pid.
      example: 4241
      flat_name: process.parent.ppid
      format: string
      level: extended
      name: parent.ppid
      short: Parent process' pid.
      type: long
    parent.start:
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: process.parent.start
      level: extended
      name: parent.start
      short: The time the process started.
      type: date
    parent.thread.id:
      description: Thread ID.
      example: 4242
      flat_name: process.parent.thread.id
      format: string
      level: extended
      name: parent.thread.id
      short: Thread ID.
      type: long
    parent.thread.name:
      description: Thread name.
      example: thread-0
      flat_name: process.parent.thread.name
      level: extended
      name: parent.thread.name
      short: Thread name.
      type: keyword
    parent.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: process.parent.title
      level: extended
      multi_fields:
      - flat_name: process.parent.title.text
        name: text
        norms: false
        type: text
      name: parent.title
      short: Process title.
      type: keyword
    parent.uptime:
      description: Seconds the process has been up.
      example: 1325
      flat_name: process.parent.uptime
      level: extended
      name: parent.uptime
      short: Seconds the process has been up.
      type: long
    parent.working_directory:
      description: The working directory of the process.
      example: /home/alice
      flat_name: process.parent.working_directory
      level: extended
      multi_fields:
      - flat_name: process.parent.working_directory.text
        name: text
        norms: false
        type: text
      name: parent.working_directory
      short: The working directory of the process.
      type: keyword
    pe_info.architecture:
      description: TODO
      flat_name: process.pe_info.architecture
      level: custom
      name: pe_info.architecture
      short: TODO
      type: keyword
    pe_info.authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: process.pe_info.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.more_info_link:
      description: TODO
      flat_name: process.pe_info.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.program_name:
      description: TODO
      flat_name: process.pe_info.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.authenticode.publisher_link:
      description: TODO
      flat_name: process.pe_info.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    pe_info.compile_time:
      description: TODO
      flat_name: process.pe_info.compile_time
      level: custom
      name: pe_info.compile_time
      short: TODO
      type: long
    pe_info.entry_point_address:
      description: TODO
      flat_name: process.pe_info.entry_point_address
      level: custom
      name: pe_info.entry_point_address
      short: TODO
      type: long
    pe_info.is_dll:
      description: TODO
      flat_name: process.pe_info.is_dll
      level: custom
      name: pe_info.is_dll
      short: TODO
      type: boolean
    pe_info.malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: process.pe_info.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    pe_info.malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: process.pe_info.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    pe_info.malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: process.pe_info.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    pe_info.malware_score.identifier:
      description: TODO
      flat_name: process.pe_info.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    pe_info.malware_score.prevention_threshold:
      description: TODO
      flat_name: process.pe_info.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    pe_info.malware_score.score:
      description: TODO
      flat_name: process.pe_info.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    pe_info.malware_score.threshold:
      description: TODO
      flat_name: process.pe_info.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    pe_info.malware_score.upx_packed:
      description: TODO
      flat_name: process.pe_info.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    pe_info.malware_score.version:
      description: TODO
      flat_name: process.pe_info.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    pe_info.pe_exports:
      description: TODO
      flat_name: process.pe_info.pe_exports
      level: custom
      name: pe_info.pe_exports
      short: TODO
      type: nested
    pe_info.pe_exports.name:
      description: TODO
      flat_name: process.pe_info.pe_exports.name
      level: custom
      name: pe_info.pe_exports.name
      short: TODO
      type: keyword
    pe_info.pe_exports.ordinal:
      description: TODO
      flat_name: process.pe_info.pe_exports.ordinal
      level: custom
      name: pe_info.pe_exports.ordinal
      short: TODO
      type: long
    pe_info.pe_imports:
      description: TODO
      flat_name: process.pe_info.pe_imports
      level: custom
      name: pe_info.pe_imports
      short: TODO
      type: nested
    pe_info.pe_imports.dll_name:
      description: TODO
      flat_name: process.pe_info.pe_imports.dll_name
      level: custom
      name: pe_info.pe_imports.dll_name
      short: TODO
      type: keyword
    pe_info.pe_imports.import_names:
      description: TODO
      flat_name: process.pe_info.pe_imports.import_names
      level: custom
      name: pe_info.pe_imports.import_names
      short: TODO
      type: keyword
    pe_info.resources:
      description: TODO
      flat_name: process.pe_info.resources
      level: custom
      name: pe_info.resources
      short: TODO
      type: nested
    pe_info.resources.resource_data.entropy:
      description: TODO
      flat_name: process.pe_info.resources.resource_data.entropy
      level: custom
      name: pe_info.resources.resource_data.entropy
      short: TODO
      type: double
    pe_info.resources.resource_data.size:
      description: TODO
      flat_name: process.pe_info.resources.resource_data.size
      level: custom
      name: pe_info.resources.resource_data.size
      short: TODO
      type: long
    pe_info.resources.resource_id:
      description: TODO
      flat_name: process.pe_info.resources.resource_id
      level: custom
      name: pe_info.resources.resource_id
      short: TODO
      type: long
    pe_info.resources.resource_name:
      description: TODO
      flat_name: process.pe_info.resources.resource_name
      level: custom
      name: pe_info.resources.resource_name
      short: TODO
      type: keyword
    pe_info.resources.resource_type:
      description: TODO
      flat_name: process.pe_info.resources.resource_type
      level: custom
      name: pe_info.resources.resource_type
      short: TODO
      type: keyword
    pe_info.sections:
      description: TODO
      flat_name: process.pe_info.sections
      level: custom
      name: pe_info.sections
      short: TODO
      type: nested
    pe_info.sections.entropy:
      description: TODO
      flat_name: process.pe_info.sections.entropy
      level: custom
      name: pe_info.sections.entropy
      short: TODO
      type: double
    pe_info.sections.name:
      description: TODO
      flat_name: process.pe_info.sections.name
      level: custom
      name: pe_info.sections.name
      short: TODO
      type: keyword
    pe_info.sections.raw_offset:
      description: TODO
      flat_name: process.pe_info.sections.raw_offset
      level: custom
      name: pe_info.sections.raw_offset
      short: TODO
      type: keyword
    pe_info.sections.raw_size:
      description: TODO
      flat_name: process.pe_info.sections.raw_size
      level: custom
      name: pe_info.sections.raw_size
      short: TODO
      type: keyword
    pe_info.sections.virtual_address:
      description: TODO
      flat_name: process.pe_info.sections.virtual_address
      level: custom
      name: pe_info.sections.virtual_address
      short: TODO
      type: keyword
    pe_info.sections.virtual_size:
      description: TODO
      flat_name: process.pe_info.sections.virtual_size
      level: custom
      name: pe_info.sections.virtual_size
      short: TODO
      type: keyword
    pe_info.signature_signer:
      description: TODO
      flat_name: process.pe_info.signature_signer
      level: custom
      name: pe_info.signature_signer
      short: TODO
      type: keyword
    pe_info.signature_status:
      description: TODO
      flat_name: process.pe_info.signature_status
      level: custom
      name: pe_info.signature_status
      short: TODO
      type: keyword
    pe_info.version_info:
      description: TODO
      flat_name: process.pe_info.version_info
      level: custom
      name: pe_info.version_info
      short: TODO
      type: nested
    pe_info.version_info.code_page:
      description: TODO
      flat_name: process.pe_info.version_info.code_page
      level: custom
      name: pe_info.version_info.code_page
      short: TODO
      type: long
    pe_info.version_info.key:
      description: TODO
      flat_name: process.pe_info.version_info.key
      level: custom
      name: pe_info.version_info.key
      short: TODO
      type: keyword
    pe_info.version_info.language:
      description: TODO
      flat_name: process.pe_info.version_info.language
      level: custom
      name: pe_info.version_info.language
      short: TODO
      type: long
    pe_info.version_info.value_string:
      description: TODO
      flat_name: process.pe_info.version_info.value_string
      level: custom
      name: pe_info.version_info.value_string
      short: TODO
      type: keyword
    pgid:
      description: Identifier of the group of processes the process belongs to.
      flat_name: process.pgid
      format: string
      level: extended
      name: pgid
      short: Identifier of the group of processes the process belongs to.
      type: long
    phys_memory_bytes:
      description: TODO
      flat_name: process.phys_memory_bytes
      level: custom
      name: phys_memory_bytes
      short: TODO
      type: keyword
    pid:
      description: Process id.
      example: 4242
      flat_name: process.pid
      format: string
      level: core
      name: pid
      short: Process id.
      type: long
    ppid:
      description: Parent process' pid.
      example: 4241
      flat_name: process.ppid
      format: string
      level: extended
      name: ppid
      short: Parent process' pid.
      type: long
    services:
      description: TODO
      flat_name: process.services
      level: custom
      name: services
      short: TODO
      type: keyword
    session_id:
      description: TODO
      flat_name: process.session_id
      level: custom
      name: session_id
      short: TODO
      type: long
    short_name:
      description: TODO
      flat_name: process.short_name
      level: custom
      name: short_name
      short: TODO
      type: keyword
    sid:
      description: TODO
      flat_name: process.sid
      level: custom
      name: sid
      short: TODO
      type: keyword
    signature_signer:
      description: TODO
      flat_name: process.signature_signer
      level: custom
      name: signature_signer
      short: TODO
      type: keyword
    signature_status:
      description: TODO
      flat_name: process.signature_status
      level: custom
      name: signature_status
      short: TODO
      type: keyword
    start:
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: process.start
      level: extended
      name: start
      short: The time the process started.
      type: date
    thread:
      description: TODO
      flat_name: process.thread
      level: custom
      name: thread
      short: TODO
      type: nested
    thread.entrypoint:
      description: TODO
      flat_name: process.thread.entrypoint
      level: custom
      name: thread.entrypoint
      short: TODO
      type: keyword
    thread.id:
      description: Thread ID.
      example: 4242
      flat_name: process.thread.id
      format: string
      level: extended
      name: thread.id
      short: Thread ID.
      type: long
    thread.name:
      description: Thread name.
      example: thread-0
      flat_name: process.thread.name
      level: extended
      name: thread.name
      short: Thread name.
      type: keyword
    thread.start:
      description: TODO
      flat_name: process.thread.start
      level: custom
      name: thread.start
      short: TODO
      type: date
    thread.thread_id:
      description: TODO
      flat_name: process.thread.thread_id
      level: custom
      name: thread.thread_id
      short: TODO
      type: long
    thread.uptime:
      description: TODO
      flat_name: process.thread.uptime
      level: custom
      name: thread.uptime
      short: TODO
      type: long
    title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: process.title
      level: extended
      multi_fields:
      - flat_name: process.title.text
        name: text
        norms: false
        type: text
      name: title
      short: Process title.
      type: keyword
    token.domain:
      description: TODO
      flat_name: process.token.domain
      level: extended
      name: domain
      original_fieldset: token
      short: TODO
      type: keyword
    token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: process.token.impersonation_level
      level: extended
      name: impersonation_level
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    token.integrity_level:
      description: Numeric integrity level.
      flat_name: process.token.integrity_level
      level: extended
      name: integrity_level
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    token.integrity_level_name:
      description: Human readable integrity level.
      flat_name: process.token.integrity_level_name
      level: extended
      name: integrity_level_name
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      flat_name: process.token.is_appcontainer
      level: extended
      name: is_appcontainer
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    token.privileges:
      description: Array describing the privileges associated with the token.
      flat_name: process.token.privileges
      level: extended
      name: privileges
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    token.privileges.description:
      description: Description of the privilege.
      flat_name: process.token.privileges.description
      level: extended
      name: privileges.description
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      flat_name: process.token.privileges.enabled
      level: extended
      name: privileges.enabled
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    token.privileges.name:
      description: Name of the privilege.
      flat_name: process.token.privileges.name
      level: extended
      name: privileges.name
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    token.sid:
      description: TODO
      flat_name: process.token.sid
      level: extended
      name: sid
      original_fieldset: token
      short: TODO
      type: keyword
    token.type:
      description: Type of the token, either primary or impersonation.
      flat_name: process.token.type
      level: extended
      name: type
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    token.user:
      description: Username of token owner.
      flat_name: process.token.user
      level: extended
      name: user
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    tty_device_major_number:
      description: TODO
      flat_name: process.tty_device_major_number
      level: custom
      name: tty_device_major_number
      short: TODO
      type: integer
    tty_device_minor_number:
      description: TODO
      flat_name: process.tty_device_minor_number
      level: custom
      name: tty_device_minor_number
      short: TODO
      type: integer
    tty_device_name:
      description: TODO
      flat_name: process.tty_device_name
      level: custom
      name: tty_device_name
      short: TODO
      type: keyword
    uid:
      description: TODO
      flat_name: process.uid
      level: custom
      name: uid
      short: TODO
      type: long
    unbacked_execute_byte_count:
      description: TODO
      flat_name: process.unbacked_execute_byte_count
      level: custom
      name: unbacked_execute_byte_count
      short: TODO
      type: keyword
    unbacked_execute_region_count:
      description: TODO
      flat_name: process.unbacked_execute_region_count
      level: custom
      name: unbacked_execute_region_count
      short: TODO
      type: keyword
    unique_pid:
      description: Unique process id.
      flat_name: process.unique_pid
      level: custom
      name: unique_pid
      short: Unique process id.
      type: keyword
    unique_ppid:
      description: Unique parent process id.
      flat_name: process.unique_ppid
      level: custom
      name: unique_ppid
      short: Unique parent process id.
      type: keyword
    uptime:
      description: Seconds the process has been up.
      example: 1325
      flat_name: process.uptime
      level: extended
      name: uptime
      short: Seconds the process has been up.
      type: long
    virt_memory_bytes:
      description: TODO
      flat_name: process.virt_memory_bytes
      level: custom
      name: virt_memory_bytes
      short: TODO
      type: keyword
    working_directory:
      description: The working directory of the process.
      example: /home/alice
      flat_name: process.working_directory
      level: extended
      multi_fields:
      - flat_name: process.working_directory.text
        name: text
        norms: false
        type: text
      name: working_directory
      short: The working directory of the process.
      type: keyword
  group: 2
  name: process
  nestings:
  - hash
  - token
  prefix: process.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about a process.
  title: Process
  type: group
registry:
  description: Fields related to Windows Registry operations.
  fields:
    data.bytes:
      description: 'Original bytes written with base64 encoding.

        For Windows registry operations, such as SetValueEx and RegQueryValueEx, this
        corresponds to the data pointed by `lp_data`. This is optional but provides
        better recoverability and should be populated for REG_BINARY encoded values.'
      example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
      flat_name: registry.data.bytes
      level: extended
      name: data.bytes
      short: Original bytes written with base64 encoding.
      type: keyword
    data.strings:
      description: 'Content when writing string types.

        Populated as an array when writing string data to the registry. For single
        string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with
        one string. For sequences of string with REG_MULTI_SZ, this array will be
        variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should
        be populated with the decimal representation (e.g `"1"`).'
      example: '["C:\rta\red_ttp\bin\myapp.exe"]'
      flat_name: registry.data.strings
      level: core
      name: data.strings
      short: List of strings representing what was written to the registry.
      type: keyword
    data.type:
      description: Standard registry type for encoding contents
      example: REG_SZ
      flat_name: registry.data.type
      level: core
      name: data.type
      short: Standard registry type for encoding contents
      type: keyword
    hive:
      description: Abbreviated name for the hive.
      example: HKLM
      flat_name: registry.hive
      level: core
      name: hive
      short: Abbreviated name for the hive.
      type: keyword
    key:
      description: Hive-relative path of keys.
      example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe
      flat_name: registry.key
      level: core
      name: key
      short: Hive-relative path of keys.
      type: keyword
    path:
      description: Full path, including hive, key and value
      example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution
        Options\winword.exe\Debugger
      flat_name: registry.path
      level: core
      name: path
      short: Full path, including hive, key and value
      type: keyword
    value:
      description: Name of the value written.
      example: Debugger
      flat_name: registry.value
      level: core
      name: value
      short: Name of the value written.
      type: keyword
  group: 2
  name: registry
  prefix: registry.
  short: Fields related to Windows Registry operations.
  title: Registry
  type: group
related:
  description: 'This field set is meant to facilitate pivoting around a piece of data.

    Some pieces of information can be seen in many places in an ECS event. To facilitate
    searching for them, store an array of all seen values to their corresponding field
    in `related.`.

    A concrete example is IP addresses, which can be under host, observer, source,
    destination, client, server, and network.forwarded_ip. If you append all IPs to
    `related.ip`, you can then search for a given IP trivially, no matter where it
    appeared, by querying `related.ip:192.0.2.15`.'
  fields:
    hash:
      description: All the hashes seen on your event. Populating this field, then
        using it to search for hashes can help in situations where you're unsure what
        the hash algorithm is (and therefore which key name to search).
      flat_name: related.hash
      level: extended
      name: hash
      short: All the hashes seen on your event.
      type: keyword
    ip:
      description: All of the IPs seen on your event.
      flat_name: related.ip
      level: extended
      name: ip
      short: All of the IPs seen on your event.
      type: ip
    user:
      description: All the user names seen on your event.
      flat_name: related.user
      level: extended
      name: user
      short: All the user names seen on your event.
      type: keyword
  group: 2
  name: related
  prefix: related.
  short: Fields meant to facilitate pivoting around a piece of data.
  title: Related
  type: group
rule:
  description: 'Rule fields are used to capture the specifics of any observer or agent
    rules that generate alerts or other notable events.

    Examples of data sources that would populate the rule fields include: network
    admission control platforms, network or host IDS/IPS, network firewalls, web application
    firewalls, url filters, endpoint detection and response (EDR) systems, etc.'
  fields:
    category:
      description: A categorization value keyword used by the entity using the rule
        for detection of this event.
      example: Attempted Information Leak
      flat_name: rule.category
      level: extended
      name: category
      short: Rule category
      type: keyword
    description:
      description: The description of the rule generating the event.
      example: Block requests to public DNS over HTTPS / TLS protocols
      flat_name: rule.description
      level: extended
      name: description
      short: Rule description
      type: keyword
    id:
      description: A rule ID that is unique within the scope of an agent, observer,
        or other entity using the rule for detection of this event.
      example: 101
      flat_name: rule.id
      level: extended
      name: id
      short: Rule ID
      type: keyword
    name:
      description: The name of the rule or signature generating the event.
      example: BLOCK_DNS_over_TLS
      flat_name: rule.name
      level: extended
      name: name
      short: Rule name
      type: keyword
    reference:
      description: 'Reference URL to additional information about the rule used to
        generate this event.

        The URL can point to the vendor''s documentation about the rule. If that''s
        not available, it can also be a link to a more general page describing this
        type of alert.'
      example: https://en.wikipedia.org/wiki/DNS_over_TLS
      flat_name: rule.reference
      level: extended
      name: reference
      short: Rule reference URL
      type: keyword
    ruleset:
      description: Name of the ruleset, policy, group, or parent category in which
        the rule used to generate this event is a member.
      example: Standard_Protocol_Filters
      flat_name: rule.ruleset
      level: extended
      name: ruleset
      short: Rule ruleset
      type: keyword
    uuid:
      description: A rule ID that is unique within the scope of a set or group of
        agents, observers, or other entities using the rule for detection of this
        event.
      example: 1100110011
      flat_name: rule.uuid
      level: extended
      name: uuid
      short: Rule UUID
      type: keyword
    version:
      description: The version / revision of the rule being used for analysis.
      example: 1.1
      flat_name: rule.version
      level: extended
      name: version
      short: Rule version
      type: keyword
  group: 2
  name: rule
  prefix: rule.
  short: Fields to capture details about rules used to generate alerts or other notable
    events.
  title: Rule
  type: group
server:
  description: 'A Server is defined as the responder in a network connection for events
    regarding sessions, connections, or bidirectional flow records.

    For TCP events, the server is the receiver of the initial SYN packet(s) of the
    TCP connection. For other protocols, the server is generally the responder in
    the network transaction. Some systems actually use the term "responder" to refer
    the server in TCP connections. The server fields describe details about the system
    acting as the server in the network event. Server fields are usually populated
    in conjunction with client fields. Server fields are generally not populated for
    packet-level events.

    Client / server representations can add semantic context to an exchange, which
    is helpful to visualize the data in certain situations. If your context falls
    in that category, you should still ensure that source and destination are filled
    appropriately.'
  fields:
    address:
      description: 'Some event server addresses are defined ambiguously. The event
        will sometimes list an IP, a domain or a unix socket.  You should always store
        the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      flat_name: server.address
      level: extended
      name: address
      short: Server network address.
      type: keyword
    as.number:
      description: Unique number allocated to the autonomous system. The autonomous
        system number (ASN) uniquely identifies each network on the Internet.
      example: 15169
      flat_name: server.as.number
      level: extended
      name: number
      original_fieldset: as
      short: Unique number allocated to the autonomous system. The autonomous system
        number (ASN) uniquely identifies each network on the Internet.
      type: long
    as.organization.name:
      description: Organization name.
      example: Google LLC
      flat_name: server.as.organization.name
      level: extended
      multi_fields:
      - flat_name: server.as.organization.name.text
        name: text
        norms: false
        type: text
      name: organization.name
      original_fieldset: as
      short: Organization name.
      type: keyword
    bytes:
      description: Bytes sent from the server to the client.
      example: 184
      flat_name: server.bytes
      format: bytes
      level: core
      name: bytes
      short: Bytes sent from the server to the client.
      type: long
    domain:
      description: Server domain.
      flat_name: server.domain
      level: core
      name: domain
      short: Server domain.
      type: keyword
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: server.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: server.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: server.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: server.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: server.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: server.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: server.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: server.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    ip:
      description: 'IP address of the server.

        Can be one or multiple IPv4 or IPv6 addresses.'
      flat_name: server.ip
      level: core
      name: ip
      short: IP address of the server.
      type: ip
    mac:
      description: MAC address of the server.
      flat_name: server.mac
      level: core
      name: mac
      short: MAC address of the server.
      type: keyword
    nat.ip:
      description: 'Translated ip of destination based NAT sessions (e.g. internet
        to private DMZ)

        Typically used with load balancers, firewalls, or routers.'
      flat_name: server.nat.ip
      level: extended
      name: nat.ip
      short: Server NAT ip
      type: ip
    nat.port:
      description: 'Translated port of destination based NAT sessions (e.g. internet
        to private DMZ)

        Typically used with load balancers, firewalls, or routers.'
      flat_name: server.nat.port
      format: string
      level: extended
      name: nat.port
      short: Server NAT port
      type: long
    packets:
      description: Packets sent from the server to the client.
      example: 12
      flat_name: server.packets
      level: core
      name: packets
      short: Packets sent from the server to the client.
      type: long
    port:
      description: Port of the server.
      flat_name: server.port
      format: string
      level: core
      name: port
      short: Port of the server.
      type: long
    registered_domain:
      description: 'The highest registered server domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: server.registered_domain
      level: extended
      name: registered_domain
      short: The highest registered server domain, stripped of the subdomain.
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: server.top_level_domain
      level: extended
      name: top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: server.user.domain
      level: extended
      name: domain
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      description: User email address.
      flat_name: server.user.email
      level: extended
      name: email
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: server.user.full_name
      level: extended
      multi_fields:
      - flat_name: server.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: server.user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: server.user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      flat_name: server.user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: server.user.hash
      level: extended
      name: hash
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      description: One or multiple unique identifiers of the user.
      flat_name: server.user.id
      level: core
      name: id
      original_fieldset: user
      short: One or multiple unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      example: albert
      flat_name: server.user.name
      level: core
      multi_fields:
      - flat_name: server.user.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: server
  nestings:
  - as
  - geo
  - user
  prefix: server.
  short: Fields about the server side of a network connection, used with client.
  title: Server
  type: group
service:
  description: 'The service fields describe the service for or from which the data
    was collected.

    These fields help you find and correlate logs for a specific service and version.'
  fields:
    ephemeral_id:
      description: 'Ephemeral identifier of this service (if one exists).

        This id normally changes across restarts, but `service.id` does not.'
      example: 8a4f500f
      flat_name: service.ephemeral_id
      level: extended
      name: ephemeral_id
      short: Ephemeral identifier of this service.
      type: keyword
    id:
      description: 'Unique identifier of the running service. If the service is comprised
        of many nodes, the `service.id` should be the same for all nodes.

        This id should uniquely identify the service. This makes it possible to correlate
        logs and metrics for one specific service, no matter which particular node
        emitted the event.

        Note that if you need to see the events from one specific host of the service,
        you should filter on that `host.name` or `host.id` instead.'
      example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
      flat_name: service.id
      level: core
      name: id
      short: Unique identifier of the running service.
      type: keyword
    name:
      description: 'Name of the service data is collected from.

        The name of the service is normally user given. This allows for distributed
        services that run on multiple hosts to correlate the related instances based
        on the name.

        In the case of Elasticsearch the `service.name` could contain the cluster
        name. For Beats the `service.name` is by default a copy of the `service.type`
        field if no name is specified.'
      example: elasticsearch-metrics
      flat_name: service.name
      level: core
      name: name
      short: Name of the service.
      type: keyword
    node.name:
      description: 'Name of a service node.

        This allows for two nodes of the same service running on the same host to
        be differentiated. Therefore, `service.node.name` should typically be unique
        across nodes of a given service.

        In the case of Elasticsearch, the `service.node.name` could contain the unique
        node name within the Elasticsearch cluster. In cases where the service doesn''t
        have the concept of a node name, the host name or container name can be used
        to distinguish running instances that make up this service. If those do not
        provide uniqueness (e.g. multiple instances of the service running on the
        same host) - the node name can be manually set.'
      example: instance-0000000016
      flat_name: service.node.name
      level: extended
      name: node.name
      short: Name of the service node.
      type: keyword
    state:
      description: Current state of the service.
      flat_name: service.state
      level: core
      name: state
      short: Current state of the service.
      type: keyword
    type:
      description: 'The type of the service data is collected from.

        The type can be used to group and correlate logs and metrics from one service
        type.

        Example: If logs or metrics are collected from Elasticsearch, `service.type`
        would be `elasticsearch`.'
      example: elasticsearch
      flat_name: service.type
      level: core
      name: type
      short: The type of the service.
      type: keyword
    version:
      description: 'Version of the service the data was collected from.

        This allows to look at a data set only for a specific version of a service.'
      example: 3.2.4
      flat_name: service.version
      level: core
      name: version
      short: Version of the service.
      type: keyword
  group: 2
  name: service
  prefix: service.
  short: Fields describing the service for or from which the data was collected.
  title: Service
  type: group
source:
  description: 'Source fields describe details about the source of a packet/event.

    Source fields are usually populated in conjunction with destination fields.'
  fields:
    address:
      description: 'Some event source addresses are defined ambiguously. The event
        will sometimes list an IP, a domain or a unix socket.  You should always store
        the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      flat_name: source.address
      level: extended
      name: address
      short: Source network address.
      type: keyword
    as.number:
      description: Unique number allocated to the autonomous system. The autonomous
        system number (ASN) uniquely identifies each network on the Internet.
      example: 15169
      flat_name: source.as.number
      level: extended
      name: number
      original_fieldset: as
      short: Unique number allocated to the autonomous system. The autonomous system
        number (ASN) uniquely identifies each network on the Internet.
      type: long
    as.organization.name:
      description: Organization name.
      example: Google LLC
      flat_name: source.as.organization.name
      level: extended
      multi_fields:
      - flat_name: source.as.organization.name.text
        name: text
        norms: false
        type: text
      name: organization.name
      original_fieldset: as
      short: Organization name.
      type: keyword
    bytes:
      description: Bytes sent from the source to the destination.
      example: 184
      flat_name: source.bytes
      format: bytes
      level: core
      name: bytes
      short: Bytes sent from the source to the destination.
      type: long
    domain:
      description: Source domain.
      flat_name: source.domain
      level: core
      name: domain
      short: Source domain.
      type: keyword
    geo.city_name:
      description: City name.
      example: Montreal
      flat_name: source.geo.city_name
      level: core
      name: city_name
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      example: North America
      flat_name: source.geo.continent_name
      level: core
      name: continent_name
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      example: CA
      flat_name: source.geo.country_iso_code
      level: core
      name: country_iso_code
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      example: Canada
      flat_name: source.geo.country_name
      level: core
      name: country_name
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: source.geo.location
      level: core
      name: location
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: source.geo.name
      level: extended
      name: name
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      example: CA-QC
      flat_name: source.geo.region_iso_code
      level: core
      name: region_iso_code
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      example: Quebec
      flat_name: source.geo.region_name
      level: core
      name: region_name
      original_fieldset: geo
      short: Region name.
      type: keyword
    ip:
      description: 'IP address of the source.

        Can be one or multiple IPv4 or IPv6 addresses.'
      flat_name: source.ip
      level: core
      name: ip
      short: IP address of the source.
      type: ip
    mac:
      description: MAC address of the source.
      flat_name: source.mac
      level: core
      name: mac
      short: MAC address of the source.
      type: keyword
    nat.ip:
      description: 'Translated ip of source based NAT sessions (e.g. internal client
        to internet)

        Typically connections traversing load balancers, firewalls, or routers.'
      flat_name: source.nat.ip
      level: extended
      name: nat.ip
      short: Source NAT ip
      type: ip
    nat.port:
      description: 'Translated port of source based NAT sessions. (e.g. internal client
        to internet)

        Typically used with load balancers, firewalls, or routers.'
      flat_name: source.nat.port
      format: string
      level: extended
      name: nat.port
      short: Source NAT port
      type: long
    packets:
      description: Packets sent from the source to the destination.
      example: 12
      flat_name: source.packets
      level: core
      name: packets
      short: Packets sent from the source to the destination.
      type: long
    port:
      description: Port of the source.
      flat_name: source.port
      format: string
      level: core
      name: port
      short: Port of the source.
      type: long
    registered_domain:
      description: 'The highest registered source domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: source.registered_domain
      level: extended
      name: registered_domain
      short: The highest registered source domain, stripped of the subdomain.
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: source.top_level_domain
      level: extended
      name: top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: source.user.domain
      level: extended
      name: domain
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      description: User email address.
      flat_name: source.user.email
      level: extended
      name: email
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: source.user.full_name
      level: extended
      multi_fields:
      - flat_name: source.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: source.user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: source.user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      flat_name: source.user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: source.user.hash
      level: extended
      name: hash
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      description: One or multiple unique identifiers of the user.
      flat_name: source.user.id
      level: core
      name: id
      original_fieldset: user
      short: One or multiple unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      example: albert
      flat_name: source.user.name
      level: core
      multi_fields:
      - flat_name: source.user.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: source
  nestings:
  - as
  - geo
  - user
  prefix: source.
  short: Fields about the source side of a network connection, used with destination.
  title: Source
  type: group
stack_frame:
  description: TODO
  fields:
    instruction_pointer:
      description: TODO
      flat_name: stack_frame.instruction_pointer
      level: custom
      name: instruction_pointer
      short: TODO
      type: keyword
    memory_section.memory_address:
      description: TODO
      flat_name: stack_frame.memory_section.memory_address
      level: custom
      name: memory_section.memory_address
      short: TODO
      type: keyword
    memory_section.memory_size:
      description: TODO
      flat_name: stack_frame.memory_section.memory_size
      level: custom
      name: memory_section.memory_size
      short: TODO
      type: keyword
    memory_section.protection:
      description: TODO
      flat_name: stack_frame.memory_section.protection
      level: custom
      name: memory_section.protection
      short: TODO
      type: keyword
    module_path:
      description: TODO
      flat_name: stack_frame.module_path
      level: custom
      name: module_path
      short: TODO
      type: keyword
    rva:
      description: TODO
      flat_name: stack_frame.rva
      level: custom
      name: rva
      short: TODO
      type: keyword
    symbol_info:
      description: TODO
      flat_name: stack_frame.symbol_info
      level: custom
      name: symbol_info
      short: TODO
      type: keyword
  group: 2
  name: stack_frame
  prefix: stack_frame.
  reusable:
    expected:
    - thread.call_stack
    - process.defense_evasions.call_stack
    top_level: false
  short: TODO
  title: Stack Frame
  type: group
target:
  description: 'These fields contain information about a target.

    These fields provide more context about the target process and thread that are
    related to the data in the document. Useful in a security context where a target
    process or thread may be acted on by another process or thread.'
  fields:
    process.args:
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example:
      - /usr/bin/ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: target.process.args
      level: extended
      name: args
      original_fieldset: process
      short: Array of process arguments.
      type: keyword
    process.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: target.process.args_count
      level: extended
      name: args_count
      original_fieldset: process
      short: Length of the process.args array.
      type: long
    process.argv_list:
      description: TODO
      flat_name: target.process.argv_list
      level: custom
      name: argv_list
      original_fieldset: process
      short: TODO
      type: keyword
    process.authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: target.process.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: target.process.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: target.process.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: target.process.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: target.process.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: target.process.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: target.process.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: target.process.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.more_info_link:
      description: TODO
      flat_name: target.process.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.program_name:
      description: TODO
      flat_name: target.process.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.authenticode.publisher_link:
      description: TODO
      flat_name: target.process.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: target.process.command_line
      level: extended
      multi_fields:
      - flat_name: target.process.command_line.text
        name: text
        norms: false
        type: text
      name: command_line
      original_fieldset: process
      short: Full command line that started the process.
      type: keyword
    process.cpu_percent:
      description: TODO
      flat_name: target.process.cpu_percent
      level: custom
      name: cpu_percent
      original_fieldset: process
      short: TODO
      type: double
    process.cwd:
      description: TODO
      flat_name: target.process.cwd
      level: custom
      name: cwd
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions:
      description: TODO
      flat_name: target.process.defense_evasions
      level: custom
      name: defense_evasions
      original_fieldset: process
      short: TODO
      type: nested
    process.defense_evasions.call_stack:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack
      level: custom
      name: defense_evasions.call_stack
      original_fieldset: process
      short: TODO
      type: nested
    process.defense_evasions.call_stack.stack_frame.instruction_pointer:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.instruction_pointer
      level: custom
      name: instruction_pointer
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.memory_section.memory_address:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.memory_section.memory_address
      level: custom
      name: memory_section.memory_address
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.memory_section.memory_size:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.memory_section.memory_size
      level: custom
      name: memory_section.memory_size
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.memory_section.protection:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.memory_section.protection
      level: custom
      name: memory_section.protection
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.module_path:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.module_path
      level: custom
      name: module_path
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.rva:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.rva
      level: custom
      name: rva
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.stack_frame.symbol_info:
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.stack_frame.symbol_info
      level: custom
      name: symbol_info
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    process.defense_evasions.delta_count:
      description: TODO
      flat_name: target.process.defense_evasions.delta_count
      level: custom
      name: defense_evasions.delta_count
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.evasion_subtype:
      description: TODO
      flat_name: target.process.defense_evasions.evasion_subtype
      level: custom
      name: defense_evasions.evasion_subtype
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.evasion_type:
      description: TODO
      flat_name: target.process.defense_evasions.evasion_type
      level: custom
      name: defense_evasions.evasion_type
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.instruction_pointer:
      description: TODO
      flat_name: target.process.defense_evasions.instruction_pointer
      level: custom
      name: defense_evasions.instruction_pointer
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections:
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections
      level: custom
      name: defense_evasions.memory_sections
      original_fieldset: process
      short: TODO
      type: nested
    process.defense_evasions.memory_sections.memory_address:
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.memory_address
      level: custom
      name: defense_evasions.memory_sections.memory_address
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections.memory_size:
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.memory_size
      level: custom
      name: defense_evasions.memory_sections.memory_size
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections.protection:
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.protection
      level: custom
      name: defense_evasions.memory_sections.protection
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.module_path:
      description: TODO
      flat_name: target.process.defense_evasions.module_path
      level: custom
      name: defense_evasions.module_path
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.thread.thread_id:
      description: TODO
      flat_name: target.process.defense_evasions.thread.thread_id
      level: custom
      name: defense_evasions.thread.thread_id
      original_fieldset: process
      short: TODO
      type: long
    process.defense_evasions.thread.thread_start_address:
      description: TODO
      flat_name: target.process.defense_evasions.thread.thread_start_address
      level: custom
      name: defense_evasions.thread.thread_start_address
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.total_memory_size:
      description: TODO
      flat_name: target.process.defense_evasions.total_memory_size
      level: custom
      name: defense_evasions.total_memory_size
      original_fieldset: process
      short: TODO
      type: keyword
    process.domain:
      description: TODO
      flat_name: target.process.domain
      level: custom
      name: domain
      original_fieldset: process
      short: TODO
      type: keyword
    process.env_variables:
      description: TODO
      flat_name: target.process.env_variables
      level: custom
      name: env_variables
      original_fieldset: process
      short: TODO
      type: keyword
    process.executable:
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: target.process.executable
      level: extended
      multi_fields:
      - flat_name: target.process.executable.text
        name: text
        norms: false
        type: text
      name: executable
      original_fieldset: process
      short: Absolute path to the process executable.
      type: keyword
    process.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: target.process.exit_code
      level: extended
      name: exit_code
      original_fieldset: process
      short: The exit code of the process.
      type: long
    process.gid:
      description: TODO
      flat_name: target.process.gid
      level: custom
      name: gid
      original_fieldset: process
      short: TODO
      type: long
    process.group:
      description: TODO
      flat_name: target.process.group
      level: custom
      name: group
      original_fieldset: process
      short: TODO
      type: keyword
    process.handle:
      description: TODO
      flat_name: target.process.handle
      level: custom
      name: handle
      original_fieldset: process
      short: TODO
      type: nested
    process.handle.handle_id:
      description: TODO
      flat_name: target.process.handle.handle_id
      level: custom
      name: handle.handle_id
      original_fieldset: process
      short: TODO
      type: long
    process.handle.handle_name:
      description: TODO
      flat_name: target.process.handle.handle_name
      level: custom
      name: handle.handle_name
      original_fieldset: process
      short: TODO
      type: keyword
    process.handle.handle_type:
      description: TODO
      flat_name: target.process.handle.handle_type
      level: custom
      name: handle.handle_type
      original_fieldset: process
      short: TODO
      type: keyword
    process.has_unbacked_execute_memory:
      description: TODO
      flat_name: target.process.has_unbacked_execute_memory
      level: custom
      name: has_unbacked_execute_memory
      original_fieldset: process
      short: TODO
      type: boolean
    process.hash.imphash:
      description: Imphash.
      flat_name: target.process.hash.imphash
      level: extended
      name: imphash
      original_fieldset: hash
      short: Imphash.
      type: keyword
    process.hash.md5:
      description: MD5 hash.
      flat_name: target.process.hash.md5
      level: extended
      name: md5
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    process.hash.sha1:
      description: SHA1 hash.
      flat_name: target.process.hash.sha1
      level: extended
      name: sha1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    process.hash.sha256:
      description: SHA256 hash.
      flat_name: target.process.hash.sha256
      level: extended
      name: sha256
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    process.hash.sha512:
      description: SHA512 hash.
      flat_name: target.process.hash.sha512
      level: extended
      name: sha512
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    process.hash_matched_module:
      description: TODO
      flat_name: target.process.hash_matched_module
      level: custom
      name: hash_matched_module
      original_fieldset: process
      short: TODO
      type: boolean
    process.imphash:
      description: TODO
      flat_name: target.process.imphash
      level: custom
      name: imphash
      original_fieldset: process
      short: TODO
      type: keyword
    process.is_sensor:
      description: Is this the Elastic Endpoint process or not.
      flat_name: target.process.is_sensor
      level: custom
      name: is_sensor
      original_fieldset: process
      short: Is this the Elastic Endpoint process or not.
      type: boolean
    process.malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: target.process.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: target.process.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    process.malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: target.process.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.malware_score.identifier:
      description: TODO
      flat_name: target.process.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.malware_score.prevention_threshold:
      description: TODO
      flat_name: target.process.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.malware_score.score:
      description: TODO
      flat_name: target.process.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    process.malware_score.threshold:
      description: TODO
      flat_name: target.process.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.malware_score.upx_packed:
      description: TODO
      flat_name: target.process.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    process.malware_score.version:
      description: TODO
      flat_name: target.process.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.memory_percent:
      description: TODO
      flat_name: target.process.memory_percent
      level: custom
      name: memory_percent
      original_fieldset: process
      short: TODO
      type: double
    process.memory_region:
      description: TODO
      flat_name: target.process.memory_region
      level: custom
      name: memory_region
      original_fieldset: process
      short: TODO
      type: nested
    process.memory_region.allocation_base:
      description: TODO
      flat_name: target.process.memory_region.allocation_base
      level: custom
      name: memory_region.allocation_base
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.allocation_protection:
      description: TODO
      flat_name: target.process.memory_region.allocation_protection
      level: custom
      name: memory_region.allocation_protection
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.bytes:
      description: TODO
      flat_name: target.process.memory_region.bytes
      level: custom
      name: memory_region.bytes
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram:
      description: TODO
      flat_name: target.process.memory_region.histogram
      level: custom
      name: memory_region.histogram
      original_fieldset: process
      short: TODO
      type: nested
    process.memory_region.histogram.histogram_array:
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_array
      level: custom
      name: memory_region.histogram.histogram_array
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram.histogram_flavor:
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_flavor
      level: custom
      name: memory_region.histogram.histogram_flavor
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram.histogram_resolution:
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_resolution
      level: custom
      name: memory_region.histogram.histogram_resolution
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.length:
      description: TODO
      flat_name: target.process.memory_region.length
      level: custom
      name: memory_region.length
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.memory:
      description: TODO
      flat_name: target.process.memory_region.memory
      level: custom
      name: memory_region.memory
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.memory_address:
      description: TODO
      flat_name: target.process.memory_region.memory_address
      level: custom
      name: memory_region.memory_address
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.module_path:
      description: TODO
      flat_name: target.process.memory_region.module_path
      level: custom
      name: memory_region.module_path
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.permission:
      description: TODO
      flat_name: target.process.memory_region.permission
      level: custom
      name: memory_region.permission
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.protection:
      description: TODO
      flat_name: target.process.memory_region.protection
      level: custom
      name: memory_region.protection
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_base:
      description: TODO
      flat_name: target.process.memory_region.region_base
      level: custom
      name: memory_region.region_base
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_size:
      description: TODO
      flat_name: target.process.memory_region.region_size
      level: custom
      name: memory_region.region_size
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_tag:
      description: TODO
      flat_name: target.process.memory_region.region_tag
      level: custom
      name: memory_region.region_tag
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.type:
      description: TODO
      flat_name: target.process.memory_region.type
      level: custom
      name: memory_region.type
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.unbacked_on_disk:
      description: TODO
      flat_name: target.process.memory_region.unbacked_on_disk
      level: custom
      name: memory_region.unbacked_on_disk
      original_fieldset: process
      short: TODO
      type: boolean
    process.module_info.architecture:
      description: TODO
      flat_name: target.process.module_info.architecture
      level: custom
      name: architecture
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: target.process.module_info.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.more_info_link:
      description: TODO
      flat_name: target.process.module_info.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.program_name:
      description: TODO
      flat_name: target.process.module_info.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.authenticode.publisher_link:
      description: TODO
      flat_name: target.process.module_info.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.module_info.compile_time:
      description: TODO
      flat_name: target.process.module_info.compile_time
      level: custom
      name: compile_time
      original_fieldset: module_info
      short: TODO
      type: date
    process.module_info.hash.imphash:
      description: TODO
      flat_name: target.process.module_info.hash.imphash
      level: custom
      name: hash.imphash
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.hash.md5:
      description: TODO
      flat_name: target.process.module_info.hash.md5
      level: custom
      name: hash.md5
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.hash.sha1:
      description: TODO
      flat_name: target.process.module_info.hash.sha1
      level: custom
      name: hash.sha1
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.hash.sha256:
      description: TODO
      flat_name: target.process.module_info.hash.sha256
      level: custom
      name: hash.sha256
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: target.process.module_info.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.module_info.malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: target.process.module_info.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    process.module_info.malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: target.process.module_info.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.module_info.malware_score.identifier:
      description: TODO
      flat_name: target.process.module_info.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.module_info.malware_score.prevention_threshold:
      description: TODO
      flat_name: target.process.module_info.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.module_info.malware_score.score:
      description: TODO
      flat_name: target.process.module_info.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    process.module_info.malware_score.threshold:
      description: TODO
      flat_name: target.process.module_info.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.module_info.malware_score.upx_packed:
      description: TODO
      flat_name: target.process.module_info.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    process.module_info.malware_score.version:
      description: TODO
      flat_name: target.process.module_info.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.module_info.mapped_address:
      description: TODO
      flat_name: target.process.module_info.mapped_address
      level: custom
      name: mapped_address
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.mapped_size:
      description: TODO
      flat_name: target.process.module_info.mapped_size
      level: custom
      name: mapped_size
      original_fieldset: module_info
      short: TODO
      type: long
    process.module_info.path:
      description: TODO
      flat_name: target.process.module_info.path
      level: custom
      name: path
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.pe_exports:
      description: TODO
      flat_name: target.process.module_info.pe_exports
      level: custom
      name: pe_exports
      original_fieldset: module_info
      short: TODO
      type: nested
    process.module_info.pe_exports.name:
      description: TODO
      flat_name: target.process.module_info.pe_exports.name
      level: custom
      name: pe_exports.name
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.pe_exports.ordinal:
      description: TODO
      flat_name: target.process.module_info.pe_exports.ordinal
      level: custom
      name: pe_exports.ordinal
      original_fieldset: module_info
      short: TODO
      type: long
    process.module_info.pe_imports:
      description: TODO
      flat_name: target.process.module_info.pe_imports
      level: custom
      name: pe_imports
      original_fieldset: module_info
      short: TODO
      type: nested
    process.module_info.pe_imports.dll_name:
      description: TODO
      flat_name: target.process.module_info.pe_imports.dll_name
      level: custom
      name: pe_imports.dll_name
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.pe_imports.import_names:
      description: TODO
      flat_name: target.process.module_info.pe_imports.import_names
      level: custom
      name: pe_imports.import_names
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.signature_signer:
      description: TODO
      flat_name: target.process.module_info.signature_signer
      level: custom
      name: signature_signer
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.module_info.signature_status:
      description: TODO
      flat_name: target.process.module_info.signature_status
      level: custom
      name: signature_status
      original_fieldset: module_info
      short: TODO
      type: keyword
    process.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: target.process.name
      level: extended
      multi_fields:
      - flat_name: target.process.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: process
      short: Process name.
      type: keyword
    process.num_threads:
      description: TODO
      flat_name: target.process.num_threads
      level: custom
      name: num_threads
      original_fieldset: process
      short: TODO
      type: long
    process.parent.args:
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      example:
      - ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: target.process.parent.args
      level: extended
      name: parent.args
      original_fieldset: process
      short: Array of process arguments.
      type: keyword
    process.parent.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: target.process.parent.args_count
      level: extended
      name: parent.args_count
      original_fieldset: process
      short: Length of the process.args array.
      type: long
    process.parent.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: target.process.parent.command_line
      level: extended
      multi_fields:
      - flat_name: target.process.parent.command_line.text
        name: text
        norms: false
        type: text
      name: parent.command_line
      original_fieldset: process
      short: Full command line that started the process.
      type: keyword
    process.parent.executable:
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: target.process.parent.executable
      level: extended
      multi_fields:
      - flat_name: target.process.parent.executable.text
        name: text
        norms: false
        type: text
      name: parent.executable
      original_fieldset: process
      short: Absolute path to the process executable.
      type: keyword
    process.parent.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: target.process.parent.exit_code
      level: extended
      name: parent.exit_code
      original_fieldset: process
      short: The exit code of the process.
      type: long
    process.parent.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: target.process.parent.name
      level: extended
      multi_fields:
      - flat_name: target.process.parent.name.text
        name: text
        norms: false
        type: text
      name: parent.name
      original_fieldset: process
      short: Process name.
      type: keyword
    process.parent.pgid:
      description: Identifier of the group of processes the process belongs to.
      flat_name: target.process.parent.pgid
      format: string
      level: extended
      name: parent.pgid
      original_fieldset: process
      short: Identifier of the group of processes the process belongs to.
      type: long
    process.parent.pid:
      description: Process id.
      example: 4242
      flat_name: target.process.parent.pid
      format: string
      level: core
      name: parent.pid
      original_fieldset: process
      short: Process id.
      type: long
    process.parent.ppid:
      description: Parent process' pid.
      example: 4241
      flat_name: target.process.parent.ppid
      format: string
      level: extended
      name: parent.ppid
      original_fieldset: process
      short: Parent process' pid.
      type: long
    process.parent.start:
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.process.parent.start
      level: extended
      name: parent.start
      original_fieldset: process
      short: The time the process started.
      type: date
    process.parent.thread.id:
      description: Thread ID.
      example: 4242
      flat_name: target.process.parent.thread.id
      format: string
      level: extended
      name: parent.thread.id
      original_fieldset: process
      short: Thread ID.
      type: long
    process.parent.thread.name:
      description: Thread name.
      example: thread-0
      flat_name: target.process.parent.thread.name
      level: extended
      name: parent.thread.name
      original_fieldset: process
      short: Thread name.
      type: keyword
    process.parent.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: target.process.parent.title
      level: extended
      multi_fields:
      - flat_name: target.process.parent.title.text
        name: text
        norms: false
        type: text
      name: parent.title
      original_fieldset: process
      short: Process title.
      type: keyword
    process.parent.uptime:
      description: Seconds the process has been up.
      example: 1325
      flat_name: target.process.parent.uptime
      level: extended
      name: parent.uptime
      original_fieldset: process
      short: Seconds the process has been up.
      type: long
    process.parent.working_directory:
      description: The working directory of the process.
      example: /home/alice
      flat_name: target.process.parent.working_directory
      level: extended
      multi_fields:
      - flat_name: target.process.parent.working_directory.text
        name: text
        norms: false
        type: text
      name: parent.working_directory
      original_fieldset: process
      short: The working directory of the process.
      type: keyword
    process.pe_info.architecture:
      description: TODO
      flat_name: target.process.pe_info.architecture
      level: custom
      name: pe_info.architecture
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_signer.issuer_name:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_signer.issuer_name
      level: custom
      name: cert_signer.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_signer.serial_number:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_signer.serial_number
      level: custom
      name: cert_signer.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_signer.subject_name:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_signer.subject_name
      level: custom
      name: cert_signer.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_signer.timestamp_string:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_signer.timestamp_string
      level: custom
      name: cert_signer.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_timestamp.issuer_name:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_timestamp.issuer_name
      level: custom
      name: cert_timestamp.issuer_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_timestamp.serial_number:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_timestamp.serial_number
      level: custom
      name: cert_timestamp.serial_number
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_timestamp.subject_name:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_timestamp.subject_name
      level: custom
      name: cert_timestamp.subject_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.cert_timestamp.timestamp_string:
      description: TODO
      flat_name: target.process.pe_info.authenticode.cert_timestamp.timestamp_string
      level: custom
      name: cert_timestamp.timestamp_string
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.more_info_link:
      description: TODO
      flat_name: target.process.pe_info.authenticode.more_info_link
      level: custom
      name: more_info_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.program_name:
      description: TODO
      flat_name: target.process.pe_info.authenticode.program_name
      level: custom
      name: program_name
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.authenticode.publisher_link:
      description: TODO
      flat_name: target.process.pe_info.authenticode.publisher_link
      level: custom
      name: publisher_link
      original_fieldset: authenticode
      short: TODO
      type: keyword
    process.pe_info.compile_time:
      description: TODO
      flat_name: target.process.pe_info.compile_time
      level: custom
      name: pe_info.compile_time
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.entry_point_address:
      description: TODO
      flat_name: target.process.pe_info.entry_point_address
      level: custom
      name: pe_info.entry_point_address
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.is_dll:
      description: TODO
      flat_name: target.process.pe_info.is_dll
      level: custom
      name: pe_info.is_dll
      original_fieldset: process
      short: TODO
      type: boolean
    process.pe_info.malware_score.compressed_malware_features.data_buffer:
      description: TODO
      flat_name: target.process.pe_info.malware_score.compressed_malware_features.data_buffer
      level: custom
      name: compressed_malware_features.data_buffer
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.pe_info.malware_score.compressed_malware_features.decompressed_size:
      description: TODO
      flat_name: target.process.pe_info.malware_score.compressed_malware_features.decompressed_size
      level: custom
      name: compressed_malware_features.decompressed_size
      original_fieldset: malware_score
      short: TODO
      type: integer
    process.pe_info.malware_score.compressed_malware_features.encoding:
      description: TODO
      flat_name: target.process.pe_info.malware_score.compressed_malware_features.encoding
      level: custom
      name: compressed_malware_features.encoding
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.pe_info.malware_score.identifier:
      description: TODO
      flat_name: target.process.pe_info.malware_score.identifier
      level: custom
      name: identifier
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.pe_info.malware_score.prevention_threshold:
      description: TODO
      flat_name: target.process.pe_info.malware_score.prevention_threshold
      level: custom
      name: prevention_threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.pe_info.malware_score.score:
      description: TODO
      flat_name: target.process.pe_info.malware_score.score
      level: custom
      name: score
      original_fieldset: malware_score
      short: TODO
      type: double
    process.pe_info.malware_score.threshold:
      description: TODO
      flat_name: target.process.pe_info.malware_score.threshold
      level: custom
      name: threshold
      original_fieldset: malware_score
      short: TODO
      type: double
    process.pe_info.malware_score.upx_packed:
      description: TODO
      flat_name: target.process.pe_info.malware_score.upx_packed
      level: custom
      name: upx_packed
      original_fieldset: malware_score
      short: TODO
      type: boolean
    process.pe_info.malware_score.version:
      description: TODO
      flat_name: target.process.pe_info.malware_score.version
      level: custom
      name: version
      original_fieldset: malware_score
      short: TODO
      type: keyword
    process.pe_info.pe_exports:
      description: TODO
      flat_name: target.process.pe_info.pe_exports
      level: custom
      name: pe_info.pe_exports
      original_fieldset: process
      short: TODO
      type: nested
    process.pe_info.pe_exports.name:
      description: TODO
      flat_name: target.process.pe_info.pe_exports.name
      level: custom
      name: pe_info.pe_exports.name
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.pe_exports.ordinal:
      description: TODO
      flat_name: target.process.pe_info.pe_exports.ordinal
      level: custom
      name: pe_info.pe_exports.ordinal
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.pe_imports:
      description: TODO
      flat_name: target.process.pe_info.pe_imports
      level: custom
      name: pe_info.pe_imports
      original_fieldset: process
      short: TODO
      type: nested
    process.pe_info.pe_imports.dll_name:
      description: TODO
      flat_name: target.process.pe_info.pe_imports.dll_name
      level: custom
      name: pe_info.pe_imports.dll_name
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.pe_imports.import_names:
      description: TODO
      flat_name: target.process.pe_info.pe_imports.import_names
      level: custom
      name: pe_info.pe_imports.import_names
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.resources:
      description: TODO
      flat_name: target.process.pe_info.resources
      level: custom
      name: pe_info.resources
      original_fieldset: process
      short: TODO
      type: nested
    process.pe_info.resources.resource_data.entropy:
      description: TODO
      flat_name: target.process.pe_info.resources.resource_data.entropy
      level: custom
      name: pe_info.resources.resource_data.entropy
      original_fieldset: process
      short: TODO
      type: double
    process.pe_info.resources.resource_data.size:
      description: TODO
      flat_name: target.process.pe_info.resources.resource_data.size
      level: custom
      name: pe_info.resources.resource_data.size
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.resources.resource_id:
      description: TODO
      flat_name: target.process.pe_info.resources.resource_id
      level: custom
      name: pe_info.resources.resource_id
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.resources.resource_name:
      description: TODO
      flat_name: target.process.pe_info.resources.resource_name
      level: custom
      name: pe_info.resources.resource_name
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.resources.resource_type:
      description: TODO
      flat_name: target.process.pe_info.resources.resource_type
      level: custom
      name: pe_info.resources.resource_type
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.sections:
      description: TODO
      flat_name: target.process.pe_info.sections
      level: custom
      name: pe_info.sections
      original_fieldset: process
      short: TODO
      type: nested
    process.pe_info.sections.entropy:
      description: TODO
      flat_name: target.process.pe_info.sections.entropy
      level: custom
      name: pe_info.sections.entropy
      original_fieldset: process
      short: TODO
      type: double
    process.pe_info.sections.name:
      description: TODO
      flat_name: target.process.pe_info.sections.name
      level: custom
      name: pe_info.sections.name
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.sections.raw_offset:
      description: TODO
      flat_name: target.process.pe_info.sections.raw_offset
      level: custom
      name: pe_info.sections.raw_offset
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.sections.raw_size:
      description: TODO
      flat_name: target.process.pe_info.sections.raw_size
      level: custom
      name: pe_info.sections.raw_size
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.sections.virtual_address:
      description: TODO
      flat_name: target.process.pe_info.sections.virtual_address
      level: custom
      name: pe_info.sections.virtual_address
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.sections.virtual_size:
      description: TODO
      flat_name: target.process.pe_info.sections.virtual_size
      level: custom
      name: pe_info.sections.virtual_size
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.signature_signer:
      description: TODO
      flat_name: target.process.pe_info.signature_signer
      level: custom
      name: pe_info.signature_signer
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.signature_status:
      description: TODO
      flat_name: target.process.pe_info.signature_status
      level: custom
      name: pe_info.signature_status
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.version_info:
      description: TODO
      flat_name: target.process.pe_info.version_info
      level: custom
      name: pe_info.version_info
      original_fieldset: process
      short: TODO
      type: nested
    process.pe_info.version_info.code_page:
      description: TODO
      flat_name: target.process.pe_info.version_info.code_page
      level: custom
      name: pe_info.version_info.code_page
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.version_info.key:
      description: TODO
      flat_name: target.process.pe_info.version_info.key
      level: custom
      name: pe_info.version_info.key
      original_fieldset: process
      short: TODO
      type: keyword
    process.pe_info.version_info.language:
      description: TODO
      flat_name: target.process.pe_info.version_info.language
      level: custom
      name: pe_info.version_info.language
      original_fieldset: process
      short: TODO
      type: long
    process.pe_info.version_info.value_string:
      description: TODO
      flat_name: target.process.pe_info.version_info.value_string
      level: custom
      name: pe_info.version_info.value_string
      original_fieldset: process
      short: TODO
      type: keyword
    process.pgid:
      description: Identifier of the group of processes the process belongs to.
      flat_name: target.process.pgid
      format: string
      level: extended
      name: pgid
      original_fieldset: process
      short: Identifier of the group of processes the process belongs to.
      type: long
    process.phys_memory_bytes:
      description: TODO
      flat_name: target.process.phys_memory_bytes
      level: custom
      name: phys_memory_bytes
      original_fieldset: process
      short: TODO
      type: keyword
    process.pid:
      description: Process id.
      example: 4242
      flat_name: target.process.pid
      format: string
      level: core
      name: pid
      original_fieldset: process
      short: Process id.
      type: long
    process.ppid:
      description: Parent process' pid.
      example: 4241
      flat_name: target.process.ppid
      format: string
      level: extended
      name: ppid
      original_fieldset: process
      short: Parent process' pid.
      type: long
    process.services:
      description: TODO
      flat_name: target.process.services
      level: custom
      name: services
      original_fieldset: process
      short: TODO
      type: keyword
    process.session_id:
      description: TODO
      flat_name: target.process.session_id
      level: custom
      name: session_id
      original_fieldset: process
      short: TODO
      type: long
    process.short_name:
      description: TODO
      flat_name: target.process.short_name
      level: custom
      name: short_name
      original_fieldset: process
      short: TODO
      type: keyword
    process.sid:
      description: TODO
      flat_name: target.process.sid
      level: custom
      name: sid
      original_fieldset: process
      short: TODO
      type: keyword
    process.signature_signer:
      description: TODO
      flat_name: target.process.signature_signer
      level: custom
      name: signature_signer
      original_fieldset: process
      short: TODO
      type: keyword
    process.signature_status:
      description: TODO
      flat_name: target.process.signature_status
      level: custom
      name: signature_status
      original_fieldset: process
      short: TODO
      type: keyword
    process.start:
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.process.start
      level: extended
      name: start
      original_fieldset: process
      short: The time the process started.
      type: date
    process.thread:
      description: TODO
      flat_name: target.process.thread
      level: custom
      name: thread
      original_fieldset: process
      short: TODO
      type: nested
    process.thread.entrypoint:
      description: TODO
      flat_name: target.process.thread.entrypoint
      level: custom
      name: thread.entrypoint
      original_fieldset: process
      short: TODO
      type: keyword
    process.thread.id:
      description: Thread ID.
      example: 4242
      flat_name: target.process.thread.id
      format: string
      level: extended
      name: thread.id
      original_fieldset: process
      short: Thread ID.
      type: long
    process.thread.name:
      description: Thread name.
      example: thread-0
      flat_name: target.process.thread.name
      level: extended
      name: thread.name
      original_fieldset: process
      short: Thread name.
      type: keyword
    process.thread.start:
      description: TODO
      flat_name: target.process.thread.start
      level: custom
      name: thread.start
      original_fieldset: process
      short: TODO
      type: date
    process.thread.thread_id:
      description: TODO
      flat_name: target.process.thread.thread_id
      level: custom
      name: thread.thread_id
      original_fieldset: process
      short: TODO
      type: long
    process.thread.uptime:
      description: TODO
      flat_name: target.process.thread.uptime
      level: custom
      name: thread.uptime
      original_fieldset: process
      short: TODO
      type: long
    process.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: target.process.title
      level: extended
      multi_fields:
      - flat_name: target.process.title.text
        name: text
        norms: false
        type: text
      name: title
      original_fieldset: process
      short: Process title.
      type: keyword
    process.token.domain:
      description: TODO
      flat_name: target.process.token.domain
      level: extended
      name: domain
      original_fieldset: token
      short: TODO
      type: keyword
    process.token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: target.process.token.impersonation_level
      level: extended
      name: impersonation_level
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    process.token.integrity_level:
      description: Numeric integrity level.
      flat_name: target.process.token.integrity_level
      level: extended
      name: integrity_level
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    process.token.integrity_level_name:
      description: Human readable integrity level.
      flat_name: target.process.token.integrity_level_name
      level: extended
      name: integrity_level_name
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    process.token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      flat_name: target.process.token.is_appcontainer
      level: extended
      name: is_appcontainer
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    process.token.privileges:
      description: Array describing the privileges associated with the token.
      flat_name: target.process.token.privileges
      level: extended
      name: privileges
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    process.token.privileges.description:
      description: Description of the privilege.
      flat_name: target.process.token.privileges.description
      level: extended
      name: privileges.description
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    process.token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      flat_name: target.process.token.privileges.enabled
      level: extended
      name: privileges.enabled
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    process.token.privileges.name:
      description: Name of the privilege.
      flat_name: target.process.token.privileges.name
      level: extended
      name: privileges.name
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    process.token.sid:
      description: TODO
      flat_name: target.process.token.sid
      level: extended
      name: sid
      original_fieldset: token
      short: TODO
      type: keyword
    process.token.type:
      description: Type of the token, either primary or impersonation.
      flat_name: target.process.token.type
      level: extended
      name: type
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    process.token.user:
      description: Username of token owner.
      flat_name: target.process.token.user
      level: extended
      name: user
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    process.tty_device_major_number:
      description: TODO
      flat_name: target.process.tty_device_major_number
      level: custom
      name: tty_device_major_number
      original_fieldset: process
      short: TODO
      type: integer
    process.tty_device_minor_number:
      description: TODO
      flat_name: target.process.tty_device_minor_number
      level: custom
      name: tty_device_minor_number
      original_fieldset: process
      short: TODO
      type: integer
    process.tty_device_name:
      description: TODO
      flat_name: target.process.tty_device_name
      level: custom
      name: tty_device_name
      original_fieldset: process
      short: TODO
      type: keyword
    process.uid:
      description: TODO
      flat_name: target.process.uid
      level: custom
      name: uid
      original_fieldset: process
      short: TODO
      type: long
    process.unbacked_execute_byte_count:
      description: TODO
      flat_name: target.process.unbacked_execute_byte_count
      level: custom
      name: unbacked_execute_byte_count
      original_fieldset: process
      short: TODO
      type: keyword
    process.unbacked_execute_region_count:
      description: TODO
      flat_name: target.process.unbacked_execute_region_count
      level: custom
      name: unbacked_execute_region_count
      original_fieldset: process
      short: TODO
      type: keyword
    process.unique_pid:
      description: Unique process id.
      flat_name: target.process.unique_pid
      level: custom
      name: unique_pid
      original_fieldset: process
      short: Unique process id.
      type: keyword
    process.unique_ppid:
      description: Unique parent process id.
      flat_name: target.process.unique_ppid
      level: custom
      name: unique_ppid
      original_fieldset: process
      short: Unique parent process id.
      type: keyword
    process.uptime:
      description: Seconds the process has been up.
      example: 1325
      flat_name: target.process.uptime
      level: extended
      name: uptime
      original_fieldset: process
      short: Seconds the process has been up.
      type: long
    process.virt_memory_bytes:
      description: TODO
      flat_name: target.process.virt_memory_bytes
      level: custom
      name: virt_memory_bytes
      original_fieldset: process
      short: TODO
      type: keyword
    process.working_directory:
      description: The working directory of the process.
      example: /home/alice
      flat_name: target.process.working_directory
      level: extended
      multi_fields:
      - flat_name: target.process.working_directory.text
        name: text
        norms: false
        type: text
      name: working_directory
      original_fieldset: process
      short: The working directory of the process.
      type: keyword
    thread.call_stack:
      description: TODO
      flat_name: target.thread.call_stack
      level: custom
      name: call_stack
      original_fieldset: thread
      short: TODO
      type: nested
    thread.call_stack.stack_frame.instruction_pointer:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.instruction_pointer
      level: custom
      name: instruction_pointer
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.memory_section.memory_address:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.memory_section.memory_address
      level: custom
      name: memory_section.memory_address
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.memory_section.memory_size:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.memory_section.memory_size
      level: custom
      name: memory_section.memory_size
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.memory_section.protection:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.memory_section.protection
      level: custom
      name: memory_section.protection
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.module_path:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.module_path
      level: custom
      name: module_path
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.rva:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.rva
      level: custom
      name: rva
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.call_stack.stack_frame.symbol_info:
      description: TODO
      flat_name: target.thread.call_stack.stack_frame.symbol_info
      level: custom
      name: symbol_info
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    thread.id:
      description: Thread id.
      example: 3147
      flat_name: target.thread.id
      level: core
      name: id
      original_fieldset: thread
      short: Thread id.
      type: long
    thread.name:
      description: Thread name.
      example: thread-0
      flat_name: target.thread.name
      level: extended
      name: name
      original_fieldset: thread
      short: Thread name.
      type: keyword
    thread.service_name:
      description: Service associated with the thread.
      example: VaultSvc
      flat_name: target.thread.service_name
      level: extended
      name: service_name
      original_fieldset: thread
      short: Service associated with the thread.
      type: keyword
    thread.start:
      description: The time the thread started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.thread.start
      level: extended
      name: start
      original_fieldset: thread
      short: The time the thread started.
      type: date
    thread.start_address:
      description: Memory address where the thread started.
      example: 5442508
      flat_name: target.thread.start_address
      level: extended
      name: start_address
      original_fieldset: thread
      short: Memory address where the thread started.
      type: keyword
    thread.start_address_module:
      description: TODO
      example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
      flat_name: target.thread.start_address_module
      level: extended
      name: start_address_module
      original_fieldset: thread
      short: TODO
      type: keyword
    thread.token.domain:
      description: TODO
      flat_name: target.thread.token.domain
      level: extended
      name: domain
      original_fieldset: token
      short: TODO
      type: keyword
    thread.token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: target.thread.token.impersonation_level
      level: extended
      name: impersonation_level
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    thread.token.integrity_level:
      description: Numeric integrity level.
      flat_name: target.thread.token.integrity_level
      level: extended
      name: integrity_level
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    thread.token.integrity_level_name:
      description: Human readable integrity level.
      flat_name: target.thread.token.integrity_level_name
      level: extended
      name: integrity_level_name
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    thread.token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      flat_name: target.thread.token.is_appcontainer
      level: extended
      name: is_appcontainer
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    thread.token.privileges:
      description: Array describing the privileges associated with the token.
      flat_name: target.thread.token.privileges
      level: extended
      name: privileges
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    thread.token.privileges.description:
      description: Description of the privilege.
      flat_name: target.thread.token.privileges.description
      level: extended
      name: privileges.description
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    thread.token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      flat_name: target.thread.token.privileges.enabled
      level: extended
      name: privileges.enabled
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    thread.token.privileges.name:
      description: Name of the privilege.
      flat_name: target.thread.token.privileges.name
      level: extended
      name: privileges.name
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    thread.token.sid:
      description: TODO
      flat_name: target.thread.token.sid
      level: extended
      name: sid
      original_fieldset: token
      short: TODO
      type: keyword
    thread.token.type:
      description: Type of the token, either primary or impersonation.
      flat_name: target.thread.token.type
      level: extended
      name: type
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    thread.token.user:
      description: Username of token owner.
      flat_name: target.thread.token.user
      level: extended
      name: user
      original_fieldset: token
      short: Username of token owner.
      type: keyword
  group: 2
  name: target
  nestings:
  - process
  - thread
  prefix: target.
  short: These fields contain information about a target.
  title: Target
  type: group
thread:
  description: 'These fields contain information about a thread.

    These fields provide more context about the relevant thread related to the data
    in the document.'
  fields:
    call_stack:
      description: TODO
      flat_name: thread.call_stack
      level: custom
      name: call_stack
      short: TODO
      type: nested
    call_stack.stack_frame.instruction_pointer:
      description: TODO
      flat_name: thread.call_stack.stack_frame.instruction_pointer
      level: custom
      name: instruction_pointer
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.memory_section.memory_address:
      description: TODO
      flat_name: thread.call_stack.stack_frame.memory_section.memory_address
      level: custom
      name: memory_section.memory_address
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.memory_section.memory_size:
      description: TODO
      flat_name: thread.call_stack.stack_frame.memory_section.memory_size
      level: custom
      name: memory_section.memory_size
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.memory_section.protection:
      description: TODO
      flat_name: thread.call_stack.stack_frame.memory_section.protection
      level: custom
      name: memory_section.protection
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.module_path:
      description: TODO
      flat_name: thread.call_stack.stack_frame.module_path
      level: custom
      name: module_path
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.rva:
      description: TODO
      flat_name: thread.call_stack.stack_frame.rva
      level: custom
      name: rva
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    call_stack.stack_frame.symbol_info:
      description: TODO
      flat_name: thread.call_stack.stack_frame.symbol_info
      level: custom
      name: symbol_info
      original_fieldset: stack_frame
      short: TODO
      type: keyword
    id:
      description: Thread id.
      example: 3147
      flat_name: thread.id
      level: core
      name: id
      short: Thread id.
      type: long
    name:
      description: Thread name.
      example: thread-0
      flat_name: thread.name
      level: extended
      name: name
      short: Thread name.
      type: keyword
    service_name:
      description: Service associated with the thread.
      example: VaultSvc
      flat_name: thread.service_name
      level: extended
      name: service_name
      short: Service associated with the thread.
      type: keyword
    start:
      description: The time the thread started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: thread.start
      level: extended
      name: start
      short: The time the thread started.
      type: date
    start_address:
      description: Memory address where the thread started.
      example: 5442508
      flat_name: thread.start_address
      level: extended
      name: start_address
      short: Memory address where the thread started.
      type: keyword
    start_address_module:
      description: TODO
      example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
      flat_name: thread.start_address_module
      level: extended
      name: start_address_module
      short: TODO
      type: keyword
    token.domain:
      description: TODO
      flat_name: thread.token.domain
      level: extended
      name: domain
      original_fieldset: token
      short: TODO
      type: keyword
    token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: thread.token.impersonation_level
      level: extended
      name: impersonation_level
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    token.integrity_level:
      description: Numeric integrity level.
      flat_name: thread.token.integrity_level
      level: extended
      name: integrity_level
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    token.integrity_level_name:
      description: Human readable integrity level.
      flat_name: thread.token.integrity_level_name
      level: extended
      name: integrity_level_name
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      flat_name: thread.token.is_appcontainer
      level: extended
      name: is_appcontainer
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    token.privileges:
      description: Array describing the privileges associated with the token.
      flat_name: thread.token.privileges
      level: extended
      name: privileges
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    token.privileges.description:
      description: Description of the privilege.
      flat_name: thread.token.privileges.description
      level: extended
      name: privileges.description
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      flat_name: thread.token.privileges.enabled
      level: extended
      name: privileges.enabled
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    token.privileges.name:
      description: Name of the privilege.
      flat_name: thread.token.privileges.name
      level: extended
      name: privileges.name
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    token.sid:
      description: TODO
      flat_name: thread.token.sid
      level: extended
      name: sid
      original_fieldset: token
      short: TODO
      type: keyword
    token.type:
      description: Type of the token, either primary or impersonation.
      flat_name: thread.token.type
      level: extended
      name: type
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    token.user:
      description: Username of token owner.
      flat_name: thread.token.user
      level: extended
      name: user
      original_fieldset: token
      short: Username of token owner.
      type: keyword
  group: 2
  name: thread
  nestings:
  - token
  prefix: thread.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about a thread.
  title: Thread
  type: group
threat:
  description: 'Fields to classify events and alerts according to a threat taxonomy
    such as the Mitre ATT&CK framework.

    These fields are for users to classify alerts from all of their sources (e.g.
    IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture
    the high level category of the threat (e.g. "impact"). The threat.technique.*
    fields are meant to capture which kind of approach is used by this detected threat,
    to accomplish the goal (e.g. "endpoint denial of service").'
  fields:
    framework:
      description: Name of the threat framework used to further categorize and classify
        the tactic and technique of the reported threat. Framework classification
        can be provided by detecting systems, evaluated at ingest time, or retrospectively
        tagged to events.
      example: MITRE ATT&CK
      flat_name: threat.framework
      level: extended
      name: framework
      short: Threat classification framework.
      type: keyword
    tactic.id:
      description: The id of tactic used by this threat. You can use the Mitre ATT&CK
        Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: TA0040
      flat_name: threat.tactic.id
      level: extended
      name: tactic.id
      short: Threat tactic id.
      type: keyword
    tactic.name:
      description: Name of the type of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: impact
      flat_name: threat.tactic.name
      level: extended
      name: tactic.name
      short: Threat tactic.
      type: keyword
    tactic.reference:
      description: The reference url of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: https://attack.mitre.org/tactics/TA0040/
      flat_name: threat.tactic.reference
      level: extended
      name: tactic.reference
      short: Threat tactic url reference.
      type: keyword
    technique.id:
      description: The id of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: T1499
      flat_name: threat.technique.id
      level: extended
      name: technique.id
      short: Threat technique id.
      type: keyword
    technique.name:
      description: The name of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: endpoint denial of service
      flat_name: threat.technique.name
      level: extended
      multi_fields:
      - flat_name: threat.technique.name.text
        name: text
        norms: false
        type: text
      name: technique.name
      short: Threat technique name.
      type: keyword
    technique.reference:
      description: The reference url of technique used by this tactic. You can use
        the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: https://attack.mitre.org/techniques/T1499/
      flat_name: threat.technique.reference
      level: extended
      name: technique.reference
      short: Threat technique reference.
      type: keyword
  group: 2
  name: threat
  prefix: threat.
  short: Fields to classify events and alerts according to a threat taxonomy.
  title: Threat
  type: group
tls:
  description: Fields related to a TLS connection. These fields focus on the TLS protocol
    itself and intentionally avoids in-depth analysis of the related x.509 certificate
    files.
  fields:
    cipher:
      description: String indicating the cipher used during the current connection.
      example: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
      flat_name: tls.cipher
      level: extended
      name: cipher
      short: String indicating the cipher used during the current connection.
      type: keyword
    client.certificate:
      description: PEM-encoded stand-alone certificate offered by the client. This
        is usually mutually-exclusive of `client.certificate_chain` since this value
        also exists in that list.
      example: MII...
      flat_name: tls.client.certificate
      level: extended
      name: client.certificate
      short: PEM-encoded stand-alone certificate offered by the client. This is usually
        mutually-exclusive of `client.certificate_chain` since this value also exists
        in that list.
      type: keyword
    client.certificate_chain:
      description: Array of PEM-encoded certificates that make up the certificate
        chain offered by the client. This is usually mutually-exclusive of `client.certificate`
        since that value should be the first certificate in the chain.
      example:
      - MII...
      - MII...
      flat_name: tls.client.certificate_chain
      level: extended
      name: client.certificate_chain
      short: Array of PEM-encoded certificates that make up the certificate chain
        offered by the client. This is usually mutually-exclusive of `client.certificate`
        since that value should be the first certificate in the chain.
      type: keyword
    client.hash.md5:
      description: Certificate fingerprint using the MD5 digest of DER-encoded version
        of certificate offered by the client. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
      flat_name: tls.client.hash.md5
      level: extended
      name: client.hash.md5
      short: Certificate fingerprint using the MD5 digest of DER-encoded version of
        certificate offered by the client. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    client.hash.sha1:
      description: Certificate fingerprint using the SHA1 digest of DER-encoded version
        of certificate offered by the client. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      example: 9E393D93138888D288266C2D915214D1D1CCEB2A
      flat_name: tls.client.hash.sha1
      level: extended
      name: client.hash.sha1
      short: Certificate fingerprint using the SHA1 digest of DER-encoded version
        of certificate offered by the client. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    client.hash.sha256:
      description: Certificate fingerprint using the SHA256 digest of DER-encoded
        version of certificate offered by the client. For consistency with other hash
        values, this value should be formatted as an uppercase hash.
      example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
      flat_name: tls.client.hash.sha256
      level: extended
      name: client.hash.sha256
      short: Certificate fingerprint using the SHA256 digest of DER-encoded version
        of certificate offered by the client. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    client.issuer:
      description: Distinguished name of subject of the issuer of the x.509 certificate
        presented by the client.
      example: CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
      flat_name: tls.client.issuer
      level: extended
      name: client.issuer
      short: Distinguished name of subject of the issuer of the x.509 certificate
        presented by the client.
      type: keyword
    client.ja3:
      description: A hash that identifies clients based on how they perform an SSL/TLS
        handshake.
      example: d4e5b18d6b55c71272893221c96ba240
      flat_name: tls.client.ja3
      level: extended
      name: client.ja3
      short: A hash that identifies clients based on how they perform an SSL/TLS handshake.
      type: keyword
    client.not_after:
      description: Date/Time indicating when client certificate is no longer considered
        valid.
      example: '2021-01-01T00:00:00.000Z'
      flat_name: tls.client.not_after
      level: extended
      name: client.not_after
      short: Date/Time indicating when client certificate is no longer considered
        valid.
      type: date
    client.not_before:
      description: Date/Time indicating when client certificate is first considered
        valid.
      example: '1970-01-01T00:00:00.000Z'
      flat_name: tls.client.not_before
      level: extended
      name: client.not_before
      short: Date/Time indicating when client certificate is first considered valid.
      type: date
    client.server_name:
      description: Also called an SNI, this tells the server which hostname to which
        the client is attempting to connect. When this value is available, it should
        get copied to `destination.domain`.
      example: www.elastic.co
      flat_name: tls.client.server_name
      level: extended
      name: client.server_name
      short: Also called an SNI, this tells the server which hostname to which the
        client is attempting to connect. When this value is available, it should get
        copied to `destination.domain`.
      type: keyword
    client.subject:
      description: Distinguished name of subject of the x.509 certificate presented
        by the client.
      example: CN=myclient, OU=Documentation Team, DC=mydomain, DC=com
      flat_name: tls.client.subject
      level: extended
      name: client.subject
      short: Distinguished name of subject of the x.509 certificate presented by the
        client.
      type: keyword
    client.supported_ciphers:
      description: Array of ciphers offered by the client during the client hello.
      example:
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - '...'
      flat_name: tls.client.supported_ciphers
      level: extended
      name: client.supported_ciphers
      short: Array of ciphers offered by the client during the client hello.
      type: keyword
    curve:
      description: String indicating the curve used for the given cipher, when applicable.
      example: secp256r1
      flat_name: tls.curve
      level: extended
      name: curve
      short: String indicating the curve used for the given cipher, when applicable.
      type: keyword
    established:
      description: Boolean flag indicating if the TLS negotiation was successful and
        transitioned to an encrypted tunnel.
      flat_name: tls.established
      level: extended
      name: established
      short: Boolean flag indicating if the TLS negotiation was successful and transitioned
        to an encrypted tunnel.
      type: boolean
    next_protocol:
      description: String indicating the protocol being tunneled. Per the values in
        the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),
        this string should be lower case.
      example: http/1.1
      flat_name: tls.next_protocol
      level: extended
      name: next_protocol
      short: String indicating the protocol being tunneled. Per the values in the
        IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),
        this string should be lower case.
      type: keyword
    resumed:
      description: Boolean flag indicating if this TLS connection was resumed from
        an existing TLS negotiation.
      flat_name: tls.resumed
      level: extended
      name: resumed
      short: Boolean flag indicating if this TLS connection was resumed from an existing
        TLS negotiation.
      type: boolean
    server.certificate:
      description: PEM-encoded stand-alone certificate offered by the server. This
        is usually mutually-exclusive of `server.certificate_chain` since this value
        also exists in that list.
      example: MII...
      flat_name: tls.server.certificate
      level: extended
      name: server.certificate
      short: PEM-encoded stand-alone certificate offered by the server. This is usually
        mutually-exclusive of `server.certificate_chain` since this value also exists
        in that list.
      type: keyword
    server.certificate_chain:
      description: Array of PEM-encoded certificates that make up the certificate
        chain offered by the server. This is usually mutually-exclusive of `server.certificate`
        since that value should be the first certificate in the chain.
      example:
      - MII...
      - MII...
      flat_name: tls.server.certificate_chain
      level: extended
      name: server.certificate_chain
      short: Array of PEM-encoded certificates that make up the certificate chain
        offered by the server. This is usually mutually-exclusive of `server.certificate`
        since that value should be the first certificate in the chain.
      type: keyword
    server.hash.md5:
      description: Certificate fingerprint using the MD5 digest of DER-encoded version
        of certificate offered by the server. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
      flat_name: tls.server.hash.md5
      level: extended
      name: server.hash.md5
      short: Certificate fingerprint using the MD5 digest of DER-encoded version of
        certificate offered by the server. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    server.hash.sha1:
      description: Certificate fingerprint using the SHA1 digest of DER-encoded version
        of certificate offered by the server. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      example: 9E393D93138888D288266C2D915214D1D1CCEB2A
      flat_name: tls.server.hash.sha1
      level: extended
      name: server.hash.sha1
      short: Certificate fingerprint using the SHA1 digest of DER-encoded version
        of certificate offered by the server. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    server.hash.sha256:
      description: Certificate fingerprint using the SHA256 digest of DER-encoded
        version of certificate offered by the server. For consistency with other hash
        values, this value should be formatted as an uppercase hash.
      example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
      flat_name: tls.server.hash.sha256
      level: extended
      name: server.hash.sha256
      short: Certificate fingerprint using the SHA256 digest of DER-encoded version
        of certificate offered by the server. For consistency with other hash values,
        this value should be formatted as an uppercase hash.
      type: keyword
    server.issuer:
      description: Subject of the issuer of the x.509 certificate presented by the
        server.
      example: CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com
      flat_name: tls.server.issuer
      level: extended
      name: server.issuer
      short: Subject of the issuer of the x.509 certificate presented by the server.
      type: keyword
    server.ja3s:
      description: A hash that identifies servers based on how they perform an SSL/TLS
        handshake.
      example: 394441ab65754e2207b1e1b457b3641d
      flat_name: tls.server.ja3s
      level: extended
      name: server.ja3s
      short: A hash that identifies servers based on how they perform an SSL/TLS handshake.
      type: keyword
    server.not_after:
      description: Timestamp indicating when server certificate is no longer considered
        valid.
      example: '2021-01-01T00:00:00.000Z'
      flat_name: tls.server.not_after
      level: extended
      name: server.not_after
      short: Timestamp indicating when server certificate is no longer considered
        valid.
      type: date
    server.not_before:
      description: Timestamp indicating when server certificate is first considered
        valid.
      example: '1970-01-01T00:00:00.000Z'
      flat_name: tls.server.not_before
      level: extended
      name: server.not_before
      short: Timestamp indicating when server certificate is first considered valid.
      type: date
    server.subject:
      description: Subject of the x.509 certificate presented by the server.
      example: CN=www.mydomain.com, OU=Infrastructure Team, DC=mydomain, DC=com
      flat_name: tls.server.subject
      level: extended
      name: server.subject
      short: Subject of the x.509 certificate presented by the server.
      type: keyword
    version:
      description: Numeric part of the version parsed from the original string.
      example: '1.2'
      flat_name: tls.version
      level: extended
      name: version
      short: Numeric part of the version parsed from the original string.
      type: keyword
    version_protocol:
      description: Normalized lowercase protocol name parsed from original string.
      example: tls
      flat_name: tls.version_protocol
      level: extended
      name: version_protocol
      short: Normalized lowercase protocol name parsed from original string.
      type: keyword
  group: 2
  name: tls
  prefix: tls.
  short: Fields describing a TLS connection.
  title: TLS
  type: group
token:
  description: 'These fields contain information about a token.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:
    domain:
      description: TODO
      flat_name: token.domain
      level: extended
      name: domain
      short: TODO
      type: keyword
    impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: token.impersonation_level
      level: extended
      name: impersonation_level
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    integrity_level:
      description: Numeric integrity level.
      flat_name: token.integrity_level
      level: extended
      name: integrity_level
      short: Numeric integrity level.
      type: long
    integrity_level_name:
      description: Human readable integrity level.
      flat_name: token.integrity_level_name
      level: extended
      name: integrity_level_name
      short: Human readable integrity level.
      type: keyword
    is_appcontainer:
      description: Whether or not this is an appcontainer token.
      flat_name: token.is_appcontainer
      level: extended
      name: is_appcontainer
      short: Whether or not this is an appcontainer token.
      type: boolean
    privileges:
      description: Array describing the privileges associated with the token.
      flat_name: token.privileges
      level: extended
      name: privileges
      short: Array describing the privileges associated with the token.
      type: nested
    privileges.description:
      description: Description of the privilege.
      flat_name: token.privileges.description
      level: extended
      name: privileges.description
      short: Description of the privilege.
      type: keyword
    privileges.enabled:
      description: Whether or not the privilege is enabled.
      flat_name: token.privileges.enabled
      level: extended
      name: privileges.enabled
      short: Whether or not the privilege is enabled.
      type: boolean
    privileges.name:
      description: Name of the privilege.
      flat_name: token.privileges.name
      level: extended
      name: privileges.name
      short: Name of the privilege.
      type: keyword
    sid:
      description: TODO
      flat_name: token.sid
      level: extended
      name: sid
      short: TODO
      type: keyword
    type:
      description: Type of the token, either primary or impersonation.
      flat_name: token.type
      level: extended
      name: type
      short: Type of the token, either primary or impersonation.
      type: keyword
    user:
      description: Username of token owner.
      flat_name: token.user
      level: extended
      name: user
      short: Username of token owner.
      type: keyword
  group: 2
  name: token
  prefix: token.
  reusable:
    expected:
    - thread
    - process
    top_level: false
  short: These fields contain information about a token.
  title: Token
  type: group
tracing:
  description: Distributed tracing makes it possible to analyze performance throughout
    a microservice architecture all in one view. This is accomplished by tracing all
    of the requests - from the initial web request in the front-end service - to queries
    made through multiple back-end services.
  fields:
    trace.id:
      description: 'Unique identifier of the trace.

        A trace groups multiple events like transactions that belong together. For
        example, a user request handled by multiple inter-connected services.'
      example: 4bf92f3577b34da6a3ce929d0e0e4736
      flat_name: trace.id
      level: extended
      name: trace.id
      short: Unique identifier of the trace.
      type: keyword
    transaction.id:
      description: 'Unique identifier of the transaction.

        A transaction is the highest level of work measured within a service, such
        as a request to a server.'
      example: 00f067aa0ba902b7
      flat_name: transaction.id
      level: extended
      name: transaction.id
      short: Unique identifier of the transaction.
      type: keyword
  group: 2
  name: tracing
  prefix: ''
  root: true
  short: Fields related to distributed tracing.
  title: Tracing
  type: group
url:
  description: URL fields provide support for complete or partial URLs, and supports
    the breaking down into scheme, domain, path, and so on.
  fields:
    domain:
      description: 'Domain of the url, such as "www.elastic.co".

        In some cases a URL may refer to an IP and/or port directly, without a domain
        name. In this case, the IP address would go to the `domain` field.'
      example: www.elastic.co
      flat_name: url.domain
      level: extended
      name: domain
      short: Domain of the url.
      type: keyword
    extension:
      description: 'The field contains the file extension from the original request
        url.

        The file extension is only set if it exists, as not every url has a file extension.

        The leading period must not be included. For example, the value must be "png",
        not ".png".'
      example: png
      flat_name: url.extension
      level: extended
      name: extension
      short: File extension from the original request url.
      type: keyword
    fragment:
      description: 'Portion of the url after the `#`, such as "top".

        The `#` is not part of the fragment.'
      flat_name: url.fragment
      level: extended
      name: fragment
      short: Portion of the url after the `#`.
      type: keyword
    full:
      description: If full URLs are important to your use case, they should be stored
        in `url.full`, whether this field is reconstructed or present in the event
        source.
      example: https://www.elastic.co:443/search?q=elasticsearch#top
      flat_name: url.full
      level: extended
      multi_fields:
      - flat_name: url.full.text
        name: text
        norms: false
        type: text
      name: full
      short: Full unparsed URL.
      type: keyword
    original:
      description: 'Unmodified original url as seen in the event source.

        Note that in network monitoring, the observed URL may be a full URL, whereas
        in access logs, the URL is often just represented as a path.

        This field is meant to represent the URL as it was observed, complete or not.'
      example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
      flat_name: url.original
      level: extended
      multi_fields:
      - flat_name: url.original.text
        name: text
        norms: false
        type: text
      name: original
      short: Unmodified original url as seen in the event source.
      type: keyword
    password:
      description: Password of the request.
      flat_name: url.password
      level: extended
      name: password
      short: Password of the request.
      type: keyword
    path:
      description: Path of the request, such as "/search".
      flat_name: url.path
      level: extended
      name: path
      short: Path of the request, such as "/search".
      type: keyword
    port:
      description: Port of the request, such as 443.
      example: 443
      flat_name: url.port
      format: string
      level: extended
      name: port
      short: Port of the request, such as 443.
      type: long
    query:
      description: 'The query field describes the query string of the request, such
        as "q=elasticsearch".

        The `?` is excluded from the query string. If a URL contains no `?`, there
        is no query field. If there is a `?` but no query, the query field exists
        with an empty string. The `exists` query can be used to differentiate between
        the two cases.'
      flat_name: url.query
      level: extended
      name: query
      short: Query string of the request.
      type: keyword
    registered_domain:
      description: 'The highest registered url domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com
      flat_name: url.registered_domain
      level: extended
      name: registered_domain
      short: The highest registered url domain, stripped of the subdomain.
      type: keyword
    scheme:
      description: 'Scheme of the request, such as "https".

        Note: The `:` is not part of the scheme.'
      example: https
      flat_name: url.scheme
      level: extended
      name: scheme
      short: Scheme of the url.
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: url.top_level_domain
      level: extended
      name: top_level_domain
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    username:
      description: Username of the request.
      flat_name: url.username
      level: extended
      name: username
      short: Username of the request.
      type: keyword
  group: 2
  name: url
  prefix: url.
  short: Fields that let you store URLs in various forms.
  title: URL
  type: group
user:
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:
    domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: user.domain
      level: extended
      name: domain
      short: Name of the directory the user is a member of.
      type: keyword
    email:
      description: User email address.
      flat_name: user.email
      level: extended
      name: email
      short: User email address.
      type: keyword
    full_name:
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: user.full_name
      level: extended
      multi_fields:
      - flat_name: user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      short: User's full name, if available.
      type: keyword
    group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: user.group.domain
      level: extended
      name: domain
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    group.id:
      description: Unique identifier for the group on the system/platform.
      flat_name: user.group.id
      level: extended
      name: id
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    group.name:
      description: Name of the group.
      flat_name: user.group.name
      level: extended
      name: name
      original_fieldset: group
      short: Name of the group.
      type: keyword
    hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: user.hash
      level: extended
      name: hash
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    id:
      description: One or multiple unique identifiers of the user.
      flat_name: user.id
      level: core
      name: id
      short: One or multiple unique identifiers of the user.
      type: keyword
    name:
      description: Short name or login of the user.
      example: albert
      flat_name: user.name
      level: core
      multi_fields:
      - flat_name: user.name.text
        name: text
        norms: false
        type: text
      name: name
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: user
  nestings:
  - group
  prefix: user.
  reusable:
    expected:
    - client
    - destination
    - host
    - server
    - source
    top_level: true
  short: Fields to describe the user relevant to the event.
  title: User
  type: group
user_agent:
  description: 'The user_agent fields normally come from a browser request.

    They often show up in web service logs coming from the parsed user agent string.'
  fields:
    device.name:
      description: Name of the device.
      example: iPhone
      flat_name: user_agent.device.name
      level: extended
      name: device.name
      short: Name of the device.
      type: keyword
    name:
      description: Name of the user agent.
      example: Safari
      flat_name: user_agent.name
      level: extended
      name: name
      short: Name of the user agent.
      type: keyword
    original:
      description: Unparsed user_agent string.
      example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15
        (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
      flat_name: user_agent.original
      level: extended
      multi_fields:
      - flat_name: user_agent.original.text
        name: text
        norms: false
        type: text
      name: original
      short: Unparsed user_agent string.
      type: keyword
    os.family:
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: user_agent.os.family
      level: extended
      name: family
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: user_agent.os.full
      level: extended
      multi_fields:
      - flat_name: user_agent.os.full.text
        name: text
        norms: false
        type: text
      name: full
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: user_agent.os.kernel
      level: extended
      name: kernel
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: user_agent.os.name
      level: extended
      multi_fields:
      - flat_name: user_agent.os.name.text
        name: text
        norms: false
        type: text
      name: name
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.platform:
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: user_agent.os.platform
      level: extended
      name: platform
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: user_agent.os.version
      level: extended
      name: version
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
    version:
      description: Version of the user agent.
      example: 12.0
      flat_name: user_agent.version
      level: extended
      name: version
      short: Version of the user agent.
      type: keyword
  group: 2
  name: user_agent
  nestings:
  - os
  prefix: user_agent.
  short: Fields to describe a browser user_agent string.
  title: User agent
  type: group
vulnerability:
  description: The vulnerability fields describe information about a vulnerability
    that is relevant to an event.
  fields:
    category:
      description: 'The type of system or architecture that the vulnerability affects.
        These may be platform-specific (for example, Debian or SUSE) or general (for
        example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys
        vulnerability categories])

        This field must be an array.'
      example: '["Firewall"]'
      flat_name: vulnerability.category
      level: extended
      name: category
      short: Category of a vulnerability.
      type: keyword
    classification:
      description: The classification of the vulnerability scoring system. For example
        (https://www.first.org/cvss/)
      example: CVSS
      flat_name: vulnerability.classification
      level: extended
      name: classification
      short: Classification of the vulnerability.
      type: keyword
    description:
      description: The description of the vulnerability that provides additional context
        of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common
        Vulnerabilities and Exposure CVE description])
      example: In macOS before 2.12.6, there is a vulnerability in the RPC...
      flat_name: vulnerability.description
      level: extended
      multi_fields:
      - flat_name: vulnerability.description.text
        name: text
        norms: false
        type: text
      name: description
      short: Description of the vulnerability.
      type: keyword
    enumeration:
      description: The type of identifier used for this vulnerability. For example
        (https://cve.mitre.org/about/)
      example: CVE
      flat_name: vulnerability.enumeration
      level: extended
      name: enumeration
      short: Identifier of the vulnerability.
      type: keyword
    id:
      description: The identification (ID) is the number portion of a vulnerability
        entry. It includes a unique identification number for the vulnerability. For
        example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities
        and Exposure CVE ID]
      example: CVE-2019-00001
      flat_name: vulnerability.id
      level: extended
      name: id
      short: ID of the vulnerability.
      type: keyword
    reference:
      description: A resource that provides additional information, context, and mitigations
        for the identified vulnerability.
      example: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111
      flat_name: vulnerability.reference
      level: extended
      name: reference
      short: Reference of the vulnerability.
      type: keyword
    report_id:
      description: The report or scan identification number.
      example: 20191018.0001
      flat_name: vulnerability.report_id
      level: extended
      name: report_id
      short: Scan identification number.
      type: keyword
    scanner.vendor:
      description: The name of the vulnerability scanner vendor.
      example: Tenable
      flat_name: vulnerability.scanner.vendor
      level: extended
      name: scanner.vendor
      short: Name of the scanner vendor.
      type: keyword
    score.base:
      description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

        Base scores cover an assessment for exploitability metrics (attack vector,
        complexity, privileges, and user interaction), impact metrics (confidentiality,
        integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)'
      example: 5.5
      flat_name: vulnerability.score.base
      level: extended
      name: score.base
      short: Vulnerability Base score.
      type: float
    score.environmental:
      description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

        Environmental scores cover an assessment for any modified Base metrics, confidentiality,
        integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)'
      example: 5.5
      flat_name: vulnerability.score.environmental
      level: extended
      name: score.environmental
      short: Vulnerability Environmental score.
      type: float
    score.temporal:
      description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.

        Temporal scores cover an assessment for code maturity, remediation level,
        and confidence. For example (https://www.first.org/cvss/specification-document)'
      flat_name: vulnerability.score.temporal
      level: extended
      name: score.temporal
      short: Vulnerability Temporal score.
      type: float
    score.version:
      description: 'The National Vulnerability Database (NVD) provides qualitative
        severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score
        ranges in addition to the severity ratings for CVSS v3.0 as they are defined
        in the CVSS v3.0 specification.

        CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit
        organization, whose mission is to help computer security incident response
        teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)'
      example: 2.0
      flat_name: vulnerability.score.version
      level: extended
      name: score.version
      short: CVSS version.
      type: keyword
    severity:
      description: The severity of the vulnerability can help with metrics and internal
        prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)
      example: Critical
      flat_name: vulnerability.severity
      level: extended
      name: severity
      short: Severity of the vulnerability.
      type: keyword
  group: 2
  name: vulnerability
  prefix: vulnerability.
  short: Fields to describe the vulnerability relevant to an event.
  title: Vulnerability
  type: group
